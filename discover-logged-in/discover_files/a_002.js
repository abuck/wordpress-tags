/* Detect-zoom
 * -----------
 * Cross Browser Zoom and Pixel Ratio Detector
 * Version 1.0.4 | Apr 1 2013
 * dual-licensed under the WTFPL and MIT license
 * Maintained by https://github/tombigel
 * Original developer https://github.com/yonran
 */

//AMD and CommonJS initialization copied from https://github.com/zohararad/audio5js
(function (root, ns, factory) {
    "use strict";

    if (typeof (module) !== 'undefined' && module.exports) { // CommonJS
        module.exports = factory(ns, root);
    } else if (typeof (define) === 'function' && define.amd) { // AMD
        define("factory", function () {
            return factory(ns, root);
        });
    } else {
        root[ns] = factory(ns, root);
    }

}(window, 'detectZoom', function () {

    /**
     * Use devicePixelRatio if supported by the browser
     * @return {Number}
     * @private
     */
    var devicePixelRatio = function () {
        return window.devicePixelRatio || 1;
    };

    /**
     * Fallback function to set default values
     * @return {Object}
     * @private
     */
    var fallback = function () {
        return {
            zoom: 1,
            devicePxPerCssPx: 1
        };
    };
    /**
     * IE 8 and 9: no trick needed!
     * TODO: Test on IE10 and Windows 8 RT
     * @return {Object}
     * @private
     **/
    var ie8 = function () {
        var zoom = Math.round((screen.deviceXDPI / screen.logicalXDPI) * 100) / 100;
        return {
            zoom: zoom,
            devicePxPerCssPx: zoom * devicePixelRatio()
        };
    };

    /**
     * For IE10 we need to change our technique again...
     * thanks https://github.com/stefanvanburen
     * @return {Object}
     * @private
     */
    var ie10 = function () {
        var zoom = Math.round((document.documentElement.offsetHeight / window.innerHeight) * 100) / 100;
        return {
            zoom: zoom,
            devicePxPerCssPx: zoom * devicePixelRatio()
        };
    };

    /**
     * Mobile WebKit
     * the trick: window.innerWIdth is in CSS pixels, while
     * screen.width and screen.height are in system pixels.
     * And there are no scrollbars to mess up the measurement.
     * @return {Object}
     * @private
     */
    var webkitMobile = function () {
        var deviceWidth = (Math.abs(window.orientation) == 90) ? screen.height : screen.width;
        var zoom = deviceWidth / window.innerWidth;
        return {
            zoom: zoom,
            devicePxPerCssPx: zoom * devicePixelRatio()
        };
    };

    /**
     * Desktop Webkit
     * the trick: an element's clientHeight is in CSS pixels, while you can
     * set its line-height in system pixels using font-size and
     * -webkit-text-size-adjust:none.
     * device-pixel-ratio: http://www.webkit.org/blog/55/high-dpi-web-sites/
     *
     * Previous trick (used before http://trac.webkit.org/changeset/100847):
     * documentElement.scrollWidth is in CSS pixels, while
     * document.width was in system pixels. Note that this is the
     * layout width of the document, which is slightly different from viewport
     * because document width does not include scrollbars and might be wider
     * due to big elements.
     * @return {Object}
     * @private
     */
    var webkit = function () {
        var important = function (str) {
            return str.replace(/;/g, " !important;");
        };

        var div = document.createElement('div');
        div.innerHTML = "1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>0";
        div.setAttribute('style', important('font: 100px/1em sans-serif; -webkit-text-size-adjust: none; text-size-adjust: none; height: auto; width: 1em; padding: 0; overflow: visible;'));

        // The container exists so that the div will be laid out in its own flow
        // while not impacting the layout, viewport size, or display of the
        // webpage as a whole.
        // Add !important and relevant CSS rule resets
        // so that other rules cannot affect the results.
        var container = document.createElement('div');
        container.setAttribute('style', important('width:0; height:0; overflow:hidden; visibility:hidden; position: absolute;'));
        container.appendChild(div);

        document.body.appendChild(container);
        var zoom = 1000 / div.clientHeight;
        zoom = Math.round(zoom * 100) / 100;
        document.body.removeChild(container);

        return{
            zoom: zoom,
            devicePxPerCssPx: zoom * devicePixelRatio()
        };
    };

    /**
     * no real trick; device-pixel-ratio is the ratio of device dpi / css dpi.
     * (Note that this is a different interpretation than Webkit's device
     * pixel ratio, which is the ratio device dpi / system dpi).
     *
     * Also, for Mozilla, there is no difference between the zoom factor and the device ratio.
     *
     * @return {Object}
     * @private
     */
    var firefox4 = function () {
        var zoom = mediaQueryBinarySearch('min--moz-device-pixel-ratio', '', 0, 10, 20, 0.0001);
        zoom = Math.round(zoom * 100) / 100;
        return {
            zoom: zoom,
            devicePxPerCssPx: zoom
        };
    };

    /**
     * Firefox 18.x
     * Mozilla added support for devicePixelRatio to Firefox 18,
     * but it is affected by the zoom level, so, like in older
     * Firefox we can't tell if we are in zoom mode or in a device
     * with a different pixel ratio
     * @return {Object}
     * @private
     */
    var firefox18 = function () {
        return {
            zoom: firefox4().zoom,
            devicePxPerCssPx: devicePixelRatio()
        };
    };

    /**
     * works starting Opera 11.11
     * the trick: outerWidth is the viewport width including scrollbars in
     * system px, while innerWidth is the viewport width including scrollbars
     * in CSS px
     * @return {Object}
     * @private
     */
    var opera11 = function () {
        var zoom = window.top.outerWidth / window.top.innerWidth;
        zoom = Math.round(zoom * 100) / 100;
        return {
            zoom: zoom,
            devicePxPerCssPx: zoom * devicePixelRatio()
        };
    };

    /**
     * Use a binary search through media queries to find zoom level in Firefox
     * @param property
     * @param unit
     * @param a
     * @param b
     * @param maxIter
     * @param epsilon
     * @return {Number}
     */
    var mediaQueryBinarySearch = function (property, unit, a, b, maxIter, epsilon) {
        var matchMedia;
        var head, style, div;
        if (window.matchMedia) {
            matchMedia = window.matchMedia;
        } else {
            head = document.getElementsByTagName('head')[0];
            style = document.createElement('style');
            head.appendChild(style);

            div = document.createElement('div');
            div.className = 'mediaQueryBinarySearch';
            div.style.display = 'none';
            document.body.appendChild(div);

            matchMedia = function (query) {
                style.sheet.insertRule('@media ' + query + '{.mediaQueryBinarySearch ' + '{text-decoration: underline} }', 0);
                var matched = getComputedStyle(div, null).textDecoration == 'underline';
                style.sheet.deleteRule(0);
                return {matches: matched};
            };
        }
        var ratio = binarySearch(a, b, maxIter);
        if (div) {
            head.removeChild(style);
            document.body.removeChild(div);
        }
        return ratio;

        function binarySearch(a, b, maxIter) {
            var mid = (a + b) / 2;
            if (maxIter <= 0 || b - a < epsilon) {
                return mid;
            }
            var query = "(" + property + ":" + mid + unit + ")";
            if (matchMedia(query).matches) {
                return binarySearch(mid, b, maxIter - 1);
            } else {
                return binarySearch(a, mid, maxIter - 1);
            }
        }
    };

    /**
     * Generate detection function
     * @private
     */
    var detectFunction = (function () {
        var func = fallback;
        //IE8+
        if (!isNaN(screen.logicalXDPI) && !isNaN(screen.systemXDPI)) {
            func = ie8;
        }
        // IE10+ / Touch
        else if (window.navigator.msMaxTouchPoints) {
            func = ie10;
        }
        //Mobile Webkit
        else if ('orientation' in window && typeof document.body.style.webkitMarquee === 'string') {
            func = webkitMobile;
        }
        //WebKit
        else if (typeof document.body.style.webkitMarquee === 'string') {
            func = webkit;
        }
        //Opera
        else if (navigator.userAgent.indexOf('Opera') >= 0) {
            func = opera11;
        }
        //Last one is Firefox
        //FF 18.x
        else if (window.devicePixelRatio) {
            func = firefox18;
        }
        //FF 4.0 - 17.x
        else if (firefox4().zoom > 0.001) {
            func = firefox4;
        }

        return func;
    }());


    return ({

        /**
         * Ratios.zoom shorthand
         * @return {Number} Zoom level
         */
        zoom: function () {
            return detectFunction().zoom;
        },

        /**
         * Ratios.devicePxPerCssPx shorthand
         * @return {Number} devicePxPerCssPx level
         */
        device: function () {
            return detectFunction().devicePxPerCssPx;
        }
    });
}));
var wpcom_img_zoomer = {
	zoomed: false,
	timer: null,
	interval: 1000, // zoom polling interval in millisecond
	stats: {ratio:{}, scale:{}}, // list of stats that have been sent

	// Should we apply width/height attributes to control the image size?
	imgNeedsSizeAtts: function( img ) {
		// Do not overwrite existing width/height attributes.
		if ( img.getAttribute('width') !== null || img.getAttribute('height') !== null )
			return false;
		// Do not apply the attributes if the image is already constrained by a parent element.
		if ( img.width < img.naturalWidth || img.height < img.naturalHeight )
			return false;
		return true;
	},

	init: function() {
		var t = this;
		try{
			t.zoomImages();
			t.timer = setInterval( function() { t.zoomImages(); }, t.interval );
		}
		catch(e){
		}
	},

	stop: function() {
		if ( this.timer )
			clearInterval( this.timer );
	},

	getScale: function() {
		var scale = detectZoom.device();
		// Round up to 1.5 or the next integer below the cap.
		if      ( scale <= 1.0 ) scale = 1.0;
		else if ( scale <= 1.5 ) scale = 1.5;
		else if ( scale <= 2.0 ) scale = 2.0;
		else if ( scale <= 3.0 ) scale = 3.0;
		else if ( scale <= 4.0 ) scale = 4.0;
		else                     scale = 5.0;
		return scale;
	},

	shouldZoom: function( scale ) {
		var t = this;
		// Do not operate on hidden frames.
		if ( "innerWidth" in window && !window.innerWidth )
			return false;
		// Don't do anything until scale > 1
		if ( scale == 1.0 && t.zoomed == false )
			return false;
		return true;
	},

	zoomImages: function() {
		var t = this;
		var scale = t.getScale();
		if ( ! t.shouldZoom( scale ) ){
			return;
		}
		t.zoomed = true;
		// Loop through all the <img> elements on the page.
		var imgs = document.getElementsByTagName("img"), gravs = [], scaled = [], skipped = [];

		for ( var i = 0; i < imgs.length; i++ ) {
			// Wait for original images to load
			if ( "complete" in imgs[i] && ! imgs[i].complete )
				continue;

			// Skip images that don't need processing.
			var imgScale = imgs[i].getAttribute("scale");
			if ( imgScale == scale || imgScale == "0" )
				continue;

			// Skip images that have already failed at this scale
			var scaleFail = imgs[i].getAttribute("scale-fail");
			if ( scaleFail && scaleFail <= scale )
				continue;

			// Skip images that have no dimensions yet.
			if ( ! ( imgs[i].width && imgs[i].height ) )
				continue;

			// Skip images from Lazy Load plugins
			if ( ! imgScale && imgs[i].getAttribute("data-lazy-src") && (imgs[i].getAttribute("data-lazy-src") !== imgs[i].getAttribute("src")))
				continue;

			if ( t.scaleImage( imgs[i], scale ) ) {
				if ( imgs[i].getAttribute("scale") != scale ) {
					// The image was newly scaled. Send stats.
					if ( imgs[i].src.match(/gravatar\.com/) ) {
						if ( gravs.indexOf( imgs[i].src ) == -1 )
							gravs.push( imgs[i].src );
					} else if ( scaled.indexOf( imgs[i].src ) == -1 ) {
							scaled.push( imgs[i].src );
					}
				}
				// Mark the img as having been processed at this scale.
				imgs[i].setAttribute("scale", scale);
			}
			else {
				if ( skipped.indexOf( imgs[i].src ) == -1 )
					skipped.push( imgs[i].src );
				// Set the flag to skip this image.
				imgs[i].setAttribute("scale", "0");
			}
		}

		if ( scaled.length > 0 || gravs.length > 0 ) {
			// Report anonymous usage statistics
			var ratio = window.devicePixelRatio != null ? window.devicePixelRatio : 1;
			var qs = '?v=wpcom-no-pv'
				+ (!this.stats.ratio[ratio] ? '&x_devicepx_ratio=' + ratio : '')
				+ (!this.stats.scale[scale] ? '&x_devicepx_scale=' + scale : '')
				+ (gravs.length ? '&x_devicepx_images/scaled_grav=' + gravs.length : '')
				+ (scaled.length ? '&x_devicepx_images/scaled=' + scaled.length : '')
				+ (skipped.length ? '&x_devicepx_images/skipped=' + skipped.length : '')
				+ '&baba=' + Math.random();
			new Image().src = document.location.protocol + '//pixel.wp.com/g.gif' + qs;
			this.stats.ratio[ratio] = true;
			this.stats.scale[scale] = true;
		}
	},

	scaleImage: function( img, scale ) {
		var t = this;
		var newSrc = img.src;

		// Skip slideshow images
		if ( img.parentNode.className.match(/slideshow-slide/) )
			return false;

		// Scale gravatars that have ?s= or ?size=
		if ( img.src.match( /^https?:\/\/([^\/]*\.)?gravatar\.com\/.+[?&](s|size)=/ ) ) {
			newSrc = img.src.replace( /([?&](s|size)=)(\d+)/, function( $0, $1, $2, $3 ) {
				// Stash the original size
				var originalAtt = "originals",
				originalSize = img.getAttribute(originalAtt);
				if ( originalSize === null ) {
					originalSize = $3;
					img.setAttribute(originalAtt, originalSize);
					if ( t.imgNeedsSizeAtts( img ) ) {
						// Fix width and height attributes to rendered dimensions.
						img.width = img.width;
						img.height = img.height;
					}
				}
				// Get the width/height of the image in CSS pixels
				var size = img.clientWidth;
				// Convert CSS pixels to device pixels
				var targetSize = Math.ceil(img.clientWidth * scale);
				// Don't go smaller than the original size
				targetSize = Math.max( targetSize, originalSize );
				// Don't go larger than the service supports
				targetSize = Math.min( targetSize, 512 );
				return $1 + targetSize;
			});
		}

		// Scale resize queries (*.files.wordpress.com) that have ?w= or ?h=
		else if ( img.src.match( /^https?:\/\/([^\/]+)\.files\.wordpress\.com\/.+[?&][wh]=/ ) ) {
			if ( img.src.match( /[?&]crop/ ) )
				return false;
			var changedAttrs = {};
			var matches = img.src.match( /([?&]([wh])=)(\d+)/g );
			for ( var i = 0; i < matches.length; i++ ) {
				var lr = matches[i].split( '=' );
				var thisAttr = lr[0].replace(/[?&]/g, '' );
				var thisVal = lr[1];

				// Stash the original size
				var originalAtt = 'original' + thisAttr, originalSize = img.getAttribute( originalAtt );
				if ( originalSize === null ) {
					originalSize = thisVal;
					img.setAttribute(originalAtt, originalSize);
					if ( t.imgNeedsSizeAtts( img ) ) {
						// Fix width and height attributes to rendered dimensions.
						img.width = img.width;
						img.height = img.height;
					}
				}
				// Get the width/height of the image in CSS pixels
				var size = thisAttr == 'w' ? img.clientWidth : img.clientHeight;
				var naturalSize = ( thisAttr == 'w' ? img.naturalWidth : img.naturalHeight );
				// Convert CSS pixels to device pixels
				var targetSize = Math.ceil(size * scale);
				// Don't go smaller than the original size
				targetSize = Math.max( targetSize, originalSize );
				// Don't go bigger unless the current one is actually lacking
				if ( scale > img.getAttribute("scale") && targetSize <= naturalSize )
					targetSize = thisVal;
				// Don't try to go bigger if the image is already smaller than was requested
				if ( naturalSize < thisVal )
					targetSize = thisVal;
				if ( targetSize != thisVal )
					changedAttrs[ thisAttr ] = targetSize;
			}
			var w = changedAttrs.w || false;
			var h = changedAttrs.h || false;

			if ( w ) {
				newSrc = img.src.replace(/([?&])w=\d+/g, function( $0, $1 ) {
					return $1 + 'w=' + w;
				});
			}
			if ( h ) {
				newSrc = newSrc.replace(/([?&])h=\d+/g, function( $0, $1 ) {
					return $1 + 'h=' + h;
				});
			}
		}

		// Scale mshots that have width
		else if ( img.src.match(/^https?:\/\/([^\/]+\.)*(wordpress|wp)\.com\/mshots\/.+[?&]w=\d+/) ) {
			newSrc = img.src.replace( /([?&]w=)(\d+)/, function($0, $1, $2) {
				// Stash the original size
				var originalAtt = 'originalw', originalSize = img.getAttribute(originalAtt);
				if ( originalSize === null ) {
					originalSize = $2;
					img.setAttribute(originalAtt, originalSize);
					if ( t.imgNeedsSizeAtts( img ) ) {
						// Fix width and height attributes to rendered dimensions.
						img.width = img.width;
						img.height = img.height;
					}
				}
				// Get the width of the image in CSS pixels
				var size = img.clientWidth;
				// Convert CSS pixels to device pixels
				var targetSize = Math.ceil(size * scale);
				// Don't go smaller than the original size
				targetSize = Math.max( targetSize, originalSize );
				// Don't go bigger unless the current one is actually lacking
				if ( scale > img.getAttribute("scale") && targetSize <= img.naturalWidth )
					targetSize = $2;
				if ( $2 != targetSize )
					return $1 + targetSize;
				return $0;
			});
		}

		// Scale simple imgpress queries (s0.wp.com) that only specify w/h/fit
		else if ( img.src.match(/^https?:\/\/([^\/.]+\.)*(wp|wordpress)\.com\/imgpress\?(.+)/) ) {
			var imgpressSafeFunctions = ["zoom", "url", "h", "w", "fit", "filter", "brightness", "contrast", "colorize", "smooth", "unsharpmask"];
			// Search the query string for unsupported functions.
			var qs = RegExp.$3.split('&');
			for ( var q in qs ) {
				q = qs[q].split('=')[0];
				if ( imgpressSafeFunctions.indexOf(q) == -1 ) {
					return false;
				}
			}
			// Fix width and height attributes to rendered dimensions.
			img.width = img.width;
			img.height = img.height;
			// Compute new src
			if ( scale == 1 )
				newSrc = img.src.replace(/\?(zoom=[^&]+&)?/, '?');
			else
				newSrc = img.src.replace(/\?(zoom=[^&]+&)?/, '?zoom=' + scale + '&');
		}

		// Scale LaTeX images or Photon queries (i#.wp.com)
		else if (
			img.src.match(/^https?:\/\/([^\/.]+\.)*(wp|wordpress)\.com\/latex\.php\?(latex|zoom)=(.+)/) ||
			img.src.match(/^https?:\/\/i[\d]{1}\.wp\.com\/(.+)/)
		) {
			// Fix width and height attributes to rendered dimensions.
			img.width = img.width;
			img.height = img.height;
			// Compute new src
			if ( scale == 1 )
				newSrc = img.src.replace(/\?(zoom=[^&]+&)?/, '?');
			else
				newSrc = img.src.replace(/\?(zoom=[^&]+&)?/, '?zoom=' + scale + '&');
		}

		// Scale static assets that have a name matching *-1x.png or *@1x.png
		else if ( img.src.match(/^https?:\/\/[^\/]+\/.*[-@]([12])x\.(gif|jpeg|jpg|png)(\?|$)/) ) {
			// Fix width and height attributes to rendered dimensions.
			img.width = img.width;
			img.height = img.height;
			var currentSize = RegExp.$1, newSize = currentSize;
			if ( scale <= 1 )
				newSize = 1;
			else
				newSize = 2;
			if ( currentSize != newSize )
				newSrc = img.src.replace(/([-@])[12]x\.(gif|jpeg|jpg|png)(\?|$)/, '$1'+newSize+'x.$2$3');
		}

		else {
			return false;
		}

		// Don't set img.src unless it has changed. This avoids unnecessary reloads.
		if ( newSrc != img.src ) {
			// Store the original img.src
			var prevSrc, origSrc = img.getAttribute("src-orig");
			if ( !origSrc ) {
				origSrc = img.src;
				img.setAttribute("src-orig", origSrc);
			}
			// In case of error, revert img.src
			prevSrc = img.src;
			img.onerror = function(){
				img.src = prevSrc;
				if ( img.getAttribute("scale-fail") < scale )
					img.setAttribute("scale-fail", scale);
				img.onerror = null;
			};
			// Finally load the new image
			img.src = newSrc;
		}

		return true;
	}
};

wpcom_img_zoomer.init();
;
/*
 * Swipe 2.0
 *
 * Brad Birdsall
 * Copyright 2013, MIT License
 *
*/

function Swipe(container, options) {

  "use strict";

  // utilities
  var noop = function() {}; // simple no operation function
  var offloadFn = function(fn) { setTimeout(fn || noop, 0) }; // offload a functions execution
  
  // check browser capabilities
  var browser = {
    addEventListener: !!window.addEventListener,
    touch: ('ontouchstart' in window) || window.DocumentTouch && document instanceof DocumentTouch,
    transitions: (function(temp) {
      var props = ['transitionProperty', 'WebkitTransition', 'MozTransition', 'OTransition', 'msTransition'];
      for ( var i in props ) if (temp.style[ props[i] ] !== undefined) return true;
      return false;
    })(document.createElement('swipe'))
  };

  // quit if no root element
  if (!container) return;
  var element = container.children[0];
  var slides, slidePos, width, length;
  options = options || {};
  var index = parseInt(options.startSlide, 10) || 0;
  var speed = options.speed || 300;
  options.continuous = options.continuous !== undefined ? options.continuous : true;

  function setup() {

    // cache slides
    slides = element.children;
    length = slides.length;

    // set continuous to false if only one slide
    if (slides.length < 2) options.continuous = false;

    //special case if two slides
    if (browser.transitions && options.continuous && slides.length < 3) {
      element.appendChild(slides[0].cloneNode(true));
      element.appendChild(element.children[1].cloneNode(true));
      slides = element.children;
    }

    // create an array to store current positions of each slide
    slidePos = new Array(slides.length);

    // determine width of each slide
    width = container.getBoundingClientRect().width || container.offsetWidth;

    element.style.width = (slides.length * width) + 'px';

    // stack elements
    var pos = slides.length;
    while(pos--) {

      var slide = slides[pos];

      slide.style.width = width + 'px';
      slide.setAttribute('data-index', pos);

      if (browser.transitions) {
        slide.style.left = (pos * -width) + 'px';
        move(pos, index > pos ? -width : (index < pos ? width : 0), 0);
      }

    }

    // reposition elements before and after index
    if (options.continuous && browser.transitions) {
      move(circle(index-1), -width, 0);
      move(circle(index+1), width, 0);
    }

    if (!browser.transitions) element.style.left = (index * -width) + 'px';

    container.style.visibility = 'visible';

  }

  function prev() {

    if (options.continuous) slide(index-1);
    else if (index) slide(index-1);

  }

  function next() {

    if (options.continuous) slide(index+1);
    else if (index < slides.length - 1) slide(index+1);

  }

  function circle(index) {

    // a simple positive modulo using slides.length
    return (slides.length + (index % slides.length)) % slides.length;

  }

  function slide(to, slideSpeed) {

    // do nothing if already on requested slide
    if (index == to) return;
    
    if (browser.transitions) {

      var direction = Math.abs(index-to) / (index-to); // 1: backward, -1: forward

      // get the actual position of the slide
      if (options.continuous) {
        var natural_direction = direction;
        direction = -slidePos[circle(to)] / width;

        // if going forward but to < index, use to = slides.length + to
        // if going backward but to > index, use to = -slides.length + to
        if (direction !== natural_direction) to =  -direction * slides.length + to;

      }

      var diff = Math.abs(index-to) - 1;

      // move all the slides between index and to in the right direction
      while (diff--) move( circle((to > index ? to : index) - diff - 1), width * direction, 0);
            
      to = circle(to);

      move(index, width * direction, slideSpeed || speed);
      move(to, 0, slideSpeed || speed);

      if (options.continuous) move(circle(to - direction), -(width * direction), 0); // we need to get the next in place
      
    } else {     
      
      to = circle(to);
      animate(index * -width, to * -width, slideSpeed || speed);
      //no fallback for a circular continuous if the browser does not accept transitions
    }

    index = to;
    offloadFn(options.callback && options.callback(index, slides[index]));
  }

  function move(index, dist, speed) {

    translate(index, dist, speed);
    slidePos[index] = dist;

  }

  function translate(index, dist, speed) {

    var slide = slides[index];
    var style = slide && slide.style;

    if (!style) return;

    style.webkitTransitionDuration = 
    style.MozTransitionDuration = 
    style.msTransitionDuration = 
    style.OTransitionDuration = 
    style.transitionDuration = speed + 'ms';

    style.webkitTransform = 'translate(' + dist + 'px,0)' + 'translateZ(0)';
    style.msTransform = 
    style.MozTransform = 
    style.OTransform = 'translateX(' + dist + 'px)';

  }

  function animate(from, to, speed) {

    // if not an animation, just reposition
    if (!speed) {

      element.style.left = to + 'px';
      return;

    }
    
    var start = +new Date;
    
    var timer = setInterval(function() {

      var timeElap = +new Date - start;
      
      if (timeElap > speed) {

        element.style.left = to + 'px';

        if (delay) begin();

        options.transitionEnd && options.transitionEnd.call(event, index, slides[index]);

        clearInterval(timer);
        return;

      }

      element.style.left = (( (to - from) * (Math.floor((timeElap / speed) * 100) / 100) ) + from) + 'px';

    }, 4);

  }

  // setup auto slideshow
  var delay = options.auto || 0;
  var interval;

  function begin() {

    interval = setTimeout(next, delay);

  }

  function stop() {

    delay = 0;
    clearTimeout(interval);

  }


  // setup initial vars
  var start = {};
  var delta = {};
  var isScrolling;      

  // setup event capturing
  var events = {

    handleEvent: function(event) {

      switch (event.type) {
        case 'touchstart': this.start(event); break;
        case 'touchmove': this.move(event); break;
        case 'touchend': offloadFn(this.end(event)); break;
        case 'webkitTransitionEnd':
        case 'msTransitionEnd':
        case 'oTransitionEnd':
        case 'otransitionend':
        case 'transitionend': offloadFn(this.transitionEnd(event)); break;
        case 'resize': offloadFn(setup.call()); break;
      }

      if (options.stopPropagation) event.stopPropagation();

    },
    start: function(event) {

      var touches = event.touches[0];

      // measure start values
      start = {

        // get initial touch coords
        x: touches.pageX,
        y: touches.pageY,

        // store time to determine touch duration
        time: +new Date

      };
      
      // used for testing first move event
      isScrolling = undefined;

      // reset delta and end measurements
      delta = {};

      // attach touchmove and touchend listeners
      element.addEventListener('touchmove', this, false);
      element.addEventListener('touchend', this, false);

    },
    move: function(event) {

      // ensure swiping with one touch and not pinching
      if ( event.touches.length > 1 || event.scale && event.scale !== 1) return

      if (options.disableScroll) event.preventDefault();

      var touches = event.touches[0];

      // measure change in x and y
      delta = {
        x: touches.pageX - start.x,
        y: touches.pageY - start.y
      }

      // determine if scrolling test has run - one time test
      if ( typeof isScrolling == 'undefined') {
        isScrolling = !!( isScrolling || Math.abs(delta.x) < Math.abs(delta.y) );
      }

      // if user is not trying to scroll vertically
      if (!isScrolling) {

        // prevent native scrolling 
        event.preventDefault();

        // stop slideshow
        stop();

        // increase resistance if first or last slide
        if (options.continuous) { // we don't add resistance at the end

          translate(circle(index-1), delta.x + slidePos[circle(index-1)], 0);
          translate(index, delta.x + slidePos[index], 0);
          translate(circle(index+1), delta.x + slidePos[circle(index+1)], 0);

        } else {

          delta.x = 
            delta.x / 
              ( (!index && delta.x > 0               // if first slide and sliding left
                || index == slides.length - 1        // or if last slide and sliding right
                && delta.x < 0                       // and if sliding at all
              ) ?                      
              ( Math.abs(delta.x) / width + 1 )      // determine resistance level
              : 1 );                                 // no resistance if false
          
          // translate 1:1
          translate(index-1, delta.x + slidePos[index-1], 0);
          translate(index, delta.x + slidePos[index], 0);
          translate(index+1, delta.x + slidePos[index+1], 0);
        }

      }

    },
    end: function(event) {

      // measure duration
      var duration = +new Date - start.time;

      // determine if slide attempt triggers next/prev slide
      var isValidSlide = 
            Number(duration) < 250               // if slide duration is less than 250ms
            && Math.abs(delta.x) > 20            // and if slide amt is greater than 20px
            || Math.abs(delta.x) > width/2;      // or if slide amt is greater than half the width

      // determine if slide attempt is past start and end
      var isPastBounds = 
            !index && delta.x > 0                            // if first slide and slide amt is greater than 0
            || index == slides.length - 1 && delta.x < 0;    // or if last slide and slide amt is less than 0

      if (options.continuous) isPastBounds = false;
      
      // determine direction of swipe (true:right, false:left)
      var direction = delta.x < 0;

      // if not scrolling vertically
      if (!isScrolling) {

        if (isValidSlide && !isPastBounds) {

          if (direction) {

            if (options.continuous) { // we need to get the next in this direction in place

              move(circle(index-1), -width, 0);
              move(circle(index+2), width, 0);

            } else {
              move(index-1, -width, 0);
            }

            move(index, slidePos[index]-width, speed);
            move(circle(index+1), slidePos[circle(index+1)]-width, speed);
            index = circle(index+1);  
                      
          } else {
            if (options.continuous) { // we need to get the next in this direction in place

              move(circle(index+1), width, 0);
              move(circle(index-2), -width, 0);

            } else {
              move(index+1, width, 0);
            }

            move(index, slidePos[index]+width, speed);
            move(circle(index-1), slidePos[circle(index-1)]+width, speed);
            index = circle(index-1);

          }

          options.callback && options.callback(index, slides[index]);

        } else {

          if (options.continuous) {

            move(circle(index-1), -width, speed);
            move(index, 0, speed);
            move(circle(index+1), width, speed);

          } else {

            move(index-1, -width, speed);
            move(index, 0, speed);
            move(index+1, width, speed);
          }

        }

      }

      // kill touchmove and touchend event listeners until touchstart called again
      element.removeEventListener('touchmove', events, false)
      element.removeEventListener('touchend', events, false)

    },
    transitionEnd: function(event) {

      if (parseInt(event.target.getAttribute('data-index'), 10) == index) {
        
        if (delay) begin();

        options.transitionEnd && options.transitionEnd.call(event, index, slides[index]);

      }

    }

  }

  // trigger setup
  setup();

  // start auto slideshow if applicable
  if (delay) begin();


  // add event listeners
  if (browser.addEventListener) {
    
    // set touchstart event on element    
    if (browser.touch) element.addEventListener('touchstart', events, false);

    if (browser.transitions) {
      element.addEventListener('webkitTransitionEnd', events, false);
      element.addEventListener('msTransitionEnd', events, false);
      element.addEventListener('oTransitionEnd', events, false);
      element.addEventListener('otransitionend', events, false);
      element.addEventListener('transitionend', events, false);
    }

    // set resize event on window
    window.addEventListener('resize', events, false);

  } else {

    window.onresize = function () { setup() }; // to play nice with old IE

  }

  // expose the Swipe API
  return {
    setup: function() {

      setup();

    },
    slide: function(to, speed) {
      
      // cancel slideshow
      stop();
      
      slide(to, speed);

    },
    prev: function() {

      // cancel slideshow
      stop();

      prev();

    },
    next: function() {

      // cancel slideshow
      stop();

      next();

    },
    getPos: function() {

      // return current index position
      return index;

    },
    getNumSlides: function() {
      
      // return total number of slides
      return length;
    },
    kill: function() {

      // cancel slideshow
      stop();

      // reset element
      element.style.width = 'auto';
      element.style.left = 0;

      // reset slides
      var pos = slides.length;
      while(pos--) {

        var slide = slides[pos];
        slide.style.width = '100%';
        slide.style.left = 0;

        if (browser.transitions) translate(pos, 0, 0);

      }

      // removed event listeners
      if (browser.addEventListener) {

        // remove current event listeners
        element.removeEventListener('touchstart', events, false);
        element.removeEventListener('webkitTransitionEnd', events, false);
        element.removeEventListener('msTransitionEnd', events, false);
        element.removeEventListener('oTransitionEnd', events, false);
        element.removeEventListener('otransitionend', events, false);
        element.removeEventListener('transitionend', events, false);
        window.removeEventListener('resize', events, false);

      }
      else {

        window.onresize = null;

      }

    }
  }

}


if ( window.jQuery || window.Zepto ) {
  (function($) {
    $.fn.Swipe = function(params) {
      return this.each(function() {
        $(this).data('Swipe', new Swipe($(this)[0], params));
      });
    }
  })( window.jQuery || window.Zepto )
}
;
/**
 * Comment Likes - JavaScript
 *
 * This handles liking and unliking comments, as well as viewing who has
 * liked a particular comment.
 *
 * @dependency  jQuery
 * @dependency  Swipe
 *
 * @package     Comment_Likes
 * @subpackage  JavaScript
 */
jQuery( function() {
	var $ = jQuery;
	var extWin;
	var extWinCheck;
	var commentLikeEvent;

	// The O2 theme re-injects this script into the DOM when somebody
	// creates a new thread and the page is already open, but we don't
	// want to run this script a second time.
	if ( window.comment_likes_loaded ) return;
	window.comment_likes_loaded = true;

	// Client-side cache of who liked a particular comment to avoid
	// having to hit the server multiple times for the same data.
	var comment_like_cache = {};

	/**
	 * Parse the comment ID from a comment like link.
	 */
	var get_comment_id = function( $link ) {
		var comment_id = $link.attr( 'href' ).split( 'like_comment=' );
		return comment_id[1].split( '&_wpnonce=' )[0];
	};

	/**
	 * Handle an ajax action on the comment like link.
	 */
	var handle_link_action = function( $link, action, comment_id, callback ) {
		var nonce = $link.attr( 'href' ).split( '_wpnonce=' )[1];

		$.post( '/wp-admin/admin-ajax.php', {
			'action': action,
			'_wpnonce': nonce,
			'like_comment': comment_id,
			'blog_id': Number( $link.data( 'blog' ) )
		}, callback, 'json' );
	};

	// Overlay used for displaying comment like info.
	var overlay = {

		// Overlay element.
		$el: $( '<div/>' )
			.appendTo( 'body' )
			.addClass( 'comment-likes-overlay' )
			.hide()
			.mouseenter( function() {
				// Don't hide the overlay if the user is mousing over it.
				overlay.cancel_hide();
			} ).mouseleave( function() {
				overlay.request_hide();
			} ),

		// Inner contents of overlay.
		$inner: null,

		// Instance of the Swipe library.
		swipe: null,

		// Initialise the overlay for use, removing any old content.
		clear: function() {
			// Unload any previous instance of Swipe (to avoid leaking a global
			// event handler). This is done before clearing the contents of the
			// overlay because Swipe expects the slides to still be present.
			if ( this.swipe ) {
				this.swipe.kill();
				this.swipe = null;
			}
			this.$el.html( '' );
			this.$inner = $( '<div/>' ).addClass( 'inner' ).appendTo( this.$el );
		},

		/**
		 * Construct a list (<ul>) of user (gravatar, name) details.
		 *
		 * @param  data     liker data returned from the server
		 * @param  klass    CSS class to apply to the <ul> element
		 * @param  start    index of user to start at
		 * @param  length   number of users to include in the list
		 *
		 * @return          HTML for the list
		 */
		get_user_bits: function( data, klass, start, length ) {
			start = start || 0;
			var last = start + ( length || data.length );
			last = ( last > data.length ) ? data.length : last;
			var html = '<div class="liker-list"><ul class="' + ( klass || '' ) + '">';
			for ( var i = start; i < last; ++i ) {
				var user = data[ i ];
				html += '<li>';
				html += '<a rel="nofollow" title="' + user.display_name_esc + '" href="' + user.profile_url_esc + '"><img src="' + user.avatar_url_esc + '" alt="' + user.display_name_esc + '"  /> <span class="user-name">' + user.display_name_esc + '</span></a>';
				html += '</li>';
			}
			html += '</ul></div>';
			return html;
		},

		/**
		 * Render the display of who has liked this comment. The type of
		 * display depends on how many people have liked the comment.
		 * If more than 10 people have liked the comment, this function
		 * renders navigation controls and sets up the Swipe library for
		 * changing between pages.
		 *
		 * @param link  the element over which the user is hovering
		 * @param data  the results retrieved from the server
		 */
		show_likes: function( $link, data ) {
			this.clear();

			$link.data( 'likeCount', data.length );
			if ( 0 === data.length ) {
				// No likers after all.
				return this.$el.hide();
			}

			this.$inner.css( 'padding', 12 );

			if ( data.length < 6 ) {
				// Only one column needed.
				this.$inner.css( 'max-width', 200 );
				this.$inner.html( this.get_user_bits( data, 'single' ) );

			} else if ( data.length < 11 ) {
				// Two columns, but only one page.
				this.$inner.html( this.get_user_bits( data, 'double' ) );

			} else {
				// Multiple pages.
				this.render_likes_with_pagination( data );
			}

			// Move the overlay into the correct position and then show it.
			this.set_position( $link );
		},

		/**
		 * Render multiple pages of likes with pagination controls.
		 * This function is intended to be called by `show_likes` above.
		 *
		 * @param data  the results retrieved from the server
		 */
		render_likes_with_pagination: function( data ) {
			var page_count = Math.ceil( data.length / 10 );
			// Swipe requires two nested containers.
			var $swipe = $( '<div/>' ).addClass( 'swipe' ).appendTo( this.$inner );
			var $div = $( '<div/>' ).addClass( 'swipe-wrap' ).appendTo( $swipe );
			for ( var i = 0; i < page_count; ++i ) {
				$( this.get_user_bits( data, 'double', i * 10, 10 ) ).appendTo( $div );
			}

			/** Navigation controls.
			 *  This is based on the Newdash controls found in
			 *    reader/recommendations-templates.php
			 */
			var nav_html = '<nav class="slider-nav"><a href="#" class="prev"><span class="noticon noticon-previous" title="Previous" alt="<"></span></a><span class="position">';
			for ( var i = 0; i < page_count; ++i ) {
				nav_html += '<em data-page="' + i + '" class="' + ( ( i === 0 ) ? 'on' : '' ) + '">&bull;</em>';
			}
			nav_html += '</span><a href="#" class="next"><span class="noticon noticon-next" title="Next" alt=">"></span></a></nav>';
			var $nav = $( nav_html ).appendTo( this.$inner );

			/** Set up Swipe. **/

			// Swipe cannot be set up successfully unless its container
			// is visible, so we show it now.
			this.$el.show();

			var swipe = this.swipe = new Swipe( $swipe[0], {
				callback: function( pos ) {
					// Update the pagination indicators.
					//
					// If there are exactly two pages, Swipe has a weird
					// special case where it duplicates both pages and
					// can return index 2 and 3 even though those aren't
					// real pages (see swipe.js, line 47). To deal with
					// this, we use the expression `pos % page_count`.
					pos = pos % page_count;
					$nav.find( 'em' ).each( function() {
						var page = Number( $( this ).data( 'page' ) );
						$( this ).attr( 'class', ( pos === page ) ? 'on' : '' );
					} );
				}
			} );
			$nav.find( 'em' ).on( 'click', function( $e ) {
				// Go to the page corresponding to the indicator clicked.
				swipe.slide( Number( $( this ).data( 'page' ) ) );
				$e.preventDefault();
			} );
			// Previous and next buttons.
			$nav.find( '.prev' ).on( 'click', function( $e ) {
				swipe.prev();
				$e.preventDefault();
			} );
			$nav.find( '.next' ).on( 'click', function( $e ) {
				swipe.next();
				$e.preventDefault();
			} );
		},

		/**
		 * Open the overlay and show a loading message.
		 */
		show_loading_message: function( $link ) {
			this.clear();
			this.$inner.text( comment_like_text.loading );
			this.set_position( $link );
		},

		/**
		 * Position the overlay near the current comment.
		 *
		 * @param $link  element near which to position the overlay
		 */
		set_position: function( $link ) {
			// Prepare a down arrow icon for the bottom of the overlay.
			var $icon = $( '<span/>' )
				.appendTo( this.$el )
				.addClass( 'icon noticon noticon-downarrow' )
				.css( 'text-shadow', '0px 1px 1px rgb(223, 223, 223)' );

			var offset = $link.offset();
			var left = offset.left - ( this.$el.width() - $link.width() ) / 2;
			left = left < 5 ? 5 : left;
			var top = offset.top - this.$el.height() + 5;

			// Check if the overlay would appear off the screen.
			if ( top < ( $( window ).scrollTop() + ( $( '#wpadminbar' ).height() || 0 ) ) ) {
				// We'll display the overlay beneath the link instead.
				top = offset.top + $link.height();
				// Instead of using the down arrow icon, use an up arrow.
				$icon.remove().prependTo( this.$el )
					.removeClass( 'noticon-downarrow')
					.addClass( 'noticon-uparrow' )
					.css( {
						'text-shadow': '0px -1px 1px rgb(223, 223, 223)',
						'vertical-align': 'bottom'
					} );
			}

			this.$el.css( { 'left': left, 'top': top } ).show();

			$icon.css( {
				// The height of the arrow icon differs slightly between browsers,
				// so we compute the margin here to make sure it isn't disjointed
				// from the overlay.
				'margin-top': $icon[0].scrollHeight - 26,
				'margin-bottom': 20 - $icon[0].scrollHeight,

				// Position the arrow to be horizontally centred on the link.
				'padding-left': offset.left - left + ( $link.width() - $icon[0].scrollWidth ) / 2
			} );
		},

		/**
		 * Return whether the overlay is visible.
		 */
		is_visible: function() {
			return ( 'none' !== this.$el.css( 'display' ) );
		},

		// Timeout used for hiding the overlay.
		hide_timeout: null,

		/**
		 * Request that the overlay be hidden after a short delay.
		 */
		request_hide: function() {
			if ( null !== this.hide_timeout ) {
				return;
			}
			var self = this;
			this.hide_timeout = setTimeout( function() {
				self.$el.hide();
				self.clear();
			}, 300 );
		},

		/**
		 * Cancel a request to hide the overlay.
		 */
		cancel_hide: function() {
			if ( null !== this.hide_timeout ) {
				clearTimeout( this.hide_timeout );
				this.hide_timeout = null;
			}
		}
	};

	// The most recent comment for which the user has requested to see
	// who liked it.
	var relevant_comment;

	// Precache after this timeout.
	var precache_timeout = null;

	/**
	 * Fetch the like data for a particular comment.
	 */
	var fetch_like_data = function( $link, comment_id ) {
		comment_like_cache[ comment_id ] = null;

		var $star = $link.parent().parent().find( 'a.comment-like-link' );
		handle_link_action( $star, 'view_comment_likes', comment_id, function( data ) {
			// Populate the cache.
			comment_like_cache[ comment_id ] = data;

			// Only show the overlay if the user is interested.
			if ( overlay.is_visible() && ( relevant_comment === comment_id ) ) {
				overlay.show_likes( $link, data );
			}
		} );
	};

	function readCookie( c ) {
		var nameEQ = c + '=',
			cookieStrings = document.cookie.split( ';' ),
			i, cookieString, num, chunk, pairs, pair, cookie_data;
		for ( i = 0; i < cookieStrings.length; i++ ) {
			cookieString = cookieStrings[ i ];
			while ( cookieString.charAt( 0 ) === ' ' ) {
				cookieString = cookieString.substring( 1, cookieString.length );
			}
			if ( cookieString.indexOf( nameEQ ) === 0 ) {
				chunk = cookieString.substring( nameEQ.length, cookieString.length );
				pairs = chunk.split( '&' );
				cookie_data = {};
				for ( num = pairs.length - 1; num >= 0; num-- ) {
					pair = pairs[ num ].split( '=' );
					cookie_data[ pair[0] ] = decodeURIComponent( pair[1] );
				}
				return cookie_data;
			}
		}
		return null;
	}

	function getServiceData() {
		var data = readCookie( 'wpc_wpc' );
		if ( null === data || 'undefined' === typeof data.access_token || ! data.access_token ) {
			return false;
		}
		return data;
	}

	function readMessage( event ) {
		if ( 'undefined' == typeof event.event ) {
			return;
		}

		if ( 'login' == event.event && event.success ) {
			extWinCheck = setInterval( function() {
				if ( ! extWin || extWin.closed ) {
					clearInterval( extWinCheck );
					if ( getServiceData() ) {

						// Load page in an iframe to get the current comment nonce
						var nonceIframe = document.createElement( 'iframe' );
						nonceIframe.id = 'wp-login-comment-nonce-iframe';
						nonceIframe.style.display = 'none';
						nonceIframe.src = commentLikeEvent + '';
						document.body.appendChild( nonceIframe );

						var commentLikeId = ( commentLikeEvent + '' ).split( 'like_comment=' )[1].split( '&_wpnonce=' )[0];
						var c = false;

						// Set a 5 second timeout to redirect to the comment page without doing the Like as a fallback
						var commentLikeTimeout = setTimeout( function() {
							window.location = commentLikeEvent;
						}, 5000 );

						// Check for a new nonced redirect and use that if available before timing out
						var commentLikeCheck = setInterval( function() {
							c = $( '#wp-login-comment-nonce-iframe' ).contents().find( '#comment-like-' + commentLikeId + ' .comment-like-link' );
							if ( 'undefined' !== typeof c && 'undefined' !== typeof c[0] && 'undefined' !== typeof c[0].href ) {
								clearTimeout( commentLikeTimeout );
								clearInterval( commentLikeCheck );
								window.location = c[0].href;
							}
						}, 100 );
					}
				}
			}, 100 );

			if ( extWin ) {
				if ( ! extWin.closed ) {
					extWin.close();
				}
				extWin = false;
			}

			$( '#wp-login-polling-iframe' ).remove();
		}
	}

	if ( 'undefined' != typeof window.pm ) {
		pm.bind( 'loginMessage', function( e ) { readMessage( e ); } );
	}

	$( 'body' ).on( 'click', 'a.comment-like-link', function( $e ) {
		if ( $( $e.target ).hasClass( 'needs-login' ) ) {
			$e.preventDefault();
			commentLikeEvent = $e.target;
			if ( extWin ) {
				if ( ! extWin.closed ) {
					extWin.close();
				}
				extWin = false;
			}

			$( '#wp-login-polling-iframe' ).remove();

			var url = 'https://wordpress.com/public.api/connect/?action=request&service=wordpress';
			extWin = window.open( url, 'likeconn', 'status=0,toolbar=0,location=1,menubar=0,directories=0,resizable=1,scrollbars=1,height=560,width=500' );

			// Append cookie polling login iframe to this window to wait for user to finish logging in (or cancel)
			var loginIframe = $( "<iframe id='wp-login-polling-iframe'></iframe>" );
			loginIframe.attr( "src", "https://wordpress.com/public.api/connect/?iframe=true" );
			loginIframe.css( "display", "none" );
			$( document.body ).append( loginIframe );

			return false;
		}

		// Record that the user likes or does not like this comment.
		var $star = $( this );
		var comment_id = get_comment_id( $star );
		$star.addClass( 'loading' );
		// Determine whether to like or unlike based on whether the comment is
		// currently liked.
		var action = ( $( 'p#comment-like-' + comment_id ).data( 'liked' ) === 'comment-liked' ) ? 'unlike_comment' : 'like_comment';
		handle_link_action( $star, action, comment_id, function( data ) {
			// Invalidate the like cache for this comment.
			delete comment_like_cache[ comment_id ];

			$( '#comment-like-count-' + data.context ).html( data.display );

			if ( 'like_comment' === action ) {
				$( 'p#comment-like-' + data.context ).removeClass( 'comment-not-liked' )
					.addClass( 'comment-liked' )
					.data( 'liked', 'comment-liked' );
			} else {
				$( 'p#comment-like-' + data.context ).removeClass( 'comment-liked' )
					.addClass( 'comment-not-liked' )
					.data( 'liked', 'comment-not-liked' );
			}

			// Prefetch new data for this comment (if there are likers left).
			var $link = $star.parent().find( 'a.view-likers' );
			if ( 0 !== $link.length ) {
				fetch_like_data( $link, comment_id );
			}

			$star.removeClass( 'loading' );
		} );
		$e.preventDefault();
		$e.stopPropagation();

	} ).on( 'click', 'p.comment-not-liked', function() {
		// When a comment hasn't been liked, make the text clickable, too
		$( this ).find( 'a.comment-like-link' ).click();

	} ).on( 'mouseenter', 'p.comment-likes a.view-likers', function() {
		// Show the user a list of who has liked this comment.

		var $link = $( this );
		if ( 0 === Number( $link.data( 'likeCount' ) || 0 ) ) {
			// No one has liked this comment.
			return;
		}

		// Don't hide the overlay.
		overlay.cancel_hide();

		// Get the comment ID.
		var $star = $link.parent().parent().find( 'a.comment-like-link' );
		var comment_id = relevant_comment = get_comment_id( $star );

		// Check if the list of likes for this comment is already in
		// the cache.
		if ( comment_id in comment_like_cache ) {
			var entry = comment_like_cache[ comment_id ];
			// Only display the likes if the ajax request is
			// actually done.
			if ( null !== entry ) {
				overlay.show_likes( $link, entry );
			} else {
				// Make sure the overlay is visible (in case
				// the user moved the mouse away while loading
				// but then came back before it finished
				// loading).
				overlay.show_loading_message( $link );
			}
			return;
		}

		// Position the "Loading..." overlay.
		overlay.show_loading_message( $link );

		// Fetch the data.
		fetch_like_data( $link, comment_id );

	} ).on( 'mouseleave', 'p.comment-likes a.view-likers', function() {
		// User has moved cursor away - hide the overlay.
		overlay.request_hide();

	} ).on( 'click', 'p.comment-likes a.view-likers', function( $e ) {
		// Don't do anything when clicking on the text.
		$e.preventDefault();

	} ).on( 'mouseenter', '.comment:has(a.comment-like-link)', function() {
		// User is moving over a comment - precache the comment like data.
		if ( null !== precache_timeout ) {
			clearTimeout( precache_timeout );
			precache_timeout = null;
		}

		var $star = $( this ).find( 'a.comment-like-link' );
		var $link = $star.parent().find( 'a.view-likers' );
		if ( 0 === Number( $link.data( 'likeCount' ) || 0 ) ) {
			// No likes.
			return;
		}
		var comment_id = get_comment_id( $star );
		if ( comment_id in comment_like_cache ) {
			// Already in cache.
			return;
		}

		precache_timeout = setTimeout( function() {
			precache_timeout = null;
			if ( comment_id in comment_like_cache ) {
				// Was cached in the interim.
				return;
			}
			fetch_like_data( $link, comment_id );
		}, 1000 );
	} );
} );
;
/**
 * Handles toggling the navigation menu for small screens.
 */
( function() {
	var nav = document.querySelectorAll( '.wpcom-pages' )[0], button, menu, buttonVisible;
	if ( ! nav ) {
		return;
	}

	button = nav.getElementsByTagName( 'a' )[0];
	menu   = nav.getElementsByTagName( 'ul' )[0];
	if ( ! button ) {
		return;
	}

	// Open menu when Menu button is clicked.
	button.onclick = function( e) {
		if ( -1 !== button.className.indexOf( 'toggled-on' ) ) {
			button.className = button.className.replace( ' toggled-on', '' );
			menu.className = menu.className.replace( ' toggled-on', '' );
		} else {
			button.className += ' toggled-on';
			menu.className += ' toggled-on';
		}
		e.preventDefault();
	};

	// Handle both clicks and touch events.
	document.body.onclick = function( e ) {
		closeMenu( e );
	};
	document.body.ontouchstart = function( e ) {
		closeMenu( e );
	};

	// When menu is open, close it with any click away from the menu.
	var closeMenu = function( e ) {
		if ( button === e.target ) {
			return;
		}

		// Only continue if menu button is visible.
		buttonVisible = window.getComputedStyle( button );
		if ( 'none' === buttonVisible.getPropertyValue( 'display' ) ) {
			return;
		}

		if ( ! menu.contains( e.target ) ) {
			button.className = button.className.replace( ' toggled-on', '' );
			menu.className = menu.className.replace( ' toggled-on', '' );
		}

		e.stopPropagation();
	}
} )();
;
/*!
 * mustache.js - Logic-less {{mustache}} templates with JavaScript
 * http://github.com/janl/mustache.js
 */
var Mustache = (typeof module !== "undefined" && module.exports) || {};

(function (exports) {

  exports.name = "mustache.js";
  exports.version = "0.5.0-dev";
  exports.tags = ["{{", "}}"];
  exports.parse = parse;
  exports.compile = compile;
  exports.render = render;
  exports.clearCache = clearCache;

  // This is here for backwards compatibility with 0.4.x.
  exports.to_html = function (template, view, partials, send) {
    var result = render(template, view, partials);

    if (typeof send === "function") {
      send(result);
    } else {
      return result;
    }
  };

  var _toString = Object.prototype.toString;
  var _isArray = Array.isArray;
  var _forEach = Array.prototype.forEach;
  var _trim = String.prototype.trim;

  var isArray;
  if (_isArray) {
    isArray = _isArray;
  } else {
    isArray = function (obj) {
      return _toString.call(obj) === "[object Array]";
    };
  }

  var forEach;
  if (_forEach) {
    forEach = function (obj, callback, scope) {
      return _forEach.call(obj, callback, scope);
    };
  } else {
    forEach = function (obj, callback, scope) {
      for (var i = 0, len = obj.length; i < len; ++i) {
        callback.call(scope, obj[i], i, obj);
      }
    };
  }

  var spaceRe = /^\s*$/;

  function isWhitespace(string) {
    return spaceRe.test(string);
  }

  var trim;
  if (_trim) {
    trim = function (string) {
      return string == null ? "" : _trim.call(string);
    };
  } else {
    var trimLeft, trimRight;

    if (isWhitespace("\xA0")) {
      trimLeft = /^\s+/;
      trimRight = /\s+$/;
    } else {
      trimLeft = /^[\s\xA0]+/;
      trimRight = /[\s\xA0]+$/;
    }

    trim = function (string) {
      return string == null ? "" :
        String(string).replace(trimLeft, "").replace(trimRight, "");
    };
  }

  var escapeMap = {
    "&": "&amp;",
    "<": "&lt;",
    ">": "&gt;",
    '"': '&quot;',
    "'": '&#39;'
  };

  function escapeHTML(string) {
    return String(string).replace(/&(?!\w+;)|[<>"']/g, function (s) {
      return escapeMap[s] || s;
    });
  }

  /**
   * Adds the `template`, `line`, and `file` properties to the given error
   * object and alters the message to provide more useful debugging information.
   */
  function debug(e, template, line, file) {
    file = file || "<template>";

    var lines = template.split("\n"),
        start = Math.max(line - 3, 0),
        end = Math.min(lines.length, line + 3),
        context = lines.slice(start, end);

    var c;
    for (var i = 0, len = context.length; i < len; ++i) {
      c = i + start + 1;
      context[i] = (c === line ? " >> " : "    ") + context[i];
    }

    e.template = template;
    e.line = line;
    e.file = file;
    e.message = [file + ":" + line, context.join("\n"), "", e.message].join("\n");

    return e;
  }

  /**
   * Looks up the value of the given `name` in the given context `stack`.
   */
  function lookup(name, stack, defaultValue) {
    if (name === ".") {
      return stack[stack.length - 1];
    }

    var names = name.split(".");
    var lastIndex = names.length - 1;
    var target = names[lastIndex];

    var value, context, i = stack.length, j, localStack;
    while (i) {
      localStack = stack.slice(0);
      context = stack[--i];

      j = 0;
      while (j < lastIndex) {
        context = context[names[j++]];

        if (context == null) {
          break;
        }

        localStack.push(context);
      }

      if (context && typeof context === "object" && target in context) {
        value = context[target];
        break;
      }
    }

    // If the value is a function, call it in the current context.
    if (typeof value === "function") {
      value = value.call(localStack[localStack.length - 1]);
    }

    if (value == null)  {
      return defaultValue;
    }

    return value;
  }

  function renderSection(name, stack, callback, inverted) {
    var buffer = "";
    var value =  lookup(name, stack);

    if (inverted) {
      // From the spec: inverted sections may render text once based on the
      // inverse value of the key. That is, they will be rendered if the key
      // doesn't exist, is false, or is an empty list.
      if (value == null || value === false || (isArray(value) && value.length === 0)) {
        buffer += callback();
      }
    } else if (isArray(value)) {
      forEach(value, function (value) {
        stack.push(value);
        buffer += callback();
        stack.pop();
      });
    } else if (typeof value === "object") {
      stack.push(value);
      buffer += callback();
      stack.pop();
    } else if (typeof value === "function") {
      var scope = stack[stack.length - 1];
      var scopedRender = function (template) {
        return render(template, scope);
      };
      buffer += value.call(scope, callback(), scopedRender) || "";
    } else if (value) {
      buffer += callback();
    }

    return buffer;
  }

  /**
   * Parses the given `template` and returns the source of a function that,
   * with the proper arguments, will render the template. Recognized options
   * include the following:
   *
   *   - file     The name of the file the template comes from (displayed in
   *              error messages)
   *   - tags     An array of open and close tags the `template` uses. Defaults
   *              to the value of Mustache.tags
   *   - debug    Set `true` to log the body of the generated function to the
   *              console
   *   - space    Set `true` to preserve whitespace from lines that otherwise
   *              contain only a {{tag}}. Defaults to `false`
   */
  function parse(template, options) {
    options = options || {};

    var tags = options.tags || exports.tags,
        openTag = tags[0],
        closeTag = tags[tags.length - 1];

    var code = [
      'var buffer = "";', // output buffer
      "\nvar line = 1;", // keep track of source line number
      "\ntry {",
      '\nbuffer += "'
    ];

    var spaces = [],      // indices of whitespace in code on the current line
        hasTag = false,   // is there a {{tag}} on the current line?
        nonSpace = false; // is there a non-space char on the current line?

    // Strips all space characters from the code array for the current line
    // if there was a {{tag}} on it and otherwise only spaces.
    var stripSpace = function () {
      if (hasTag && !nonSpace && !options.space) {
        while (spaces.length) {
          code.splice(spaces.pop(), 1);
        }
      } else {
        spaces = [];
      }

      hasTag = false;
      nonSpace = false;
    };

    var sectionStack = [], updateLine, nextOpenTag, nextCloseTag;

    var setTags = function (source) {
      tags = trim(source).split(/\s+/);
      nextOpenTag = tags[0];
      nextCloseTag = tags[tags.length - 1];
    };

    var includePartial = function (source) {
      code.push(
        '";',
        updateLine,
        '\nvar partial = partials["' + trim(source) + '"];',
        '\nif (partial) {',
        '\n  buffer += render(partial,stack[stack.length - 1],partials);',
        '\n}',
        '\nbuffer += "'
      );
    };

    var openSection = function (source, inverted) {
      var name = trim(source);

      if (name === "") {
        throw debug(new Error("Section name may not be empty"), template, line, options.file);
      }

      sectionStack.push({name: name, inverted: inverted});

      code.push(
        '";',
        updateLine,
        '\nvar name = "' + name + '";',
        '\nvar callback = (function () {',
        '\n  return function () {',
        '\n    var buffer = "";',
        '\nbuffer += "'
      );
    };

    var openInvertedSection = function (source) {
      openSection(source, true);
    };

    var closeSection = function (source) {
      var name = trim(source);
      var openName = sectionStack.length != 0 && sectionStack[sectionStack.length - 1].name;

      if (!openName || name != openName) {
        throw debug(new Error('Section named "' + name + '" was never opened'), template, line, options.file);
      }

      var section = sectionStack.pop();

      code.push(
        '";',
        '\n    return buffer;',
        '\n  };',
        '\n})();'
      );

      if (section.inverted) {
        code.push("\nbuffer += renderSection(name,stack,callback,true);");
      } else {
        code.push("\nbuffer += renderSection(name,stack,callback);");
      }

      code.push('\nbuffer += "');
    };

    var sendPlain = function (source) {
      code.push(
        '";',
        updateLine,
        '\nbuffer += lookup("' + trim(source) + '",stack,"");',
        '\nbuffer += "'
      );
    };

    var sendEscaped = function (source) {
      code.push(
        '";',
        updateLine,
        '\nbuffer += escapeHTML(lookup("' + trim(source) + '",stack,""));',
        '\nbuffer += "'
      );
    };

    var line = 1, c, callback;
    for (var i = 0, len = template.length; i < len; ++i) {
      if (template.slice(i, i + openTag.length) === openTag) {
        i += openTag.length;
        c = template.substr(i, 1);
        updateLine = '\nline = ' + line + ';';
        nextOpenTag = openTag;
        nextCloseTag = closeTag;
        hasTag = true;

        switch (c) {
        case "!": // comment
          i++;
          callback = null;
          break;
        case "=": // change open/close tags, e.g. {{=<% %>=}}
          i++;
          closeTag = "=" + closeTag;
          callback = setTags;
          break;
        case ">": // include partial
          i++;
          callback = includePartial;
          break;
        case "#": // start section
          i++;
          callback = openSection;
          break;
        case "^": // start inverted section
          i++;
          callback = openInvertedSection;
          break;
        case "/": // end section
          i++;
          callback = closeSection;
          break;
        case "{": // plain variable
          closeTag = "}" + closeTag;
          // fall through
        case "&": // plain variable
          i++;
          nonSpace = true;
          callback = sendPlain;
          break;
        default: // escaped variable
          nonSpace = true;
          callback = sendEscaped;
        }

        var end = template.indexOf(closeTag, i);

        if (end === -1) {
          throw debug(new Error('Tag "' + openTag + '" was not closed properly'), template, line, options.file);
        }

        var source = template.substring(i, end);

        if (callback) {
          callback(source);
        }

        // Maintain line count for \n in source.
        var n = 0;
        while (~(n = source.indexOf("\n", n))) {
          line++;
          n++;
        }

        i = end + closeTag.length - 1;
        openTag = nextOpenTag;
        closeTag = nextCloseTag;
      } else {
        c = template.substr(i, 1);

        switch (c) {
        case '"':
        case "\\":
          nonSpace = true;
          code.push("\\" + c);
          break;
        case "\r":
          // Ignore carriage returns.
          break;
        case "\n":
          spaces.push(code.length);
          code.push("\\n");
          stripSpace(); // Check for whitespace on the current line.
          line++;
          break;
        default:
          if (isWhitespace(c)) {
            spaces.push(code.length);
          } else {
            nonSpace = true;
          }

          code.push(c);
        }
      }
    }

    if (sectionStack.length != 0) {
      throw debug(new Error('Section "' + sectionStack[sectionStack.length - 1].name + '" was not closed properly'), template, line, options.file);
    }

    // Clean up any whitespace from a closing {{tag}} that was at the end
    // of the template without a trailing \n.
    stripSpace();

    code.push(
      '";',
      "\nreturn buffer;",
      "\n} catch (e) { throw {error: e, line: line}; }"
    );

    // Ignore `buffer += "";` statements.
    var body = code.join("").replace(/buffer \+= "";\n/g, "");

    if (options.debug) {
      if (typeof console != "undefined" && console.log) {
        console.log(body);
      } else if (typeof print === "function") {
        print(body);
      }
    }

    return body;
  }

  /**
   * Used by `compile` to generate a reusable function for the given `template`.
   */
  function _compile(template, options) {
    var args = "view,partials,stack,lookup,escapeHTML,renderSection,render";
    var body = parse(template, options);
    var fn = new Function(args, body);

    // This anonymous function wraps the generated function so we can do
    // argument coercion, setup some variables, and handle any errors
    // encountered while executing it.
    return function (view, partials) {
      partials = partials || {};

      var stack = [view]; // context stack

      try {
        return fn(view, partials, stack, lookup, escapeHTML, renderSection, render);
      } catch (e) {
        throw debug(e.error, template, e.line, options.file);
      }
    };
  }

  // Cache of pre-compiled templates.
  var _cache = {};

  /**
   * Clear the cache of compiled templates.
   */
  function clearCache() {
    _cache = {};
  }

  /**
   * Compiles the given `template` into a reusable function using the given
   * `options`. In addition to the options accepted by Mustache.parse,
   * recognized options include the following:
   *
   *   - cache    Set `false` to bypass any pre-compiled version of the given
   *              template. Otherwise, a given `template` string will be cached
   *              the first time it is parsed
   */
  function compile(template, options) {
    options = options || {};

    // Use a pre-compiled version from the cache if we have one.
    if (options.cache !== false) {
      if (!_cache[template]) {
        _cache[template] = _compile(template, options);
      }

      return _cache[template];
    }

    return _compile(template, options);
  }

  /**
   * High-level function that renders the given `template` using the given
   * `view` and `partials`. If you need to use any of the template options (see
   * `compile` above), you must compile in a separate step, and then call that
   * compiled function.
   */
  function render(template, view, partials) {
    return compile(template)(view, partials);
  }

})(Mustache);
;
/* Common front-end code for the Notifications system
 *	- wpNotesCommon wraps all the proxied REST calls
 *	- wpNoteModel & wpNoteList are Backbone.js Model, & Collection implementations
 */

var wpNotesCommon;
var wpNotesCommentModView;
var wpNoteList;
var wpNoteModel;

(function($){
	var cookies = document.cookie.split( /;\s*/ ), cookie = false;
	for ( i = 0; i < cookies.length; i++ ) {
		if ( cookies[i].match( /^wp_api=/ ) ) {
			cookies = cookies[i].split( '=' );
			cookie = cookies[1];
			break;
		}
	}

	wpNotesCommon = {
		jsonAPIbase: 'https://public-api.wordpress.com/rest/v1',
		hasUpgradedProxy: false,

		noteTypes: {
			comment: 'comment',
			follow: 'follow',
			like: [
				'like',
				'like_trap'
			],
			reblog: 'reblog',
			trophy: [
				'best_liked_day_feat',
				'like_milestone_achievement',
				'achieve_automattician_note',
				'achieve_user_anniversary',
				'best_followed_day_feat',
				'followed_milestone_achievement'
			],
			'alert': [
				'expired_domain_alert'
			]
		},

		noteType2Noticon: {
			'like': 'like',
			'follow': 'follow',
			'comment_like': 'like',
			'comment': 'comment',
			'comment_pingback': 'external',
			'reblog': 'reblog',
			'like_milestone_achievement': 'trophy',
			'achieve_followed_milestone_note': 'trophy',
			'achieve_user_anniversary': 'trophy',
			'best_liked_day_feat': 'milestone',
			'best_followed_day_feat': 'milestone',
			'automattician_achievement': 'trophy',
			'expired_domain_alert': 'alert',
			'automattcher': 'atsign'
		},
	
		createNoteContainer: function( note, id_prefix ) {
			var note_container = $('<div/>', {
				id : id_prefix + '-note-' + note.id,
				'class' : 'wpn-note wpn-' + note.type + ' ' + ( ( note.unread > 0 ) ? 'wpn-unread' : 'wpn-read' )
			}).data( {
				id: parseInt( note.id, 10 ),
				type: note.type
			});
			var note_body = $('<div/>', { "class":"wpn-note-body wpn-note-body-empty" } );
			var spinner = $( '<div/>', { style : 'position: absolute; left: 180px; top: 60px;' } );
			note_body.append( spinner );
			spinner.spin( 'medium' );
			note_container.append(
				this.createNoteSubject( note ),
				note_body
			);
	
			return note_container;
		},
	
		createNoteSubject: function( note ) {
			var subj = $('<div/>', { "class":"wpn-note-summary" } ).append(
				$('<span/>', {
					"class" : 'wpn-noticon noticon noticon' + note.noticon
				}),
				$('<span/>', {
					"class" : 'wpn-icon no-grav',
						html : $('<img/>', {
							src : note.subject.icon,
							width : '24px',
							height : '24px',
							style : 'display: inline-block; width: 24px; height: 24px; overflow-x: hidden; overflow-y: hidden;'
						})
				}),
				$('<span/>', {
					"class" : 'wpn-subject',
					html : note.subject.html
				})
			);
			return subj;
		},
	
	
		createNoteBody: function( note_model ) {
			var note_body = $('<div/>', { "class":"wpn-note-body" } );
			var note = note_model.toJSON();
			var class_prefix = 'wpn-' + note.body.template;
			switch( note.body.template ) {
				case 'single-line-list' :
				case 'multi-line-list' :
					note_body.append( 
						$( '<p/>' ).addClass( class_prefix + '-header' ).html( note.body.header )
					);

					for ( var i in note.body.items ) {
						var item = $('<div></div>', { 
							'class' : class_prefix + '-item ' + class_prefix + '-item-' + i + 
								( note.body.items[i].icon ? '' : ' ' + class_prefix + '-item-no-icon' )
						});
						if ( note.body.items[i].icon ) {
							item.append(
								$('<img/>', { 
									"class" : class_prefix + '-item-icon avatar avatar-' + note.body.items[i].icon_width,
									height: note.body.items[i].icon_height,
									width: note.body.items[i].icon_width,
									src: note.body.items[i].icon
							} ) );
						}
						if ( note.body.items[i].header ) {
							item.append(
								$('<div></div>', { 'class' : class_prefix + '-item-header' }
							).html( note.body.items[i].header ) );
						}
						if ( note.body.items[i].action ) {
							switch ( note.body.items[i].action.type ) {
								case 'follow' :
									var button = wpFollowButton.create( note.body.items[i].action );
									item.append( button );
									// Attach action stat tracking for follows
									button.click( function(e) {
										if ( $( this ).children('a').hasClass( 'wpcom-follow-rest' ) )
											wpNotesCommon.bumpStat( 'notes-click-action', 'unfollow' );
										else
											wpNotesCommon.bumpStat( 'notes-click-action', 'follow' );
										return true;
									} );
									break;
								default :
									console.error( "Unsupported " + note.type + " action: " + note.body.items[i].action.type );
									break;
							}
						}
						if ( note.body.items[i].html ) {
							item.append(
								$('<div></div>', { 'class' : class_prefix + '-item-body' }
							).html( note.body.items[i].html ) );
						}
						note_body.append( item );
					}
	
					if ( note.body.actions ) {
						var note_actions = new wpNotesCommentModView( { model: note_model } );
						note_actions.render();
						note_body.append( note_actions.el );
					}
	
					if ( note.body.footer ) {
						note_body.append( 
							$( '<p/>' ).addClass( class_prefix + '-footer' ).html( note.body.footer )
						);
					}
					break;
				case 'big-badge' :
					if ( note.body.header ) {
						note_body.append( 
							$( '<div/>' ).addClass( class_prefix + '-header' ).html( note.body.header )
						);
					}
	
					if ( note.body.badge ) {
						note_body.append( $('<div></div>', { 
							'class' : class_prefix + '-badge ' 
						}).append( note.body.badge ) );
					}
	
					if ( note.body.html !== '' ) {
						note_body.append( 
							$( '<div/>' ).addClass( class_prefix + '-footer' ).html( note.body.html )
						);
					}
	
					break;
				default :
					note_body.text( 'Unsupported note body template!' );
					break;
			}

			note_body.find( 'a[notes-data-click]' ).mousedown( function(e) {
				var type = $(this).attr( 'notes-data-click' );
				wpNotesCommon.bumpStat( 'notes-click-body', type );
				return true;
			} );
	
			return note_body;		
		},
	
		getNoteSubjects: function( query_params, success, fail ) {
			query_params.fields = 'id,type,unread,noticon,timestamp,subject';
			query_params.trap = true;
			return this.getNotes( query_params, success, fail );
		},

		getNotes: function( query_params, success, fail ) {
			return this.ajax({
				type:    'GET',
				path:    '/notifications/',
				data:    query_params,
				success: success,
				error:   fail
			});
		},

		getMentions: function( query_params, success ) {
			return this.ajax({
				type:    'GET',
				path:    '/users/suggest',
				data:    query_params,
				success: success
			});
		},
		
		markNotesSeen: function( timestamp ) {
			return this.ajax({
				type:    'POST',
				path:    '/notifications/seen',
				data:    { time: timestamp }
			});
		},
	
		markNotesRead: function( unread_cnts ) {
			var query_args = {};
			var t = this;

			for ( var id in unread_cnts ) {
				if ( unread_cnts[ id ] > 0 ) {
					query_args['counts[' + id + ']'] = unread_cnts[ id ];
				}
			}

			if ( 0 === query_args.length ) {
				return (new $.Deferred()).resolve( 'no unread notes' );
			}
			
			return this.ajax({
				type : 'POST',
				path : '/notifications/read',
				data : query_args,
				success : function( res ) { },
				error : function( res ) { }
			});
		},

		ajax: function( options ) {
			var t = this;
			var request = {
				path: options.path,
				method: options.type
			};

			if ( options.type.toLowerCase() == 'post' )
				request.body = options.data;
			else
				request.query = options.data;

			return $.Deferred( function( dfd ) {
				var makeProxyCall = function() {
					$.wpcom_proxy_request( request, function( response, statusCode ) { 
						if ( 200 == statusCode ) {
							if ( 'function' == typeof options.success ) {
								options.success( response );
							}
							return dfd.resolve( response );
						}
						if ( 'function' == typeof options.error ) {
							options.error( statusCode );
						}
						else {
							console.error( statusCode );
						}
						return dfd.reject( statusCode );
					});
				};

				if ( t.hasUpgradedProxy ) {
					return makeProxyCall();
				}
				return $.wpcom_proxy_request( { metaAPI: { accessAllUsersBlogs: true } } ).done( function() {
					t.hasUpgradedProxy = true;
					makeProxyCall();
				} );	
			});
		},
	
		bumpStat: function( group, names ) {
			if ( 'undefined' != typeof wpNotesIsJetpackClient && wpNotesIsJetpackClient ) {
				var jpStats = [ 'notes-menu-impressions', 'notes-menu-clicks' ];
				if ( _.contains( jpStats, group ) ) {
					names = names.replace( /(,|$)/g, '-jetpack$1' );
				}
			}
			new Image().src = document.location.protocol + '//pixel.wp.com/g.gif?v=wpcom-no-pv&x_' + group + '=' + names + '&baba=' + Math.random();
		},

		getKeycode: function( key_event ) {
			//determine if we can use this key event to trigger the menu
			key_event = key_event || window.event;
			if ( key_event.target )
				element = key_event.target;
			else if ( key_event.srcElement )
				element = key_event.srcElement;
			if( element.nodeType == 3 ) //text node, check the parent
				element = element.parentNode;
			
			if( key_event.ctrlKey === true || key_event.altKey === true || key_event.metaKey === true )
				return false;
		
			var keyCode = ( key_event.keyCode ) ? key_event.keyCode : key_event.which;

			if ( keyCode && ( element.tagName == 'INPUT' || element.tagName == 'TEXTAREA' || element.tagName == 'SELECT' ) )
				return false;

			if ( keyCode && element.contentEditable == "true" )
				return false;

			return keyCode;
		}
	};

	wpNoteModel = Backbone.Model.extend({
		defaults: {
			summary: "",
			unread: true
		},

		_reloadBlocked: false,

		initialize: function() {			
		},

		markRead: function() {
			var unread_cnt = this.get( 'unread' );
			if ( Boolean( parseInt( unread_cnt, 10 ) ) ) {
				var notes = {};
				notes[ this.id ] = unread_cnt;
				wpNotesCommon.markNotesRead( notes );
				wpNotesCommon.bumpStat( 'notes-read-type', this.get( 'type' ) );
			}
		},
		
		loadBody: function() {
			wpNotesCommon.createNoteBody( this );
		},

		reload: function() {
			var t = this;
			var fields = 'id,type,unread,noticon,subject,body,date,timestamp,status';
			if ( 'comment' == t.get( 'type' ) ) {
				fields += ',approval_status,has_replied';
			}
			if (!force && this.isReloadingBlocked()) {
				return $.Deferred().reject('reloading blocked');
			}
			return wpNotesCommon.getNotes( {
				fields: fields,
				trap: true,
				ids: [ t.get('id') ]
			}, function ( res ) {
				var notes = res.notes;
				if ( typeof notes[0] !== 'undefined' ) {
					t.set( notes[ 0 ] );
				}
			}, function() {
				//ignore failure
			} );
		},

		resize: function() {
			this.trigger( 'resize' );
		},

		/* Block the model from being reloaded for a specified number of seconds
		 * needed b/c in the case of Jetpack, it takes a while for the new status to sync back to wpcom
		 * & this prevents it flashing back and forth
		 */
		
		blockReloading: function(seconds) {
			var _this = this;
			this._reloadBlocked = true;
			clearTimeout(this.reloadBlockerTimeout);
			return this.reloadBlockerTimeout = setTimeout(function() {
				return _this._reloadBlocked = false;
			}, seconds * 1000);
		},

		isReloadingBlocked: function() {
			return this._reloadBlocked;
		}
	});

	wpNoteList = Backbone.Collection.extend({
		model:   wpNoteModel,
		lastMarkedSeenTimestamp : false,
		newNotes: false,
		maxNotes : false,
		loading: false,
		hasLoaded: false,
		allBodiesLoaded: false,

		//always sort by timpstamp
		comparator: function( note ) {
			return -note.get( 'timestamp' );
		},

		addNotes: function( notes ) {
			// Filter out any notes that have no subject
			notes = _.filter( notes, function(note) { return typeof( note.subject ) === "object"; } );
			var models = _.map( notes, function(o) { return new wpNoteModel(o); });
			this.add( models );
			this.sort(); //ensure we maintain sorted order
			if ( this.maxNotes ) {
				while( this.length > this.maxNotes ) {
					this.pop();
				}
			}
			this.trigger( 'loadNotes:change' );
		},

		getMostRecentTimestamp: function() {
			if ( !this.length ) {
				return false;
			}

			//ensure we maintain sorted order see the comparator function
			this.sort();
			return parseInt( this.at(0).get( 'timestamp' ), 10 );
		},

		// load notes from the server
		loadNotes: function( query_args ) {
			var t = this;

			t.loading = true;
			t.trigger( 'loadNotes:beginLoading' );
			
			var fields = query_args.fields;
			var number = parseInt( query_args.number, 10 );
			var before = parseInt( query_args.before, 10 );
			var since = parseInt( query_args.since, 10 );
			var timeout = parseInt( query_args.timeout, 10 ) || 7000;
			var type = 'undefined' == typeof query_args.type ? null : query_args.type;
			var unread = 'undefined' == typeof query_args.unread ? null : query_args.unread;

			query_args = {
				timeout: timeout
			};
			
			if ( ! fields ) {
				fields = 'id,type,unread,noticon,subject,body,date,timestamp,status';
			}
			
			if ( isNaN( number ) ) {
				number = 9;
			}
			
			if ( ! isNaN( before ) ) {
				query_args.before = before;
			}
			if ( ! isNaN( since ) ) {
				query_args.since = since;
			}

			if ( unread !== null ) {
				query_args.unread = unread;
			}

			if ( type !== null && type != "unread" && type != "latest" ) {
				query_args.type = type;
			}
			
			query_args.number = number;
			query_args.fields = fields;
			query_args.trap = true;

			return wpNotesCommon.getNotes( query_args ).done( function ( res ) {
				var qt;
				var notes = res.notes;
				var notes_changed = false;
				if ( !t.lastMarkedSeenTimestamp || ( res.last_seen_time > t.lastMarkedSeenTimestamp ) ) { 
					notes_changed = true; 
					t.lastMarkedSeenTimestamp = parseInt( res.last_seen_time, 10 );
				} 

				for( var idx in notes ) {
					var note_model = t.get( notes[idx].id );
					if ( note_model ) {
						// Remove notes that have no subject
						if ( typeof( notes[idx].subject ) != 'object' ) {
							t.remove( notes[idx].id );
							notes_changed = true;
							continue;
						}
						if ( type ) {
							qt = note_model.get( 'queried_types' ) || {};
							qt[ type ] = true;
							notes[idx].queried_types = qt;
						}
						note_model.set( notes[ idx ] );
					}
					else {
						// Skip notes that have no subject
						if ( typeof( notes[idx].subject ) != 'object' ) {
							continue;
						}
						if ( type ) {
							qt = {};
							qt[ type ] = true;
							notes[idx].queried_types = qt;
						}
						note_model = new wpNoteModel( notes[ idx ] );
						t.add( note_model );
					}
					if ( ! note_model.has('body') )
						t.allBodiesLoaded = false;
					notes_changed = true;
				}

				if ( t.maxNotes ) {
					while( t.length > t.maxNotes ) {
						t.pop();
					}
				}

				if ( notes_changed ) {
					t.sort(); //ensure we maintain sorted order
					t.trigger( 'loadNotes:change' );
				}
				t.loading = false;
				t.hasLoaded = true;
				t.trigger( 'loadNotes:endLoading' );
			}).fail( function( e ) {
				t.loading = false;
				t.trigger( 'loadNotes:failed' );
			});
		},

		loadNoteBodies: function( filter ) {
			var t = this;
			if ( t.allBodiesLoaded ) {
				return (new $.Deferred()).resolve();
			}

			// Only load the note bodies that pass the caller supplied filter.
			// If no filter is supplied, all notes in the collection are fetched.
			var ids = t.getNoteIds( filter );

			if ( 0 == ids.length ) {
				return (new $.Deferred()).reject();
			}

			var doneFunc = function( res ) {
				var notes = res.notes;
				for( var idx in notes ) {
					// Skip notes that have no subject
					if ( typeof( notes[idx].subject ) != 'object' ) {
						continue;
					}
					var note_model = t.get( notes[idx].id );
					if ( note_model ) {
						note_model.set( notes[idx] );
					} else {
						note_model = new wpNoteModel( notes[ idx ] );
						t.add( note_model );
					}
				}
			};

			var failFunc = function ( e ) {
				if ( typeof console != 'undefined' && typeof console.error == 'function' )
					console.error( 'body loading error!' );
			}

			//get each note body as a separate request so we can get them in parallel
			//to speed up loading when there are many new notes
			var deferreds = [];

			//split into 3 requests (3 most recent notes, and then any others into one request)
			var count = 3
			for ( var i=0; i<count; i++ ) {
				if ( typeof ids[i] == 'undefined' )
					break;

				var query_params = {};
				// loads subject & meta data also so all are consistent
				query_params.fields = 'id,type,unread,noticon,timestamp,subject,body,meta,status';
				query_params.trap = true;
				query_params['ids[' + i + ']'] = ids[i];

				deferreds.push( wpNotesCommon.getNotes( query_params )
					.done( doneFunc )
					.fail( failFunc )
				)	;
			}

			if ( ids.length > count ) {
				var query_params = {};
				// loads subject & meta data also so all are consistent
				query_params.fields = 'id,type,unread,noticon,timestamp,subject,body,meta,status';
				query_params.trap = true;

				for ( var i=count; i<ids.length; i++ )
					query_params['ids[' + i + ']'] = ids[i];

				deferreds.push( wpNotesCommon.getNotes( query_params )
					.done( doneFunc )
					.fail( failFunc )
				)	;
			}

			var all_xhr = $.when.apply(null, deferreds);
			all_xhr.done( function() {
				if ( typeof filter != 'function' ) {
					t.allBodiesLoaded = true;
				}
			} );

			return all_xhr;
		},

		markNotesSeen: function() {
			var t = this,
				mostRecentTs = t.getMostRecentTimestamp();

			if ( mostRecentTs > this.lastMarkedSeenTimestamp ) {
				wpNotesCommon.markNotesSeen( mostRecentTs ).done( function() {
					t.lastMarkedSeenTimestamp = false;
				});
			}
		},

		unreadCount: function() {
			return this.reduce( function( num, note ) { return num + ( note.get('unread') ? 1 : 0 ); }, 0 );
		},

		numberNewNotes: function() {
			var t = this;
			if ( ! t.lastMarkedSeenTimestamp )
				return 0;
			return t.getNewNotes().length;
		},

		// return notes in this collection which were generated after we last marked it as seen.
		getNewNotes: function() {
			var t = this;
			return t.filter( function( note ) { 
				return ( note.get('timestamp') > t.lastMarkedSeenTimestamp ); 
			} );
		},

		// get all unread notes in the collection
		getUnreadNotes: function() {
			return this.filter( function( note ){ return Boolean( parseInt( note.get( "unread" ), 10 ) ); } );
		},
		
		// get all notes in the collection of specified type
		getNotesOfType: function( typeName ) {
			var t = this;
			switch( typeName ){
				case 'unread':
					return t.getUnreadNotes();
				case 'latest':
					return t.filter( function( note ) {
						var qt = note.get( 'queried_types' );
						return 'undefined' != typeof qt && 'undefined' != typeof qt.latest && qt.latest;
					});
				default:
					return t.filter( function( note ) {
						var note_type = note.get( "type" );
						if ( "undefined" == typeof wpNotesCommon.noteTypes[ typeName ] ) {
							return false;
						}
						else if ( "string" == typeof wpNotesCommon.noteTypes[ typeName ] ) {
							return typeName == note_type;
						}
						var len = wpNotesCommon.noteTypes[ typeName ].length;
						for ( var i=0; i<len; i++ ){
							if ( wpNotesCommon.noteTypes[ typeName ][i] == note_type ) {
								return true;
							}
						}
						return false;
					} );
			}
		},

		getNoteIds: function(filter) {
			if ( typeof filter != 'function' )
				filter = function(){ return true; };
			return _.pluck( this.filter(filter), 'id' );
		}
	});

	/**
	 * BEWARE: HERE BE DRAGONS
	 *
	 * wpNotesCommentModView is a copy/pasta from NoteCommentModView in widgets.wp.com/notes/notes-widget.test.js
	 *
	 * DO NOT edit this code - instead, fix whatever you need to fix in the-pit-of-despair/notes-widget/NoteCommentModView.coffee,
	 * regenerate notes-widget.test.js, copy/pasta, and continue the cycle of abuse.
	 **/

	wpNotesCommentModView = Backbone.View.extend({
      mode: 'buttons',
      actionsByName: null,
      possibleActions: ['approve-comment', 'replyto-comment', 'like-comment', 'spam-comment', 'trash-comment', 'unapprove-comment', 'unlike-comment', 'unspam-comment', 'untrash-comment'],
      possibleStatuses: ['approved', 'spam', 'trash', 'unapproved'],
      events: {
        'click .wpn-replyto-comment-button-open a': 'openReply',
        'click .wpn-comment-reply-button-close': 'closeReply',
        'click .wpn-comment-reply-button-send': 'sendReply',
        'click .wpn-like-comment-button a': 'clickLikeComment',
        'click .wpn-unlike-comment-button a': 'clickLikeComment',
        'click .wpn-approve-comment-button a': 'clickModComment',
        'click .wpn-unapprove-comment-button a': 'clickModComment',
        'click .wpn-spam-comment-button a': 'clickModComment',
        'click .wpn-unspam-comment-button a': 'clickModComment',
        'click .wpn-trash-comment-button a': 'clickModComment',
        'click .wpn-untrash-comment-button a': 'clickModComment'
      },
      templateActions: '\
			{{#reply}}\
			<span class="{{reply.class}}">\
				<a href="#" title="{{reply.title}}" data-action-type="{{reply.actionType}}">{{reply.text}}</a>\
			</span>\
			{{/reply}}\
			{{#like}}\
			<span class="{{like.class}}">\
				<a href="#" title="{{like.title}}" data-action-type="{{like.actionType}}">{{like.text}}</a>\
			</span>\
			{{/like}}\
			<span class="wpn-more">\
				<a href="#">More</a>\
				<div class="wpn-more-container">\
				{{#spam}}\
				<span class="{{spam.class}}">\
					<a href="#" title="{{spam.title}}" data-action-type="{{spam.actionType}}">{{spam.text}}</a>\
				</span>\
				{{/spam}}\
				{{#trash}}\
				<span class="{{trash.class}}">\
					<a href="#" title="{{trash.title}}" data-action-type="{{trash.actionType}}">{{trash.text}}</a>\
				</span>\
				{{/trash}}\
				</div>\
			</span>\
			{{#approve}}\
			<span class="{{approve.class}}">\
				<a href="#" title="{{approve.title}}" data-action-type="{{approve.actionType}}">{{approve.text}}</a>\
			</span>\
			{{/approve}}\
			<span class="wpn-comment-mod-waiting"></span>',
      templateReply: '\
			<div class="wpn-note-comment-reply">\
				<h5>{{reply_header_text}}</h5>\
				<textarea class="wpn-note-comment-reply-text" rows="5" cols="45" name="wpn-note-comment-reply-text"></textarea>\
				<p class="wpn-comment-submit">\
					<span class="wpn-comment-submit-waiting" style="display: none;"></span>\
				<span class="wpn-comment-submit-error" style="display:none;">Error!</span>\
				<a href="#" class="wpn-comment-reply-button-send alignright">{{submit_button_text}}</a>\
				<a href="#" class="wpn-comment-reply-button-close alignleft">_</a>\
				</p>\
			</div>',
      initialize: function() {
        var _this = this;
        this.setElement($('<div class="wpn-note-comment-actions" />'));
        this.listenTo(this.model, 'change:status', function(model, status) {
          var approvalStatus, prevStatus;
          approvalStatus = status.approval_status;
          prevStatus = model.previous('status') || {};
          if (prevStatus.approval_status && prevStatus.approval_status === approvalStatus) {
            return;
          }
          if (approvalStatus.match(/^trash|spam$/)) {
            return _this.setUndoStatus(prevStatus.approval_status);
          }
        });
        this.listenTo(this.model, 'change', this.render);
        $(document).on('click', '.wpn-more > a', function(ev) {
          var $el;
          ev.preventDefault();
          ev.stopPropagation();
          if (ev.doneMoreToggle) {
            return;
          }
          ev.doneMoreToggle = true;
          $el = $(ev.currentTarget);
          $el.parent().find('.wpn-more-container').toggle();
          return false;
        });
        this;
        $(document).on('click', '.wpn-note-body', function(ev) {
          var $el, $note;
          $el = $(ev.target);
          if (($el.parents('.wpn-more').length)) {
            return;
          }
          $note = $el.closest('.wpn-note-body');
          if ($note.find('.wpn-more-container').is(':visible')) {
            $note.find('.wpn-more-container').toggle();
          }
        });
        this;
        $('.wpn-more-container:not(:has(*))').parents('.wpn-more').hide();
        $(document).on('keydown', function(keyEvent) {
          var keyCode, status, validActions;
          if (_this.$el.is(':hidden')) {
            return;
          }
          if (_this.mode !== 'buttons') {
            return;
          }
          keyCode = wpNotesCommon.getKeycode(keyEvent);
          if (!keyCode) {
            return;
          }
          validActions = _this.getValidActions();
          status = _this.model.get('status') || {};
          if (keyCode === 82) {
            if (_.contains(validActions, 'replyto-comment')) {
              _this.openReply(keyEvent);
            }
          }
          if (keyCode === 65) {
            if (_.contains(validActions, 'approve-comment')) {
              _this.modComment('approve-comment');
            } else if (_.contains(validActions, 'unapprove-comment')) {
              _this.modComment('unapprove-comment');
            }
          }
          if (keyCode === 76) {
            if (_.contains(validActions, 'like-comment')) {
              _this.likeComment('like-comment');
            } else if (_.contains(validActions, 'unlike-comment')) {
              _this.likeComment('unlike-comment');
            }
          }
          if (keyCode === 83) {
            if (_.contains(validActions, 'spam-comment')) {
              _this.modComment('spam-comment');
            } else if (_.contains(validActions, 'unspam-comment')) {
              _this.modComment('unspam-comment');
            }
          }
          if (keyCode === 84) {
            if (_.contains(validActions, 'trash-comment')) {
              _this.modComment('trash-comment');
            } else if (_.contains(validActions, 'untrash-comment')) {
              _this.modComment('untrash-comment');
            }
          }
          return false;
        });
        return this;
      },
      render: function() {
        var body;
        if (this.model._changing && 'reply' === this.mode) {
          return this;
        }
        this.$el.empty();
        body = this.model.get('body');
        if (!body.actions) {
          return this;
        }
        this.updateActionsMap();
        if (this.mode === 'buttons') {
          this.$el.html(this.createActionsHTML());
        } else {
          this.$el.html(this.createReplyBoxHTML());
          this.$('textarea').focus();
        }
        this.delegateEvents();
        return this;
      },
      setUndoStatus: function(status) {
        return this._undoStatus = status;
      },
      getUndoStatus: function() {
        var status;
        if (this._undoStatus) {
          return this._undoStatus;
        }
        status = this.model.get('status');
        if ((status != null) && status.undo_status === '1') {
          return 'approved';
        }
        return 'unapproved';
      },
      getValidActions: function() {
        var actions, status;
        status = this.model.get('status') || {};
        switch (status.approval_status) {
          case 'pending':
          case 'unapproved':
            return ['replyto-comment', 'approve-comment', 'spam-comment', 'trash-comment'];
          case 'approved':
            actions = ['replyto-comment', 'unapprove-comment', 'spam-comment', 'trash-comment'];
            if (status.i_liked) {
              actions.splice(1, 0, 'unlike-comment');
            } else {
              actions.splice(1, 0, 'like-comment');
            }
            return actions;
          case 'trash':
            return ['untrash-comment'];
          case 'spam':
            return ['unspam-comment'];
          default:
            return [];
        }
      },
      getResultantStatus: function(actionType) {
        switch (actionType) {
          case 'approve-comment':
            return 'approved';
          case 'unapprove-comment':
            return 'unapproved';
          case 'spam-comment':
            return 'spam';
          case 'trash-comment':
            return 'trash';
          case 'unspam-comment':
          case 'untrash-comment':
            return this.getUndoStatus();
          default:
            return void 0;
        }
      },
      getStatusParamFromActionType: function(actionType) {
        if (!actionType) {
          return void 0;
        }
        switch (actionType) {
          case 'approve-comment':
            return 'approved';
          case 'unapprove-comment':
            return 'unapproved';
          default:
            return actionType.split('-')[0];
        }
      },
      getComplementaryActionType: function(actionType) {
        switch (actionType) {
          case 'approve-comment':
            return 'unapprove-comment';
          case 'unapprove-comment':
            return 'approve-comment';
          case 'like-comment':
            return 'unlike-comment';
          case 'unlike-comment':
            return 'like-comment';
          case 'spam-comment':
            return 'unspam-comment';
          case 'trash-comment':
            return 'untrash-comment';
          case 'unspam-comment':
            return 'spam-comment';
          case 'untrash-comment':
            return 'trash-comment';
          default:
            return void 0;
        }
      },
      getTranslation: function(string) {
        if (typeof notes_i18n === 'undefined' || !notes_i18n.translate) {
          return string;
        }
        return notes_i18n.translate(string).fetch();
      },
      getTranslationsForActionType: function(actionType) {
        var gt;
        gt = this.getTranslation;
        if (!this._translationsByActionType) {
          this._translationsByActionType = {
            'approve-comment': {
              buttonText: gt('Approve'),
              titleText: gt('Approve this comment.')
            },
            'like-comment': {
              buttonText: gt('Like'),
              titleText: gt('Like this comment.')
            },
            'replyto-comment': {
              buttonText: gt('Reply'),
              titleText: gt('Reply to this comment.')
            },
            'spam-comment': {
              buttonText: gt('Spam'),
              titleText: gt('Mark this comment as spam.')
            },
            'trash-comment': {
              buttonText: gt('Trash'),
              titleText: gt('Move this comment to the trash.')
            },
            'unapprove-comment': {
              buttonText: gt('Unapprove'),
              titleText: gt('Unapprove this comment.')
            },
            'unlike-comment': {
              buttonText: gt('Liked'),
              titleText: gt('Unlike this comment.')
            },
            'unspam-comment': {
              buttonText: gt('Unspam'),
              titleText: gt('Unmark this comment as spam.')
            },
            'untrash-comment': {
              buttonText: gt('Untrash'),
              titleText: gt('Restore this comment from the trash.')
            }
          };
        }
        return this._translationsByActionType[actionType];
      },
      updateActionsMap: function() {
        var action, actionType, actions, body, _fn, _i, _j, _len, _len1, _ref, _results,
          _this = this;
        body = this.model.get('body');
        actions = body.actions || [];
        this.actionsByName = this.actionsByName || {};
        _fn = function(action) {
          if (!action.type || !action.params) {
            return;
          }
          return _this.actionsByName[action.type] = $.extend({}, action.params, {
            actionType: action.type
          });
        };
        for (_i = 0, _len = actions.length; _i < _len; _i++) {
          action = actions[_i];
          _fn(action);
        }
        _ref = this.possibleActions;
        _results = [];
        for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
          actionType = _ref[_j];
          _results.push((function(actionType) {
            var actionObj, complementObj, status, statusParam, submitText, translations;
            actionObj = _this.actionsByName[actionType];
            statusParam = _this.getStatusParamFromActionType(actionType);
            translations = _this.getTranslationsForActionType(actionType);
            if (!actionObj) {
              complementObj = _this.actionsByName[_this.getComplementaryActionType(actionType)];
              if (complementObj) {
                _this.actionsByName[actionType] = $.extend({}, complementObj, {
                  actionType: actionType,
                  ajax_arg: statusParam,
                  rest_body: {
                    status: statusParam
                  },
                  text: translations.buttonText,
                  title_text: translations.titleText
                });
              }
            }
            if (actionType === 'replyto-comment') {
              status = _this.model.get('status' || {});
              submitText = status.approval_status === 'approved' ? _this.getTranslation('Reply') : _this.getTranslation('Approve and Reply');
              return $.extend(_this.actionsByName['replyto-comment'], {
                button_text: translations.buttonText,
                submit_button_text: submitText,
                text: translations.buttonText,
                title_text: translations.titleText
              });
            }
          })(actionType));
        }
        return _results;
      },
      createActionsHTML: function() {
        var actionType, status, templateData, _fn, _i, _len, _ref,
          _this = this;
        status = this.model.get('status').approval_status;
        templateData = {};
        _ref = this.getValidActions();
        _fn = function(actionType) {
          var action, button_data;
          action = _this.actionsByName[actionType];
          if (!action) {
            return;
          }
          button_data = {
            "class": 'wpn-' + actionType + '-button',
            "actionType": actionType,
            "text": action.text || action.button_text
          };
          switch (actionType) {
            case 'replyto-comment':
              return templateData.reply = $.extend({}, button_data, {
                "class": 'wpn-replyto-comment-button-open',
                "title": (action.title_text || action.button_title_text) + ' [r]'
              });
            case 'like-comment':
            case 'unlike-comment':
              return templateData.like = $.extend({}, button_data, {
                "title": (action.title_text || action.button_title_text) + ' [l]'
              });
            case 'approve-comment':
            case 'unapprove-comment':
              if (_.contains(['spam', 'trash'], status)) {
                break;
              }
              return templateData.approve = $.extend({}, button_data, {
                "title": (action.title_text || action.button_title_text) + ' [a]'
              });
            case 'spam-comment':
            case 'unspam-comment':
              if (status === 'trash') {
                break;
              }
              return templateData.spam = $.extend({}, button_data, {
                "title": (action.title_text || action.button_title_text) + ' [s]'
              });
            case 'trash-comment':
            case 'untrash-comment':
              if (status === 'spam') {
                break;
              }
              return templateData.trash = $.extend({}, button_data, {
                "title": (action.title_text || action.button_title_text) + ' [t]'
              });
          }
        };
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          actionType = _ref[_i];
          _fn(actionType);
        }
        return Mustache.render(this.templateActions, templateData);
      },
      createReplyBoxHTML: function() {
        var action, blog_id, comment_id;
        action = this.actionsByName['replyto-comment'];
        if (!action) {
          return;
        }
        blog_id = action.site_id || 0;
        comment_id = this.model.id || 0;
        return Mustache.render(this.templateReply, {
          reply_header_text: action.reply_header_text,
          submit_button_text: action.submit_button_text
        });
      },
      closeReply: function(ev) {
        if (ev) {
          ev.preventDefault();
        }
        this.mode = 'buttons';
        this.model.currentReplyText = this.$el.children('.wpn-note-comment-reply').children('.wpn-note-comment-reply-text').val();
        this.render();
        return this.model.resize();
      },
      openReply: function(ev) {
        var action, gettingMentions, query_args,
          _this = this;
        if (ev) {
          ev.preventDefault();
        }
        this.mode = 'reply';
        this.render();
        this.$el.children('.wpn-note-comment-reply').children('.wpn-note-comment-reply-text').val(this.model.currentReplyText);
        $('.selected .wpn-note-body p.submitconfirm').remove();
        this.model.resize();
        if (!window.mentionDataCache) {
          window.mentionDataCache = [];
        }
        action = this.actionsByName['replyto-comment'];
        if (action.site_id != null) {
          if (window.mentionDataCache[action.site_id] != null) {
            return this.$el.children('.wpn-note-comment-reply').children('.wpn-note-comment-reply-text').mentions(window.mentionDataCache[action.site_id]);
          } else {
            window.mentionDataCache[action.site_id] = [];
            query_args = {
              site_id: action.site_id,
              client: 'notes-widget'
            };
            gettingMentions = wpNotesCommon.getMentions(query_args);
            return gettingMentions.done(function(res) {
              window.mentionDataCache[action.site_id] = res.suggestions;
              return _this.$el.children('.wpn-note-comment-reply').children('.wpn-note-comment-reply-text').mentions(window.mentionDataCache[action.site_id]);
            });
          }
        }
      },
      sendReply: function(ev) {
        var $submitWrap, action, blog_id, comment_id, comment_reply_el, content, doSend,
          _this = this;
        if (ev) {
          ev.preventDefault();
        }
        action = this.actionsByName['replyto-comment'];
        if (!action) {
          return $.Deferred().reject('Invalid replyto-comment action');
        }
        comment_reply_el = this.$el.children('.wpn-note-comment-reply');
        this.model.currentReplyText = comment_reply_el.children('.wpn-note-comment-reply-text').val();
        blog_id = action.site_id || 0;
        comment_id = action.comment_id || 0;
        content = this.model.currentReplyText || 0;
        if (!(blog_id && comment_id && content)) {
          return $.Deferred().reject('Invalid sendReply params');
        }
        $submitWrap = comment_reply_el.children('.wpn-comment-submit');
        $submitWrap.children('.wpn-comment-submit-error').hide();
        $submitWrap.children('.wpn-comment-reply-button-send').hide();
        $submitWrap.children('.wpn-comment-submit-waiting').gifspin('small').show();
        wpNotesCommon.bumpStat('notes-click-action', 'replyto-comment');
        doSend = function() {
          return wpNotesCommon.ajax({
            type: 'POST',
            path: '/sites/' + blog_id + '/comments/' + comment_id + '/replies/new',
            data: {
              content: content
            },
            success: function(r) {
              if (typeof r === 'string') {
                _this.errorReply(r);
                return false;
              }
              _this.closeReply();
              _this.model.currentReplyText = '';
              return _this.model.reload(true).done(function() {
                var tries;
                if (!_this.model.get('status').i_replied) {
                  tries = 0;
                  return _this.replyCommentInterval = setInterval(function() {
                    return _this.model.reload(true).done(function() {
                      if (_this.model.get('status').i_replied || tries++ >= 10) {
                        return clearInterval(_this.replyCommentInterval);
                      }
                    });
                  }, 3000);
                }
              });
            },
            error: function(r) {
              return _this.errorReply(r);
            }
          }).done(function() {
            var commentPermalink, submitConfirm;
            commentPermalink = $('.selected .wpn-comment-date a').attr('href');
            submitConfirm = '<p class="submitconfirm"><strong>';
            submitConfirm += notes_i18n.translate('Reply successful, <a %s>view thread</a>').fetch('target="_blank" href="' + commentPermalink + '"');
            submitConfirm += '</strong></p>';
            return $('.selected .wpn-note-body').append(submitConfirm);
          });
        };
        if (this.model.get('status').approval_status !== 'approved') {
          return this.modComment('approve-comment').done(doSend);
        } else {
          return doSend();
        }
      },
      errorReply: function(r) {
        var comment_reply_el, er, o;
        er = r;
        if (typeof r === 'object') {
          if (r.responseText) {
            o = $.parseJSON(r.responseText);
            er = o.error + ': ' + o.message;
          } else if (r.statusText) {
            er = r.statusText;
          } else {
            er = 'Unknown Error';
          }
        }
        comment_reply_el = this.$el.children('.wpn-note-comment-reply');
        comment_reply_el.children('.wpn-comment-submit').children('.wpn-comment-submit-waiting').hide();
        if (er) {
          return comment_reply_el.children('.wpn-comment-submit').children('.wpn-comment-submit-error').text(er).show();
        }
      },
      clickModComment: function(ev) {
        if (ev) {
          ev.preventDefault();
        } else {
          return $.Deferred.reject('invalid click event');
        }
        return this.modComment($(ev.currentTarget).data('action-type'));
      },
      modComment: function(actionType) {
        var moderating,
          _this = this;
        this.$('.wpn-comment-mod-waiting').show().gifspin('small');
        moderating = $.Deferred().always(function() {
          return _this.$('.wpn-comment-mod-waiting').empty().hide();
        }).fail(function(error, code) {
          if ((typeof console !== "undefined" && console !== null) && typeof console.error === 'function') {
            console.error('Comment moderation error');
            if (error) {
              console.error(error);
            }
          }
          if (!code || code !== 'too_soon') {
            return _this.model.reload();
          }
        });
        if (this.modPromise && typeof this.modPromise.state === 'function' && this.modPromise.state() === 'pending') {
          moderating.always(function() {
            return _this.$('.wpn-comment-mod-waiting').show().gifspin('small');
          });
          return moderating.reject('Moderation already in progress', 'too_soon');
        }
        this.modPromise = moderating.promise();
        if (!actionType || !actionType.length || !_.contains(this.getValidActions(), actionType)) {
          return moderating.reject('Invalid actionType');
        }
        $.Deferred(function() {
          var action, anticipatedNewStatus;
          wpNotesCommon.bumpStat('notes-click-action', actionType);
          action = _this.actionsByName[actionType];
          if (!action) {
            return moderating.reject('Undefined action params for type: ' + actionType);
          }
          anticipatedNewStatus = _this.getResultantStatus(actionType);
          if (anticipatedNewStatus) {
            _this.model.set('status', $.extend({}, _this.model.get('status'), {
              approval_status: anticipatedNewStatus
            }));
            _this.$('.wpn-comment-mod-waiting').show().gifspin('small');
          }
          return wpNotesCommon.ajax({
            type: 'POST',
            path: action.rest_path,
            data: action.rest_body
          }).done(function(r) {
            var rStatus;
            rStatus = (r != null ? r.status : void 0) ? r.status : 'undefined';
            if (_.contains(_this.possibleStatuses, rStatus)) {
              _this.model.set('status', $.extend({}, _this.model.get('status'), {
                approval_status: rStatus
              }));
              _this.model.blockReloading(15);
              return moderating.resolve();
            } else {
              return moderating.reject('Invalid status: "' + rStatus + '" received from moderation POST');
            }
          }).fail(function(error) {
            return moderating.reject(error);
          });
        });
        return this.modPromise;
      },
      clickLikeComment: function(ev) {
        var $button, actionType;
        ev.preventDefault();
        $button = $(ev.currentTarget);
        actionType = $button.data('action-type');
        return this.likeComment(actionType);
      },
      likeComment: function(actionType) {
        var action, i_liked, rest_path,
          _this = this;
        action = this.actionsByName[actionType];
        if ('like-comment' === actionType) {
          i_liked = true;
          rest_path = action.rest_path + 'new/';
        } else {
          i_liked = false;
          rest_path = action.rest_path + 'mine/delete/';
        }
        this.model.set('status', $.extend({}, this.model.get('status'), {
          i_liked: i_liked
        }));
        this.$('.wpn-comment-mod-waiting').show().gifspin('small');
        return wpNotesCommon.ajax({
          type: 'POST',
          path: rest_path
        }).done(function(r) {
          return _this.$('.wpn-comment-mod-waiting').empty().hide();
        });
      }
    });
})(jQuery);

(function() {
  (function(window, $) {
    /*
    	 * Show an animated gif spinner
    	 * Replaces the contents of the selected jQuery elements with the image
    */

    return $.fn.gifspin = function(size) {
      var $el, $spinner, len;
      $el = $(this);
      if (_.isFinite(size) && size > 0) {
        len = Math.min(~~size, 128);
      } else {
        switch (size) {
          case 'tiny':
            len = 8;
            break;
          case 'small':
            len = 16;
            break;
          case 'medium':
            len = 32;
            break;
          case 'large':
            len = 64;
            break;
          default:
            len = 128;
        }
      }
      $spinner = $('<img class="gifspinner" src="//s0.wp.com/wp-content/mu-plugins/notes/images/loading.gif" />');
      $spinner.css({
        height: len,
        width: len
      });
      $el.html($spinner);
      return $el;
    };
  })(typeof exports !== "undefined" && exports !== null ? exports : this, window.jQuery);

}).call(this);
;
(function($){
	var wpNotesCommon = window.wpNotesCommon,
		wpNoteList = window.wpNoteList,
		Mustache = window.Mustache,
		Gravatar = window.Gravatar,
		DashListView,
		wpDashNoteListView,
		wpDashNoteSummaryView,
		wpDashBodyView;

	$(window)
		.on( 'initialize.notifications', function() {
			DashListView = new wpDashNoteListView();
		})
		.on( 'destroy.notifications', function() {
			$(window).off( 'resize.notifications' );
			DashListView.unbindScroll();
			DashListView = null;
		})
	;

	wpDashNoteListView = Backbone.View.extend({
		el:   '#wpnd-notes-content',
		list_el: '#wpnd-notes-list',
		btn_list:  '#wpnd-btn-list',
		activeFilter:      'latest',
		collection:              {},
		oldestTimesByType:       {},
		newestTimesByType:       {},
		screenHeight:             0,
		toolbarHeight:            0,
		topOfLastNote:            0,
		topOfList:                0,
		lastScroll:               0,
		topOfButtons:             0,
		bodyTop:                  0,
		bodyLeft:                 0,
		lastLoad:                 0,
		markedSeen:           false,

		initialize: function() {
			var t = this,
				before,
				headerHeight;

			if ( ! ( typeof t.collection === 'object' && t.collection.hasOwnProperty( 'models' ) ) ) {
				t.collection = new wpNoteList();
			}

			t.$list_el = $( t.list_el );
			t.$btn_list = $( t.btn_list );
			t.isRtl = $('#wpadminbar').hasClass('rtl');

			t.selectFilterButton( t.activeFilter );

			before = 0;
			
			t.screenHeight = $(window).height();
			t.toolbarHeight = $( '#wpadminbar' ).height();
			t.topOfList = $( '#wpnd-notes-list' ).offset().top;

			_.bindAll( this, 'renderNotes', 'renderNote', 'clearNotes', 'applyFilter', 'loadOlder', 'loadMoreNotes', 'bindScroll' );

			// event handlers
			t.collection
				.on( 'add', function( note ) {
					t.renderNote( note );
				})
				.on( 'remove', function( note ) {
					t.removeNote( note );
				})
				.on( 'change', function( note ) {
					t.collection.sort();
					t.renderNote( note );
				})
				.on( 'loadNotes:beginLoading', function() {
					t.spin();
				})
				.on( 'loadNotes:endLoading', function() {
					t.showPromptIfEmpty();
					if ( 'latest' === t.activeFilter && ! t.markedSeen ) {
						t.markAsSeen();
						t.markedSeen = true;
					}
					t.unspin();
				})
			;

			headerHeight = $( '#notifications #wpnd-head' ).height();
			t.topOfButtons = t.$btn_list.offset().top - headerHeight - t.toolbarHeight - parseFloat( t.$btn_list.css('marginTop').replace( /auto/, 0 ) );
	
			t.collection.loadNotes( { number: 20, fields: 'id,type,unread,noticon,subject,body,timestamp,meta,status', type: 'latest' } );
			t.lastLoad = 0;

			$( '#notifications #wpnd-sidebar #wpnd-btn-list a' ).on( 'click.notifications', function() {
				var f = $(this).data('filter');
				if ( f === 'trophy' ) {
					$( 'html, body' ).animate( { scrollTop: 0 }, 'fast' );
					return true;
				}
				t.applyFilter( f );
				wpNotesCommon.bumpStat( 'notes-dash-click-filter', f );
			});

			t.bindScroll();

			// Hack to make middle column 100% high, @todo: make unnecessary
			$('#notifications').before('<div class="middle-column"></div>');

			// Prevent body from scrolling when mouse over scrollable div in right column
			$('#wpnd-note-body-content').bind('mousewheel DOMMouseScroll', function(e) {
			
				var isMobile = $('#wpnd-note-body-col').css('position') === 'static',
					scrollTo;
				
				// Only scroll when a note is open and has scrollbar
				if ( $('.wpn-note-body').length && !isMobile && ( $('.wpn-note-body').outerHeight() >= ( $(window).height() - 46 ) ) ) {
				
					scrollTo = null;
					
					if ( e.type === 'mousewheel' ) {
						scrollTo = (e.originalEvent.wheelDelta * -1);
					} else if ( e.type === 'DOMMouseScroll' ) {
						scrollTo = 40 * e.originalEvent.detail;
					}
					
					if (scrollTo) {
						e.preventDefault();
						$(this).scrollTop(scrollTo + $(this).scrollTop());
					}
				}
				
			});

		},

		renderNotes: function( notes ) {
			var t = this;
			_.each( notes, function( note ) {
				t.renderNote( note );
			});
		},

		renderNote: function( note ) {
			var t = this,
				typeName,
				noteAbove,
				$noteAbove,
				ts,
				qt,
				eligibleTypes,
				view,
				$renderedNotes,
				rlen,
				index,
				notes_in_filter,
				newer_notes,
				$noteBody;

			if ( typeof note.get( 'subject' ) !== 'object'  ) {
				t.collection.remove( note.get( 'id' ) );
				return;
			}
			// don't render notes not in the current view
			switch( t.activeFilter ){
				case 'latest':
					qt = note.get( 'queried_types' ) || {};
					if ( 'undefined' === typeof qt.latest || ! qt.latest ) {
						return;
					}
					break;
				case 'unread':
					if ( ! parseInt( note.get( 'unread' ), 10 ) ) {
						return;
					}
					break;
				case 'trophy':
					typeName = note.get( 'type' );
					if ( _.indexOf( wpNotesCommon.noteTypes.trophy, typeName ) !== -1 ) {
						break;
					}
					return;
				case note.get( 'type' ):
					break;
				default:
					if ( t.activeFilter in wpNotesCommon.noteTypes ) {
						typeName = note.get( 'type' );
						eligibleTypes = wpNotesCommon.noteTypes[ t.activeFilter ];
						if ( _.indexOf( eligibleTypes, typeName ) !== -1 ) {
							break;
						}
					}
					return;
			}

			view = new wpDashNoteSummaryView({ model: note });
			view.render();
			$renderedNotes = t.$list_el.find( '.wpn-note' );
			rlen = $renderedNotes.length;

			if ( t.activeFilter === 'latest' ) {
				index = t.collection.indexOf( note );
				if ( index === 0 ) {
					t.$list_el.prepend( view.$el );
				}
				else if ( index === t.collection.length - 1 ) {
					t.$list_el.append( view.$el );
				}
				else {
					noteAbove = t.collection.at( index - 1 );
					if ( typeof noteAbove === 'object' && 'undefined' !== typeof noteAbove.id ) {
						$noteAbove = t.$list_el.find( '#wpnd-note-' + noteAbove.id  );
						$noteAbove.after( view.$el );
					}
					else {
						t.$list_el.append( view.$el );
					}
				}
			}
			else {
				if ( rlen === 0 ) {
					t.$list_el.prepend( view.$el );
				}
				else {
					ts = note.get('timestamp');
					notes_in_filter = t.collection.getNotesOfType( t.activeFilter );
					newer_notes = _.filter( notes_in_filter, function(n) {
						return n.get('timestamp') > ts;
					});
					noteAbove = _.last( newer_notes ) || [];
					if ( noteAbove.length ) {
						$noteAbove = t.$list_el.find( '#wpnd-note-' + noteAbove.id  );
					}
					else {
						$noteAbove = $renderedNotes.filter( ':last' );
					}
					if ( $noteAbove.length ) {
						$noteAbove.after( view.$el );
					}
					else {
						t.$list_el.prepend( view.$el );
					}
				}
			}
			$noteBody = $( '#wpnd-note-body-content' );
			if ( $noteBody.is( ':visible' ) && $noteBody.data( 'id' ) === note.id ) {
				$( '#wpnd-note-' + note.id ).addClass( 'selected' );
			}

			ts = parseInt( note.get('timestamp'), 10 );
			if ( 'number' !== typeof t.oldestTimesByType[ t.activeFilter ] || ts < t.oldestTimesByType[ t.activeFilter ] ) {
				t.oldestTimesByType[ t.activeFilter ] = ts;
			}
			if ( 'number' !== typeof t.newestTimesByType[ t.activeFilter ] || ts > t.newestTimesByType[ t.activeFilter ] ) {
				t.newestTimesByType[ t.activeFilter ] = ts;
			}

			t.topOfLastNote = ( 1 > rlen ) ? 0 : $renderedNotes.last().offset().top;
			view.bindNoteClick();
		},

		removeNote: function( note ) {
			this.$list_el.find( '#wpnd-note-' + note.id  ).remove();
		},

		clearNotes: function() {
			this.$list_el.empty();
			return this;
		},

		showPromptIfEmpty: function() {
			var t = this;
			if ( t.$list_el.find( '.wpn-note' ).length > 0 ) {
				t.hidePrompt();
				return;
			}
			$( '#wpnd-summary-prompt' ).css( 'display', 'table-cell' );
		},

		hidePrompt: function() {
			$( '#wpnd-summary-prompt' ).css( 'display', 'none' );
		},

		applyFilter: function( filter ) {
			var t = this;
			t.unbindScroll();
			$('#wpnd-note-body-content').css( 'display', 'none' ).empty().removeClass();
			$( '#wpnd-notes-list .wpn-note.selected' ).each( function() {
				$(this).removeClass( 'selected' );
			});
			if ( filter !== t.activeFilter ){
				t.hidePrompt();
				t.activeFilter = filter;
				t.selectFilterButton( t.activeFilter );
				t.clearNotes();
				t.renderNotes( t.collection.getNotesOfType( t.activeFilter ) );
				t.lastLoad = 0;
				t.loadOlder( true );
				$('#wpnd-notes-list').children('div:first').find( '.wpn-note-summary' ).click();
			}
			$.when( $( 'html, body' ).animate( { scrollTop: 0 }, 'fast' ) ).then( t.bindScroll() );
		},

		loadOlder: function( force ) {
			var t = this,
				time,
				args;

			if ( 'number' === typeof t.oldestTimesByType[ t.activeFilter ] && 0 < t.oldestTimesByType[ t.activeFilter ] ) {
				time = t.oldestTimesByType[ t.activeFilter ];
			}
			else {
				time = _.min( t.collection.pluck( 'timestamp' ) );
			}
			args = { before: time, number: 16, fields: 'id,type,unread,noticon,subject,body,timestamp,meta,status' };
			t.loadMoreNotes( args, force );
		},

		loadMoreNotes: function( args, force ) {
			var t = this,
				now = parseInt( new Date().getTime() / 1000, 10 );

			force = 'undefined' !== typeof force && force;
			if ( force || ( ! t.collection.loading && t.lastLoad < now - 2 ) ) {
				if ( t.activeFilter === 'unread' ) {
					args.unread = true;
				}
				args.type = t.activeFilter;

				this.collection.loadNotes( args );
				t.lastLoad = parseInt( new Date().getTime() / 1000, 10 );
				wpNotesCommon.bumpStat( 'notes-dash-loadMore', t.activeFilter );
			}
		},

		markAsSeen: function() {
			this.collection.markNotesSeen();
			$( '#wpnt-notes-unread-count' ).removeClass( 'wpn-unread' ).addClass( 'wpn-read' );
		},

		selectFilterButton: function( filter ) {
			var t = this;
			t.$btn_list.find( '.button' ).removeClass( 'selected' );
			$( '#wpnd-view-' + filter ).addClass( 'selected' );
		},

		bindScroll: function() {
			var t = this;

			$(window).on( 'scroll.notifications', function() {
				var scrollTop = $(window).scrollTop(),
					docHeight = $(document).height(),
					winHeight = $(window).height();
				
				if ( t.topOfLastNote > 0 && ( scrollTop >= docHeight - winHeight - ( ( docHeight - winHeight ) * 0.2 ) ) ) {
					t.loadOlder();
				}

				t.lastScroll = scrollTop;

				if ( scrollTop >= t.topOfButtons ) {
					t.$btn_list.addClass( 'fixed' );
				}
				else {
					t.$btn_list.removeClass( 'fixed' );
				}
			});
		},

		unbindScroll: function() {
			$(window).off( 'scroll.notifications' );
		},

		spin: function() {
			this.unspin();
			
			$('#wpnd-notes-list').append( '<div id="wpnd-loading"></div>' );
		},
		
		unspin: function() {
			$( '#wpnd-loading' ).remove();
		}
	});

	wpDashNoteSummaryView = Backbone.View.extend({
		template: '\
			<div id="wpnd-note-{{id}}" class="wpn-note wpn-{{type}} {{#unread}}wpn-unread{{/unread}}" \
				data-timestamp="{{timestamp}}" data-id="{{id}}"> \
				<div class="wpn-note-summary"> \
					<span class="wpn-noticon noticon noticon-{{noticon}}"></span> \
					<span class="wpn-icon"> \
						<img src="{{subject.icon}}" /> \
					</span> \
					<span class="wpn-subject"> \
						{{{subject.html}}} \
					</span> \
				</div> \
			</div> \
		',

		initialize: function() {
			_.bindAll( this, 'render', 'bindNoteClick' );
		},
		
		render: function( ) {
			var note = this.model,
				noteObj = note.toJSON();

			$( '#wpnd-note-' + note.id ).remove();
			noteObj.unread = Boolean( parseInt( noteObj.unread, 10 ) );
			this.bodyView = null;
			this.setElement( Mustache.render( this.template, noteObj ) );
			return this;
		},

		bindNoteClick: function() {
			var note = this.model,
				$note = $( '#wpnd-note-' + note.id ),
				$summary = $note.find( '.wpn-note-summary' );

			$summary.click( function() {
				var was_selected = $note.hasClass( 'selected' );
				$( '#wpnd-notes-list .wpn-note.selected' ).each( function() {
					$(this).removeClass( 'selected' );
				});
				this.bodyView = new wpDashBodyView({ model: note });

				if ( ! was_selected ) {
					$note.addClass( 'selected' );
					note.loadBody();
					this.bodyView.render();
					$note.removeClass( 'wpn-unread' );
					note.markRead();
					note.set( { unread: false }, { silent: true } );
					wpNotesCommon.bumpStat( 'notes-click-type', note.get( 'type' ) );
				}
				else {
					this.bodyView.unrender();
				}
			});
		}
	});

	wpDashBodyView = Backbone.View.extend({
		el: '#wpnd-note-body-content',
		noteBody: null,

		initialize: function() {
			var t = this;
			_.bindAll( this, 'render', 'unrender' );
			t.noteBody = wpNotesCommon.createNoteBody( t.model );
			$(window)
				.off( 'resize.notifications' )
				.on( 'resize.notifications', function() {
					if ( t.$el.is(':visible') ) {
						t.$el.css( 'top', t.getTop() );
					}
				})
			;
		},
		
		render: function() {
			var t = this;
			t.unrender();
			t.$el.append( t.noteBody );
			t.$el
				.data( 'id', t.model.id )
				.addClass( 'wpn-' + t.model.get( 'type' ) )
				.css({
					display: 'inline',
					top: t.getTop()
				})
			;

			try {
				Gravatar.attach_profiles( '#' + t.$el.attr('id') );
			}
			catch ( error ){}
		},

		unrender: function() {
			this.$el.css( 'display', 'none' ).empty().removeClass();
		},

		getTop: function() {
			var t = this,
				$summary = $( '#wpnd-note-' + t.model.id ),
				$wrapper = $( '#wpnd-notes-content' ),
				ceil = 0,
				elHeight,
				floor,
				topValign;

			//if the screen is wide enough vertically align the body on the summary
			if ( $wrapper.width() > $summary.width() + t.$el.width() ) {
				elHeight = t.$el.outerHeight();
				floor = ceil + $wrapper.outerHeight();
				topValign = $summary.position().top - ceil - ( elHeight / 2 ) + ( $summary.height() / 2 );

				// if note is too tall, don't center vertically
				if ( elHeight > 364 && ( floor < topValign + elHeight !== true ) ) {
					elHeight = 364;
				}
				if ( $summary.position().top > elHeight / 2 ) {
					if ( floor < topValign + elHeight ) {
						return floor - elHeight;
					}
					else if ( topValign > ceil ) {
						return topValign;
					}
				}
				else {
					return 0;
				}
			}
			else {
				return ( $(window).width() > 640 ) ? $summary.position().top : $summary.position().top + $summary.height();
			}
		}
	});
})(jQuery);
;
if ( 'undefined' == typeof wpcom ) {
	wpcom = {};
}
if ( 'undefined' == typeof wpcom.events ) {
	wpcom.events = _.extend( {}, Backbone.Events );
}
(function($) {
	var wpNotesArgs = window.wpNotesArgs || {},
		cacheBuster = wpNotesArgs.cacheBuster || (function() {
			var today = new Date();
			return today.getFullYear() + ( '0' + ( 1 + today.getMonth() ) ).slice( -2 ) + ( '0' + today.getDate() ).slice( -2 );
		})(),
		iframeUrl = wpNotesArgs.iframeUrl || 'https://widgets.wp.com/notes/',
		iframeAppend = wpNotesArgs.iframeAppend || '',
		iframeScroll = wpNotesArgs.iframeScroll || "no",
		wideScreen = wpNotesArgs.wide || false;
	
	if ( ( $( '#wpnt-notes-panel' ).length == 0 && $( '#wpnt-notes-panel2' ).length ) &&
			( 'undefined' != typeof wpNotesIsJetpackClientV2 && wpNotesIsJetpackClientV2 ) ) {
		iframeUrl = 'https://widgets.wp.com/notifications/';
		iframeAppend = '2';
		iframeScroll = 'yes';
	}

	var iframePanelId = "wpnt-notes-panel" + iframeAppend;
	var iframeFrameId = "wpnt-notes-iframe" + iframeAppend;

	$(function(){
		new wpntView();
	});

	var wpntView = Backbone.View.extend({
		el: '#wp-admin-bar-notes',
		hasUnseen: null,
		initialLoad: true,
		count: null,
		iframe: null,
		iframeWindow: null,
		messageQ: [],
		iframeSpinnerShown: false,
		isJetpack: false,
		linkAccountsURL: false,
		currentMasterbarActive: false,

		initialize: function() {
			var t = this;

			// graceful fallback for IE <= 7
			var matches = navigator.appVersion.match( /MSIE (\d+)/ );
			if ( matches && parseInt( matches[1], 10 ) < 8 ) {
				var $panel = t.$( '#'+iframePanelId );
				var $menuItem = t.$( '.ab-empty-item' );
				if ( !$panel.length || !$menuItem.length ) {
					return;
				}
				var offset = t.$el.offset();

				t.$( '.ab-item' ).removeClass( 'ab-item' );
				t.$( '#wpnt-notes-unread-count' ).html( '?' );

				// @todo localize
				$panel.html( ' \
					<div class="wpnt-notes-panel-header"><p>Notifications are not supported in this browser!</p> </div> \
					<img src="http://i2.wp.com/wordpress.com/wp-content/mu-plugins/notes/images/jetpack-notes-2x.png" /> \
					<p class="wpnt-ie-note"> \
					Please <a href="http://browsehappy.com" target="_blank">upgrade your browser</a> to keep using notifications. \
					</p>'
				).addClass( 'browse-happy' );

				t.$el.on( 'mouseenter', function(e) {
					clearTimeout( t.fadeOutTimeout );
					if ( $panel.is( ':visible:animated' ) ) {
						$panel.stop().css( 'opacity', '' );
					}
					$menuItem.css({ 'background-color': '#eee' });
					$panel.show();
				});

				t.$el.on( 'mouseleave', function() {
					t.fadeOutTimeout = setTimeout( function() {
						clearTimeout( t.fadeOutTimeout );
						if ( $panel.is( ':animated' ) ) {
							return;
						}
						$panel.fadeOut( 250, function() {
							$menuItem.css({ 'background-color': 'transparent' });
						});
					}, 350 );
				});

				return;
			}

			// don't break notifications if jquery.spin isn't available
			if ( 'function' != typeof $.fn.spin ) {
				$.fn.spin = function(x){};
			}
			this.isRtl = $('#wpadminbar').hasClass('rtl');
			this.count = $('#wpnt-notes-unread-count');
			this.panel = $( '#'+iframePanelId );
			this.hasUnseen = this.count.hasClass( 'wpn-unread' );
			if ( 'undefined' != typeof wpNotesIsJetpackClient && wpNotesIsJetpackClient )
				t.isJetpack = true;
			if ( t.isJetpack && 'undefined' != typeof wpNotesLinkAccountsURL )
				t.linkAccountsURL = wpNotesLinkAccountsURL;

			this.$el.children('.ab-item').click(function(e){
				e.preventDefault();
				t.togglePanel();

				return false;
			});

			this.preventDefault = function(e) {
				if (e) e.preventDefault();
				return false;
			};

			if ( iframeAppend == '2' ) {
				// Disable scrolling on main page when cursor in notifications
				this.panel.mouseenter( function() {
					document.body.addEventListener( 'mousewheel', t.preventDefault );
				});
				this.panel.mouseleave( function() {
					document.body.removeEventListener( 'mousewheel', t.preventDefault );
				});

				if ( typeof document.hidden !== 'undefined' ) {
					document.addEventListener( 'visibilitychange', function() {
						t.postMessage( { action: "toggleVisibility", hidden: document.hidden } );
					} );
				}
			}

			// Click outside the panel to close the panel.
			$(document).bind( "mousedown focus", function(e) {
				var $clicked;

				// Don't fire if the panel isn't showing
				if ( ! t.showingPanel )
					return true;

				$clicked = $(e.target);

				/**
				 * Don't fire if there's no real click target
				 * Prevents Firefox issue described here: http://datap2.wordpress.com/2013/08/15/running-in-to-some-strange/
				 */
				if ( $clicked.is( document ) )
					return true;

				// Don't fire on clicks in the panel.
				if ( $clicked.closest( '#wp-admin-bar-notes' ).length )
					return true;

				t.hidePanel();
				return false;
			});

			$(document).on( 'keydown.notes', function (e) {
				var keyCode = wpNotesCommon.getKeycode( e );
				if ( !keyCode )
					return;

				if ( ( keyCode == 27 ) ) //ESC close only
					t.hidePanel();
				if ( ( keyCode == 78 ) ) //n open/close
					t.togglePanel();

				//ignore other commands if the iframe hasn't been loaded yet
				if ( this.iframeWindow === null )
					return;

				if ( t.showingPanel && ( ( keyCode == 74 ) || ( keyCode == 40  ) ) ) { //j and down arrow
					t.postMessage( { action:"selectNextNote" } );
					return false; //prevent default
				}
				if ( t.showingPanel && ( ( keyCode == 75 ) || ( keyCode == 38  ) ) ) { //k and up arrow
					t.postMessage( { action:"selectPrevNote" } );
					return false; //prevent default
				}

				if ( t.showingPanel && ( ( keyCode == 82 ) || ( keyCode == 65  ) ||
					( keyCode == 83  ) || ( keyCode == 84  ) ) ) { //mod keys (r,a,s,t) to pass to iframe
					t.postMessage( { action:"keyEvent", keyCode: keyCode } );
					return false; //prevent default
				}
			});

			wpcom.events.on( 'notes:togglePanel', function() {
					t.togglePanel();
				} );

			if ( t.isJetpack )
				t.loadIframe();
			else {
				setTimeout(function() {
					t.loadIframe();
				}, 3000);
			}

			if ( t.count.hasClass( 'wpn-unread' ) )
				wpNotesCommon.bumpStat( 'notes-menu-impressions', 'non-zero' );
			else
				wpNotesCommon.bumpStat( 'notes-menu-impressions', 'zero' );

			// listen for postMessage events from the iframe
			$(window).on( 'message', function( event ) {
				if ( !event.data && event.originalEvent.data ) {
					event = event.originalEvent;
				}
				if ( event.origin != 'https://widgets.wp.com' ) {
					return;
				}
				try {
					var data = ( 'string' == typeof event.data ) ? JSON.parse( event.data ) : event.data;

					if ( data.type != 'notesIframeMessage' ) {
						return;
					}
					t.handleEvent( data );
				} catch(e){}
			});
		},

		// Done this way, "this" refers to the wpntView object instead of the window.
		handleEvent: function( event ) {

			var inNewdash = ( 'undefined' !== typeof wpcomNewdash && 'undefined' !== typeof wpcomNewdash.router && 'undefined' !== wpcomNewdash.router.setRoute );

			if ( !event || !event.action ) {
				return;
			}
			switch ( event.action ) {
				case "togglePanel":
					this.togglePanel();
					break;
				case "render":
					this.render( event.num_new, event.latest_type );
					break;
				case "renderAllSeen":
					this.renderAllSeen();
					break;
				case "iFrameReady":
					this.iFrameReady(event);
					break;
				case "goToNotesPage":
					if ( inNewdash ) {
						wpcomNewdash.router.setRoute( '/notifications' );
					} else {
						window.location.href = '//wordpress.com/notifications/';
					}
					break;
				case "widescreen":
					var iframe = $( '#'+iframeFrameId );
					if ( event.widescreen && ! iframe.hasClass( 'widescreen' ) ) {
						iframe.addClass( 'widescreen' );
					} else if ( ! event.widescreen && iframe.hasClass( 'widescreen' ) ) {
						iframe.removeClass( 'widescreen' );
					}
					break;
			}
		},

		render: function( num_new, latest_type ) {
			var t = this, flash = false;

			if ( ( false === this.hasUnseen ) && ( 0 === num_new ) )
				return;

			//assume the icon is correct on initial load, prevents fading in and out for no reason
			if ( this.initialLoad && this.hasUnseen && ( 0 !== num_new ) ) {
				this.initialLoad = false;
				return;
			}

			if ( ! this.hasUnseen && ( 0 !== num_new ) ) {
				wpNotesCommon.bumpStat( 'notes-menu-impressions', 'non-zero-async' );
			}

			var latest_icon_type = wpNotesCommon.noteType2Noticon[ latest_type ];
			if ( typeof latest_icon_type == 'undefined' )
				latest_icon_type = 'notification';

			var latest_img_el = $('<span/>', {
				'class' : 'noticon noticon-' + latest_icon_type + ''
			});

			var status_img_el = this.getStatusIcon( num_new );

			if ( 0 === num_new || this.showingPanel ) {
				this.hasUnseen = false;
				t.count.fadeOut( 200, function() {
					t.count.empty();
					t.count.removeClass('wpn-unread').addClass('wpn-read');
					t.count.html( status_img_el );
					t.count.fadeIn( 500 );
				} );

				if ( wpcom && wpcom.masterbar ) {
					wpcom.masterbar.hasUnreadNotifications( false );
				}
			} else {
				if ( this.hasUnseen ) {
					// Blink the indicator if it's already on
					t.count.fadeOut( 400, function() {
						t.count.empty();
						t.count.removeClass('wpn-unread' ).addClass('wpn-read');
						t.count.html( latest_img_el );
						t.count.fadeIn( 400 );
					} );
				}
				this.hasUnseen = true;
				t.count.fadeOut( 400, function() {
					t.count.empty();
					t.count.removeClass('wpn-read').addClass('wpn-unread');
					t.count.html( latest_img_el );
					t.count.fadeIn( 400, function() { });
				});

				if ( wpcom && wpcom.masterbar ) {
					wpcom.masterbar.hasUnreadNotifications( true );
				}
			}
		},

		renderAllSeen: function() {
			var img_el = this.getStatusIcon(0);
			this.count.removeClass('wpn-unread').addClass('wpn-read');
			this.count.empty();
			this.count.html( img_el );
			this.hasUnseen = false;

			if ( wpcom && wpcom.masterbar ) {
				wpcom.masterbar.hasUnreadNotifications( false );
			}
		},

		getStatusIcon: function( number ) {
			var new_icon = '';
			switch ( number ) {
				case 0:
					new_icon = 'noticon noticon-notification';
					break;
				case 1:
					new_icon = 'noticon noticon-notification';
					break;
				case 2:
					new_icon = 'noticon noticon-notification';
					break;
				default:
					new_icon = 'noticon noticon-notification';
			}

			return $('<span/>', {
				'class' : new_icon
			});
		},

		togglePanel: function() {
			var t = this;
			// temp hack until 3.3 merge to highlight toolbar number
			//this.$el.removeClass('wpnt-stayopen');
			this.$el.toggleClass('wpnt-stayopen');
			this.$el.toggleClass('wpnt-show');
			this.showingPanel = this.$el.hasClass('wpnt-show');
			this.loadIframe();

			if ( this.showingPanel ) {
				var $unread = this.$( '.wpn-unread' );
				if ( $unread.length ) {
					$unread.removeClass( 'wpn-unread' ).addClass( 'wpn-read' );
				}
				this.reportIframeDelay();
				if ( this.hasUnseen )
					wpNotesCommon.bumpStat( 'notes-menu-clicks', 'non-zero' );
				else
					wpNotesCommon.bumpStat( 'notes-menu-clicks', 'zero' );

				this.hasUnseen = false;
			}
			// tell the iframe we are opening it
			this.postMessage( { action:"togglePanel", showing:this.showingPanel } );
			if ( this.showingPanel ) {
				this.iframe[0].contentWindow.focus();
				setTimeout( function() { t.iframe[0].contentWindow.focus(); }, 50 );
			} else {
				window.focus();
			}

			this.setActive( this.showingPanel );
		},

		// Handle juggling the .active state of the masterbar
		setActive: function( active ) {
			if ( active ) {
				this.currentMasterbarActive = $( '.masterbar li.active' );
				this.currentMasterbarActive.removeClass( 'active' );
				this.$el.addClass( 'active' );
			} else {
				this.$el.removeClass( 'active' );
				this.currentMasterbarActive.addClass( 'active' );
				this.currentMasterbarActive = false;
			}
			this.$el.find( 'a' ).first().blur();
		},

		loadIframe: function() {
			var t = this,
				args = [],
				src,
				lang,
				queries,
				panelRtl;

			if ( t.iframe === null ) {
				// Removed spinner here because it shows up so briefly, and is replaced by the iframe spinner in a different spot
				// t.panel.addClass('loadingIframe').find('.wpnt-notes-panel-header').spin('large');
				t.panel.addClass('loadingIframe');

				if ( t.isJetpack ) {
					args.push( 'jetpack=true' );
					if ( t.linkAccountsURL ) {
						args.push( 'link_accounts_url=' + escape( t.linkAccountsURL ) );
					}
				}

				// Attempt to detect if browser is a touch device, similar code
				// in Calypso. The class adds CSS needed for mobile Safari to allow
				// scrolling of iframe.
				if (('ontouchstart' in window) || window.DocumentTouch && document instanceof DocumentTouch) {
					t.panel.addClass( 'touch' );
				}

				panelRtl = $( '#'+iframePanelId ).attr( 'dir' ) == 'rtl';
				lang = $( '#'+iframePanelId ).attr( 'lang' ) || 'en';
				args.push( 'v=' + cacheBuster );
				args.push( 'locale=' + lang );
				queries = ( args.length ) ? '?' + args.join( '&' ) : '';
				src = iframeUrl;
				if ( iframeAppend == '2' && ( t.isRtl || panelRtl ) && ! /rtl.html$/.test(iframeUrl) ) {
					src = iframeUrl + 'rtl.html';
				}
				src = src + queries + '#' + document.location.toString();
				if ( $( '#'+iframePanelId ).attr( 'dir' ) == 'rtl' ) {
					src += '&rtl=1';
				}
				if ( !lang.match( /^en/ ) ) {
					src += ( '&lang=' + lang );
				}

				// Add the iframe (invisible until iFrameReady)
				t.iframe = $('<iframe style="display:none" id="' +iframeFrameId+ '" frameborder=0 ALLOWTRANSPARENCY="true" scrolling="' +iframeScroll+ '"></iframe>');
				t.iframe.attr( 'src', src );
				if ( wpNotesArgs.wide ) {
					t.panel.addClass( 'wide' );
					t.iframe.addClass( 'wide' );
				}

				t.panel.append(t.iframe);
			}
		},

		reportIframeDelay: function() {
			if ( !this.iframeWindow ) {
				if ( !this.iframeSpinnerShown )
					this.iframeSpinnerShown = (new Date()).getTime();
				return;
			}
			if ( this.iframeSpinnerShown !== null ) {
				var delay = 0;
				if ( this.iframeSpinnerShown )
					delay = (new Date()).getTime() - this.iframeSpinnerShown;
				if ( delay === 0 )
					wpNotesCommon.bumpStat( 'notes_iframe_perceived_delay', '0' );
				else if ( delay < 1000 )
					wpNotesCommon.bumpStat( 'notes_iframe_perceived_delay', '0-1' );
				else if ( delay < 2000 )
					wpNotesCommon.bumpStat( 'notes_iframe_perceived_delay', '1-2' );
				else if ( delay < 4000 )
					wpNotesCommon.bumpStat( 'notes_iframe_perceived_delay', '2-4' );
				else if ( delay < 8000 )
					wpNotesCommon.bumpStat( 'notes_iframe_perceived_delay', '4-8' );
				else
					wpNotesCommon.bumpStat( 'notes_iframe_perceived_delay', '8-N' );
				this.iframeSpinnerShown = null;
			}
		},

		iFrameReady: function(event) {
			var t = this;
			var url_parser = document.createElement( 'a' );
			url_parser.href = this.iframe.get(0).src;
			this.iframeOrigin = url_parser.protocol + '//' + url_parser.host;
			this.iframeWindow = this.iframe.get(0).contentWindow;

			if ( "num_new" in event )
				this.render( event.num_new, event.latest_type );
			this.panel.removeClass('loadingIframe').find('.wpnt-notes-panel-header').remove();
			this.iframe.show();
			if ( this.showingPanel )
				this.reportIframeDelay();

			// detect user activity and trigger a refresh event in the iframe
			$( window ).on( 'focus keydown mousemove scroll', function() {
				// Throttle postMessages since the overhead is pretty high & these events fire a lot
				var now = ( new Date() ).getTime();
				if ( !t.lastActivityRefresh || t.lastActivityRefresh < now - 5000 ) {
					t.lastActivityRefresh = now;
					t.postMessage( { action: "refreshNotes" } );
				}
			} );

			this.sendQueuedMessages();
		},

		hidePanel: function() {
			if ( this.showingPanel ) {
				this.togglePanel();
			}
		},

		postMessage: function( message ) {
			var t = this;
			try{
				var _msg = ( 'string' == typeof message ) ? JSON.parse( message ) : message;
				if ( !_.isObject( _msg ) ) {
					return;
				}

				_msg = _.extend( { type: 'notesIframeMessage' }, _msg );

				var targetOrigin = this.iframeOrigin;
				if ( this.iframeWindow && this.iframeWindow.postMessage ) {
					this.iframeWindow.postMessage( JSON.stringify( _msg ), targetOrigin );
				} else {
					this.messageQ.push( _msg );
				}
			}
			catch(e){}
		},

		sendQueuedMessages: function() {
			var t = this;
			_.forEach( this.messageQ, function( m ) {
				t.postMessage( m );
			} );
			this.messageQ = [];
		}

	});
})(jQuery);
;
/*
 * Thickbox 3.1 - One Box To Rule Them All.
 * By Cody Lindley (http://www.codylindley.com)
 * Copyright (c) 2007 cody lindley
 * Licensed under the MIT License: http://www.opensource.org/licenses/mit-license.php
*/

if ( typeof tb_pathToImage != 'string' ) {
	var tb_pathToImage = thickboxL10n.loadingAnimation;
}

/*!!!!!!!!!!!!!!!!! edit below this line at your own risk !!!!!!!!!!!!!!!!!!!!!!!*/

//on page load call tb_init
jQuery(document).ready(function(){
	tb_init('a.thickbox, area.thickbox, input.thickbox');//pass where to apply thickbox
	imgLoader = new Image();// preload image
	imgLoader.src = tb_pathToImage;
});

//add thickbox to href & area elements that have a class of .thickbox
function tb_init(domChunk){
	jQuery('body').on('click', domChunk, tb_click);
}

function tb_click(){
	var t = this.title || this.name || null;
	var a = this.href || this.alt;
	var g = this.rel || false;
	tb_show(t,a,g);
	this.blur();
	return false;
}

function tb_show(caption, url, imageGroup) {//function called when the user clicks on a thickbox link

	try {
		if (typeof document.body.style.maxHeight === "undefined") {//if IE 6
			jQuery("body","html").css({height: "100%", width: "100%"});
			jQuery("html").css("overflow","hidden");
			if (document.getElementById("TB_HideSelect") === null) {//iframe to hide select elements in ie6
				jQuery("body").append("<iframe id='TB_HideSelect'>"+thickboxL10n.noiframes+"</iframe><div id='TB_overlay'></div><div id='TB_window'></div>");
				jQuery("#TB_overlay").click(tb_remove);
			}
		}else{//all others
			if(document.getElementById("TB_overlay") === null){
				jQuery("body").append("<div id='TB_overlay'></div><div id='TB_window'></div>");
				jQuery("#TB_overlay").click(tb_remove);
				jQuery( 'body' ).addClass( 'modal-open' );
			}
		}

		if(tb_detectMacXFF()){
			jQuery("#TB_overlay").addClass("TB_overlayMacFFBGHack");//use png overlay so hide flash
		}else{
			jQuery("#TB_overlay").addClass("TB_overlayBG");//use background and opacity
		}

		if(caption===null){caption="";}
		jQuery("body").append("<div id='TB_load'><img src='"+imgLoader.src+"' width='208' /></div>");//add loader to the page
		jQuery('#TB_load').show();//show loader

		var baseURL;
	   if(url.indexOf("?")!==-1){ //ff there is a query string involved
			baseURL = url.substr(0, url.indexOf("?"));
	   }else{
	   		baseURL = url;
	   }

	   var urlString = /\.jpg$|\.jpeg$|\.png$|\.gif$|\.bmp$/;
	   var urlType = baseURL.toLowerCase().match(urlString);

		if(urlType == '.jpg' || urlType == '.jpeg' || urlType == '.png' || urlType == '.gif' || urlType == '.bmp'){//code to show images

			TB_PrevCaption = "";
			TB_PrevURL = "";
			TB_PrevHTML = "";
			TB_NextCaption = "";
			TB_NextURL = "";
			TB_NextHTML = "";
			TB_imageCount = "";
			TB_FoundURL = false;
			if(imageGroup){
				TB_TempArray = jQuery("a[rel="+imageGroup+"]").get();
				for (TB_Counter = 0; ((TB_Counter < TB_TempArray.length) && (TB_NextHTML === "")); TB_Counter++) {
					var urlTypeTemp = TB_TempArray[TB_Counter].href.toLowerCase().match(urlString);
						if (!(TB_TempArray[TB_Counter].href == url)) {
							if (TB_FoundURL) {
								TB_NextCaption = TB_TempArray[TB_Counter].title;
								TB_NextURL = TB_TempArray[TB_Counter].href;
								TB_NextHTML = "<span id='TB_next'>&nbsp;&nbsp;<a href='#'>"+thickboxL10n.next+"</a></span>";
							} else {
								TB_PrevCaption = TB_TempArray[TB_Counter].title;
								TB_PrevURL = TB_TempArray[TB_Counter].href;
								TB_PrevHTML = "<span id='TB_prev'>&nbsp;&nbsp;<a href='#'>"+thickboxL10n.prev+"</a></span>";
							}
						} else {
							TB_FoundURL = true;
							TB_imageCount = thickboxL10n.image + ' ' + (TB_Counter + 1) + ' ' + thickboxL10n.of + ' ' + (TB_TempArray.length);
						}
				}
			}

			imgPreloader = new Image();
			imgPreloader.onload = function(){
			imgPreloader.onload = null;

			// Resizing large images - original by Christian Montoya edited by me.
			var pagesize = tb_getPageSize();
			var x = pagesize[0] - 150;
			var y = pagesize[1] - 150;
			var imageWidth = imgPreloader.width;
			var imageHeight = imgPreloader.height;
			if (imageWidth > x) {
				imageHeight = imageHeight * (x / imageWidth);
				imageWidth = x;
				if (imageHeight > y) {
					imageWidth = imageWidth * (y / imageHeight);
					imageHeight = y;
				}
			} else if (imageHeight > y) {
				imageWidth = imageWidth * (y / imageHeight);
				imageHeight = y;
				if (imageWidth > x) {
					imageHeight = imageHeight * (x / imageWidth);
					imageWidth = x;
				}
			}
			// End Resizing

			TB_WIDTH = imageWidth + 30;
			TB_HEIGHT = imageHeight + 60;
			jQuery("#TB_window").append("<a href='' id='TB_ImageOff'><span class='screen-reader-text'>"+thickboxL10n.close+"</span><img id='TB_Image' src='"+url+"' width='"+imageWidth+"' height='"+imageHeight+"' alt='"+caption+"'/></a>" + "<div id='TB_caption'>"+caption+"<div id='TB_secondLine'>" + TB_imageCount + TB_PrevHTML + TB_NextHTML + "</div></div><div id='TB_closeWindow'><a href='#' id='TB_closeWindowButton'><span class='screen-reader-text'>"+thickboxL10n.close+"</span><div class='tb-close-icon'></div></a></div>");

			jQuery("#TB_closeWindowButton").click(tb_remove);

			if (!(TB_PrevHTML === "")) {
				function goPrev(){
					if(jQuery(document).unbind("click",goPrev)){jQuery(document).unbind("click",goPrev);}
					jQuery("#TB_window").remove();
					jQuery("body").append("<div id='TB_window'></div>");
					tb_show(TB_PrevCaption, TB_PrevURL, imageGroup);
					return false;
				}
				jQuery("#TB_prev").click(goPrev);
			}

			if (!(TB_NextHTML === "")) {
				function goNext(){
					jQuery("#TB_window").remove();
					jQuery("body").append("<div id='TB_window'></div>");
					tb_show(TB_NextCaption, TB_NextURL, imageGroup);
					return false;
				}
				jQuery("#TB_next").click(goNext);

			}

			jQuery(document).bind('keydown.thickbox', function(e){
				if ( e.which == 27 ){ // close
					tb_remove();

				} else if ( e.which == 190 ){ // display previous image
					if(!(TB_NextHTML == "")){
						jQuery(document).unbind('thickbox');
						goNext();
					}
				} else if ( e.which == 188 ){ // display next image
					if(!(TB_PrevHTML == "")){
						jQuery(document).unbind('thickbox');
						goPrev();
					}
				}
				return false;
			});

			tb_position();
			jQuery("#TB_load").remove();
			jQuery("#TB_ImageOff").click(tb_remove);
			jQuery("#TB_window").css({'visibility':'visible'}); //for safari using css instead of show
			};

			imgPreloader.src = url;
		}else{//code to show html

			var queryString = url.replace(/^[^\?]+\??/,'');
			var params = tb_parseQuery( queryString );

			TB_WIDTH = (params['width']*1) + 30 || 630; //defaults to 630 if no parameters were added to URL
			TB_HEIGHT = (params['height']*1) + 40 || 440; //defaults to 440 if no parameters were added to URL
			ajaxContentW = TB_WIDTH - 30;
			ajaxContentH = TB_HEIGHT - 45;

			if(url.indexOf('TB_iframe') != -1){// either iframe or ajax window
					urlNoQuery = url.split('TB_');
					jQuery("#TB_iframeContent").remove();
					if(params['modal'] != "true"){//iframe no modal
						jQuery("#TB_window").append("<div id='TB_title'><div id='TB_ajaxWindowTitle'>"+caption+"</div><div id='TB_closeAjaxWindow'><a href='#' id='TB_closeWindowButton'><span class='screen-reader-text'>"+thickboxL10n.close+"</span><div class='tb-close-icon'></div></a></div></div><iframe frameborder='0' hspace='0' src='"+urlNoQuery[0]+"' id='TB_iframeContent' name='TB_iframeContent"+Math.round(Math.random()*1000)+"' onload='tb_showIframe()' style='width:"+(ajaxContentW + 29)+"px;height:"+(ajaxContentH + 17)+"px;' >"+thickboxL10n.noiframes+"</iframe>");
					}else{//iframe modal
					jQuery("#TB_overlay").unbind();
						jQuery("#TB_window").append("<iframe frameborder='0' hspace='0' src='"+urlNoQuery[0]+"' id='TB_iframeContent' name='TB_iframeContent"+Math.round(Math.random()*1000)+"' onload='tb_showIframe()' style='width:"+(ajaxContentW + 29)+"px;height:"+(ajaxContentH + 17)+"px;'>"+thickboxL10n.noiframes+"</iframe>");
					}
			}else{// not an iframe, ajax
					if(jQuery("#TB_window").css("visibility") != "visible"){
						if(params['modal'] != "true"){//ajax no modal
						jQuery("#TB_window").append("<div id='TB_title'><div id='TB_ajaxWindowTitle'>"+caption+"</div><div id='TB_closeAjaxWindow'><a href='#' id='TB_closeWindowButton'><div class='tb-close-icon'></div></a></div></div><div id='TB_ajaxContent' style='width:"+ajaxContentW+"px;height:"+ajaxContentH+"px'></div>");
						}else{//ajax modal
						jQuery("#TB_overlay").unbind();
						jQuery("#TB_window").append("<div id='TB_ajaxContent' class='TB_modal' style='width:"+ajaxContentW+"px;height:"+ajaxContentH+"px;'></div>");
						}
					}else{//this means the window is already up, we are just loading new content via ajax
						jQuery("#TB_ajaxContent")[0].style.width = ajaxContentW +"px";
						jQuery("#TB_ajaxContent")[0].style.height = ajaxContentH +"px";
						jQuery("#TB_ajaxContent")[0].scrollTop = 0;
						jQuery("#TB_ajaxWindowTitle").html(caption);
					}
			}

			jQuery("#TB_closeWindowButton").click(tb_remove);

				if(url.indexOf('TB_inline') != -1){
					jQuery("#TB_ajaxContent").append(jQuery('#' + params['inlineId']).children());
					jQuery("#TB_window").bind('tb_unload', function () {
						jQuery('#' + params['inlineId']).append( jQuery("#TB_ajaxContent").children() ); // move elements back when you're finished
					});
					tb_position();
					jQuery("#TB_load").remove();
					jQuery("#TB_window").css({'visibility':'visible'});
				}else if(url.indexOf('TB_iframe') != -1){
					tb_position();
					jQuery("#TB_load").remove();
					jQuery("#TB_window").css({'visibility':'visible'});
				}else{
					jQuery("#TB_ajaxContent").load(url += "&random=" + (new Date().getTime()),function(){//to do a post change this load method
						tb_position();
						jQuery("#TB_load").remove();
						tb_init("#TB_ajaxContent a.thickbox");
						jQuery("#TB_window").css({'visibility':'visible'});
					});
				}

		}

		if(!params['modal']){
			jQuery(document).bind('keydown.thickbox', function(e){
				if ( e.which == 27 ){ // close
					tb_remove();
					return false;
				}
			});
		}

	} catch(e) {
		//nothing here
	}
}

//helper functions below
function tb_showIframe(){
	jQuery("#TB_load").remove();
	jQuery("#TB_window").css({'visibility':'visible'});
}

function tb_remove() {
 	jQuery("#TB_imageOff").unbind("click");
	jQuery("#TB_closeWindowButton").unbind("click");
	jQuery("#TB_window").fadeOut("fast",function(){jQuery('#TB_window,#TB_overlay,#TB_HideSelect').trigger("tb_unload").unbind().remove();});
	jQuery( 'body' ).removeClass( 'modal-open' );
	jQuery("#TB_load").remove();
	if (typeof document.body.style.maxHeight == "undefined") {//if IE 6
		jQuery("body","html").css({height: "auto", width: "auto"});
		jQuery("html").css("overflow","");
	}
	jQuery(document).unbind('.thickbox');
	return false;
}

function tb_position() {
var isIE6 = typeof document.body.style.maxHeight === "undefined";
jQuery("#TB_window").css({marginLeft: '-' + parseInt((TB_WIDTH / 2),10) + 'px', width: TB_WIDTH + 'px'});
	if ( ! isIE6 ) { // take away IE6
		jQuery("#TB_window").css({marginTop: '-' + parseInt((TB_HEIGHT / 2),10) + 'px'});
	}
}

function tb_parseQuery ( query ) {
   var Params = {};
   if ( ! query ) {return Params;}// return empty object
   var Pairs = query.split(/[;&]/);
   for ( var i = 0; i < Pairs.length; i++ ) {
      var KeyVal = Pairs[i].split('=');
      if ( ! KeyVal || KeyVal.length != 2 ) {continue;}
      var key = unescape( KeyVal[0] );
      var val = unescape( KeyVal[1] );
      val = val.replace(/\+/g, ' ');
      Params[key] = val;
   }
   return Params;
}

function tb_getPageSize(){
	var de = document.documentElement;
	var w = window.innerWidth || self.innerWidth || (de&&de.clientWidth) || document.body.clientWidth;
	var h = window.innerHeight || self.innerHeight || (de&&de.clientHeight) || document.body.clientHeight;
	arrayPageSize = [w,h];
	return arrayPageSize;
}

function tb_detectMacXFF() {
  var userAgent = navigator.userAgent.toLowerCase();
  if (userAgent.indexOf('mac') != -1 && userAgent.indexOf('firefox')!=-1) {
    return true;
  }
}
;
/*
Copyright (c) 2011 Wojo Design
Dual licensed under the MIT or GPL licenses.
*/
(function(){
	var window = this;
	// check to see if we have localStorage or not
	if( !window.localStorage ){

		// globalStorage
		// non-standard: Firefox 2+
		// https://developer.mozilla.org/en/dom/storage#globalStorage
		if ( window.globalStorage ) {
			// try/catch for file protocol in Firefox
			try {
				window.localStorage = window.globalStorage;
			} catch( e ) {}
			return;
		}

		// userData
		// non-standard: IE 5+
		// http://msdn.microsoft.com/en-us/library/ms531424(v=vs.85).aspx
		var div = document.createElement( "div" ),
			attrKey = "localStorage";
		div.style.display = "none";
		document.getElementsByTagName( "head" )[ 0 ].appendChild( div );
		if ( div.addBehavior ) {
			div.addBehavior( "#default#userdata" );

			var localStorage = window["localStorage"] = {
				"length":0,
				"setItem":function( key , value ){
					div.load( attrKey );
					key = cleanKey(key );

					if( !div.getAttribute( key ) ){
						this.length++;
					}
					div.setAttribute( key , value );

					div.save( attrKey );
				},
				"getItem":function( key ){
					div.load( attrKey );
					key = cleanKey(key );
					return div.getAttribute( key );

				},
				"removeItem":function( key ){
					div.load( attrKey );
					key = cleanKey(key );
					div.removeAttribute( key );

					div.save( attrKey );
					this.length--;
					if( this.length < 0){
						this.length=0;
					}
				},

				"clear":function(){
					div.load( attrKey );
					var i = 0;
					while ( attr = div.XMLDocument.documentElement.attributes[ i++ ] ) {
						div.removeAttribute( attr.name );
					}
					div.save( attrKey );
					this.length=0;
				},

				"key":function( key ){
					div.load( attrKey );
					return div.XMLDocument.documentElement.attributes[ key ];
				}

			},

			// convert invalid characters to dashes
			// http://www.w3.org/TR/REC-xml/#NT-Name
			// simplified to assume the starting character is valid
			cleanKey = function( key ){
				return key.replace( /[^-._0-9A-Za-z\xb7\xc0-\xd6\xd8-\xf6\xf8-\u037d\u37f-\u1fff\u200c-\u200d\u203f\u2040\u2070-\u218f]/g, "-" );
			};


			div.load( attrKey );
			localStorage["length"] = div.XMLDocument.documentElement.attributes.length;
		}
	}
})();;
/*
    json2.js
    2011-10-19

    Public Domain.

    NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.

    See http://www.JSON.org/js.html


    This code should be minified before deployment.
    See http://javascript.crockford.com/jsmin.html

    USE YOUR OWN COPY. IT IS EXTREMELY UNWISE TO LOAD CODE FROM SERVERS YOU DO
    NOT CONTROL.


    This file creates a global JSON object containing two methods: stringify
    and parse.

        JSON.stringify(value, replacer, space)
            value       any JavaScript value, usually an object or array.

            replacer    an optional parameter that determines how object
                        values are stringified for objects. It can be a
                        function or an array of strings.

            space       an optional parameter that specifies the indentation
                        of nested structures. If it is omitted, the text will
                        be packed without extra whitespace. If it is a number,
                        it will specify the number of spaces to indent at each
                        level. If it is a string (such as '\t' or '&nbsp;'),
                        it contains the characters used to indent at each level.

            This method produces a JSON text from a JavaScript value.

            When an object value is found, if the object contains a toJSON
            method, its toJSON method will be called and the result will be
            stringified. A toJSON method does not serialize: it returns the
            value represented by the name/value pair that should be serialized,
            or undefined if nothing should be serialized. The toJSON method
            will be passed the key associated with the value, and this will be
            bound to the value

            For example, this would serialize Dates as ISO strings.

                Date.prototype.toJSON = function (key) {
                    function f(n) {
                        // Format integers to have at least two digits.
                        return n < 10 ? '0' + n : n;
                    }

                    return this.getUTCFullYear()   + '-' +
                         f(this.getUTCMonth() + 1) + '-' +
                         f(this.getUTCDate())      + 'T' +
                         f(this.getUTCHours())     + ':' +
                         f(this.getUTCMinutes())   + ':' +
                         f(this.getUTCSeconds())   + 'Z';
                };

            You can provide an optional replacer method. It will be passed the
            key and value of each member, with this bound to the containing
            object. The value that is returned from your method will be
            serialized. If your method returns undefined, then the member will
            be excluded from the serialization.

            If the replacer parameter is an array of strings, then it will be
            used to select the members to be serialized. It filters the results
            such that only members with keys listed in the replacer array are
            stringified.

            Values that do not have JSON representations, such as undefined or
            functions, will not be serialized. Such values in objects will be
            dropped; in arrays they will be replaced with null. You can use
            a replacer function to replace those with JSON values.
            JSON.stringify(undefined) returns undefined.

            The optional space parameter produces a stringification of the
            value that is filled with line breaks and indentation to make it
            easier to read.

            If the space parameter is a non-empty string, then that string will
            be used for indentation. If the space parameter is a number, then
            the indentation will be that many spaces.

            Example:

            text = JSON.stringify(['e', {pluribus: 'unum'}]);
            // text is '["e",{"pluribus":"unum"}]'


            text = JSON.stringify(['e', {pluribus: 'unum'}], null, '\t');
            // text is '[\n\t"e",\n\t{\n\t\t"pluribus": "unum"\n\t}\n]'

            text = JSON.stringify([new Date()], function (key, value) {
                return this[key] instanceof Date ?
                    'Date(' + this[key] + ')' : value;
            });
            // text is '["Date(---current time---)"]'


        JSON.parse(text, reviver)
            This method parses a JSON text to produce an object or array.
            It can throw a SyntaxError exception.

            The optional reviver parameter is a function that can filter and
            transform the results. It receives each of the keys and values,
            and its return value is used instead of the original value.
            If it returns what it received, then the structure is not modified.
            If it returns undefined then the member is deleted.

            Example:

            // Parse the text. Values that look like ISO date strings will
            // be converted to Date objects.

            myData = JSON.parse(text, function (key, value) {
                var a;
                if (typeof value === 'string') {
                    a =
/^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2}(?:\.\d*)?)Z$/.exec(value);
                    if (a) {
                        return new Date(Date.UTC(+a[1], +a[2] - 1, +a[3], +a[4],
                            +a[5], +a[6]));
                    }
                }
                return value;
            });

            myData = JSON.parse('["Date(09/09/2001)"]', function (key, value) {
                var d;
                if (typeof value === 'string' &&
                        value.slice(0, 5) === 'Date(' &&
                        value.slice(-1) === ')') {
                    d = new Date(value.slice(5, -1));
                    if (d) {
                        return d;
                    }
                }
                return value;
            });


    This is a reference implementation. You are free to copy, modify, or
    redistribute.
*/

/*jslint evil: true, regexp: true */

/*members "", "\b", "\t", "\n", "\f", "\r", "\"", JSON, "\\", apply,
    call, charCodeAt, getUTCDate, getUTCFullYear, getUTCHours,
    getUTCMinutes, getUTCMonth, getUTCSeconds, hasOwnProperty, join,
    lastIndex, length, parse, prototype, push, replace, slice, stringify,
    test, toJSON, toString, valueOf
*/


// Create a JSON object only if one does not already exist. We create the
// methods in a closure to avoid creating global variables.

var JSON;
if (!JSON) {
    JSON = {};
}

(function () {
    'use strict';

    function f(n) {
        // Format integers to have at least two digits.
        return n < 10 ? '0' + n : n;
    }

    if (typeof Date.prototype.toJSON !== 'function') {

        Date.prototype.toJSON = function (key) {

            return isFinite(this.valueOf())
                ? this.getUTCFullYear()     + '-' +
                    f(this.getUTCMonth() + 1) + '-' +
                    f(this.getUTCDate())      + 'T' +
                    f(this.getUTCHours())     + ':' +
                    f(this.getUTCMinutes())   + ':' +
                    f(this.getUTCSeconds())   + 'Z'
                : null;
        };

        String.prototype.toJSON      =
            Number.prototype.toJSON  =
            Boolean.prototype.toJSON = function (key) {
                return this.valueOf();
            };
    }

    var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
        escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
        gap,
        indent,
        meta = {    // table of character substitutions
            '\b': '\\b',
            '\t': '\\t',
            '\n': '\\n',
            '\f': '\\f',
            '\r': '\\r',
            '"' : '\\"',
            '\\': '\\\\'
        },
        rep;


    function quote(string) {

// If the string contains no control characters, no quote characters, and no
// backslash characters, then we can safely slap some quotes around it.
// Otherwise we must also replace the offending characters with safe escape
// sequences.

        escapable.lastIndex = 0;
        return escapable.test(string) ? '"' + string.replace(escapable, function (a) {
            var c = meta[a];
            return typeof c === 'string'
                ? c
                : '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
        }) + '"' : '"' + string + '"';
    }


    function str(key, holder) {

// Produce a string from holder[key].

        var i,          // The loop counter.
            k,          // The member key.
            v,          // The member value.
            length,
            mind = gap,
            partial,
            value = holder[key];

// If the value has a toJSON method, call it to obtain a replacement value.

        if (value && typeof value === 'object' &&
                typeof value.toJSON === 'function') {
            value = value.toJSON(key);
        }

// If we were called with a replacer function, then call the replacer to
// obtain a replacement value.

        if (typeof rep === 'function') {
            value = rep.call(holder, key, value);
        }

// What happens next depends on the value's type.

        switch (typeof value) {
        case 'string':
            return quote(value);

        case 'number':

// JSON numbers must be finite. Encode non-finite numbers as null.

            return isFinite(value) ? String(value) : 'null';

        case 'boolean':
        case 'null':

// If the value is a boolean or null, convert it to a string. Note:
// typeof null does not produce 'null'. The case is included here in
// the remote chance that this gets fixed someday.

            return String(value);

// If the type is 'object', we might be dealing with an object or an array or
// null.

        case 'object':

// Due to a specification blunder in ECMAScript, typeof null is 'object',
// so watch out for that case.

            if (!value) {
                return 'null';
            }

// Make an array to hold the partial results of stringifying this object value.

            gap += indent;
            partial = [];

// Is the value an array?

            if (Object.prototype.toString.apply(value) === '[object Array]') {

// The value is an array. Stringify every element. Use null as a placeholder
// for non-JSON values.

                length = value.length;
                for (i = 0; i < length; i += 1) {
                    partial[i] = str(i, value) || 'null';
                }

// Join all of the elements together, separated with commas, and wrap them in
// brackets.

                v = partial.length === 0
                    ? '[]'
                    : gap
                    ? '[\n' + gap + partial.join(',\n' + gap) + '\n' + mind + ']'
                    : '[' + partial.join(',') + ']';
                gap = mind;
                return v;
            }

// If the replacer is an array, use it to select the members to be stringified.

            if (rep && typeof rep === 'object') {
                length = rep.length;
                for (i = 0; i < length; i += 1) {
                    if (typeof rep[i] === 'string') {
                        k = rep[i];
                        v = str(k, value);
                        if (v) {
                            partial.push(quote(k) + (gap ? ': ' : ':') + v);
                        }
                    }
                }
            } else {

// Otherwise, iterate through all of the keys in the object.

                for (k in value) {
                    if (Object.prototype.hasOwnProperty.call(value, k)) {
                        v = str(k, value);
                        if (v) {
                            partial.push(quote(k) + (gap ? ': ' : ':') + v);
                        }
                    }
                }
            }

// Join all of the member texts together, separated with commas,
// and wrap them in braces.

            v = partial.length === 0
                ? '{}'
                : gap
                ? '{\n' + gap + partial.join(',\n' + gap) + '\n' + mind + '}'
                : '{' + partial.join(',') + '}';
            gap = mind;
            return v;
        }
    }

// If the JSON object does not yet have a stringify method, give it one.

    if (typeof JSON.stringify !== 'function') {
        JSON.stringify = function (value, replacer, space) {

// The stringify method takes a value and an optional replacer, and an optional
// space parameter, and returns a JSON text. The replacer can be a function
// that can replace values, or an array of strings that will select the keys.
// A default replacer method can be provided. Use of the space parameter can
// produce text that is more easily readable.

            var i;
            gap = '';
            indent = '';

// If the space parameter is a number, make an indent string containing that
// many spaces.

            if (typeof space === 'number') {
                for (i = 0; i < space; i += 1) {
                    indent += ' ';
                }

// If the space parameter is a string, it will be used as the indent string.

            } else if (typeof space === 'string') {
                indent = space;
            }

// If there is a replacer, it must be a function or an array.
// Otherwise, throw an error.

            rep = replacer;
            if (replacer && typeof replacer !== 'function' &&
                    (typeof replacer !== 'object' ||
                    typeof replacer.length !== 'number')) {
                throw new Error('JSON.stringify');
            }

// Make a fake root object containing our value under the key of ''.
// Return the result of stringifying the value.

            return str('', {'': value});
        };
    }


// If the JSON object does not yet have a parse method, give it one.

    if (typeof JSON.parse !== 'function') {
        JSON.parse = function (text, reviver) {

// The parse method takes a text and an optional reviver function, and returns
// a JavaScript value if the text is a valid JSON text.

            var j;

            function walk(holder, key) {

// The walk method is used to recursively walk the resulting structure so
// that modifications can be made.

                var k, v, value = holder[key];
                if (value && typeof value === 'object') {
                    for (k in value) {
                        if (Object.prototype.hasOwnProperty.call(value, k)) {
                            v = walk(value, k);
                            if (v !== undefined) {
                                value[k] = v;
                            } else {
                                delete value[k];
                            }
                        }
                    }
                }
                return reviver.call(holder, key, value);
            }


// Parsing happens in four stages. In the first stage, we replace certain
// Unicode characters with escape sequences. JavaScript handles many characters
// incorrectly, either silently deleting them, or treating them as line endings.

            text = String(text);
            cx.lastIndex = 0;
            if (cx.test(text)) {
                text = text.replace(cx, function (a) {
                    return '\\u' +
                        ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
                });
            }

// In the second stage, we run the text against regular expressions that look
// for non-JSON patterns. We are especially concerned with '()' and 'new'
// because they can cause invocation, and '=' because it can cause mutation.
// But just to be safe, we want to reject all unexpected forms.

// We split the second stage into 4 regexp operations in order to work around
// crippling inefficiencies in IE's and Safari's regexp engines. First we
// replace the JSON backslash pairs with '@' (a non-JSON character). Second, we
// replace all simple value tokens with ']' characters. Third, we delete all
// open brackets that follow a colon or comma or that begin the text. Finally,
// we look to see that the remaining characters are only whitespace or ']' or
// ',' or ':' or '{' or '}'. If that is so, then the text is safe for eval.

            if (/^[\],:{}\s]*$/
                    .test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, '@')
                        .replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']')
                        .replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {

// In the third stage we use the eval function to compile the text into a
// JavaScript structure. The '{' operator is subject to a syntactic ambiguity
// in JavaScript: it can begin a block or an object literal. We wrap the text
// in parens to eliminate the ambiguity.

                j = eval('(' + text + ')');

// In the optional fourth stage, we recursively walk the new structure, passing
// each name/value pair to a reviver function for possible transformation.

                return typeof reviver === 'function'
                    ? walk({'': j}, '')
                    : j;
            }

// If the text is not JSON parseable, then a SyntaxError is thrown.

            throw new SyntaxError('JSON.parse');
        };
    }
}());
;
/*!
 * jQuery hashchange event - v1.3 - 7/21/2010
 * http://benalman.com/projects/jquery-hashchange-plugin/
 * patched by Automattic to add jQuery 1.9.x support
 *
 * Copyright (c) 2010 "Cowboy" Ben Alman
 * Dual licensed under the MIT and GPL licenses.
 * http://benalman.com/about/license/
 */

// Script: jQuery hashchange event
//
// *Version: 1.3, Last updated: 7/21/2010*
//
// Project Home - http://benalman.com/projects/jquery-hashchange-plugin/
// GitHub       - http://github.com/cowboy/jquery-hashchange/
// Source       - http://github.com/cowboy/jquery-hashchange/raw/master/jquery.ba-hashchange.js
// (Minified)   - http://github.com/cowboy/jquery-hashchange/raw/master/jquery.ba-hashchange.min.js (0.8kb gzipped)
//
// About: License
//
// Copyright (c) 2010 "Cowboy" Ben Alman,
// Dual licensed under the MIT and GPL licenses.
// http://benalman.com/about/license/
//
// About: Examples
//
// These working examples, complete with fully commented code, illustrate a few
// ways in which this plugin can be used.
//
// hashchange event - http://benalman.com/code/projects/jquery-hashchange/examples/hashchange/
// document.domain - http://benalman.com/code/projects/jquery-hashchange/examples/document_domain/
//
// About: Support and Testing
//
// Information about what version or versions of jQuery this plugin has been
// tested with, what browsers it has been tested in, and where the unit tests
// reside (so you can test it yourself).
//
// jQuery Versions - 1.2.6, 1.3.2, 1.4.1, 1.4.2
// Browsers Tested - Internet Explorer 6-8, Firefox 2-4, Chrome 5-6, Safari 3.2-5,
//                   Opera 9.6-10.60, iPhone 3.1, Android 1.6-2.2, BlackBerry 4.6-5.
// Unit Tests      - http://benalman.com/code/projects/jquery-hashchange/unit/
//
// About: Known issues
//
// While this jQuery hashchange event implementation is quite stable and
// robust, there are a few unfortunate browser bugs surrounding expected
// hashchange event-based behaviors, independent of any JavaScript
// window.onhashchange abstraction. See the following examples for more
// information:
//
// Chrome: Back Button - http://benalman.com/code/projects/jquery-hashchange/examples/bug-chrome-back-button/
// Firefox: Remote XMLHttpRequest - http://benalman.com/code/projects/jquery-hashchange/examples/bug-firefox-remote-xhr/
// WebKit: Back Button in an Iframe - http://benalman.com/code/projects/jquery-hashchange/examples/bug-webkit-hash-iframe/
// Safari: Back Button from a different domain - http://benalman.com/code/projects/jquery-hashchange/examples/bug-safari-back-from-diff-domain/
//
// Also note that should a browser natively support the window.onhashchange
// event, but not report that it does, the fallback polling loop will be used.
//
// About: Release History
//
// 1.3   - (7/21/2010) Reorganized IE6/7 Iframe code to make it more
//         "removable" for mobile-only development. Added IE6/7 document.title
//         support. Attempted to make Iframe as hidden as possible by using
//         techniques from http://www.paciellogroup.com/blog/?p=604. Added
//         support for the "shortcut" format $(window).hashchange( fn ) and
//         $(window).hashchange() like jQuery provides for built-in events.
//         Renamed jQuery.hashchangeDelay to <jQuery.fn.hashchange.delay> and
//         lowered its default value to 50. Added <jQuery.fn.hashchange.domain>
//         and <jQuery.fn.hashchange.src> properties plus document-domain.html
//         file to address access denied issues when setting document.domain in
//         IE6/7.
// 1.2   - (2/11/2010) Fixed a bug where coming back to a page using this plugin
//         from a page on another domain would cause an error in Safari 4. Also,
//         IE6/7 Iframe is now inserted after the body (this actually works),
//         which prevents the page from scrolling when the event is first bound.
//         Event can also now be bound before DOM ready, but it won't be usable
//         before then in IE6/7.
// 1.1   - (1/21/2010) Incorporated document.documentMode test to fix IE8 bug
//         where browser version is incorrectly reported as 8.0, despite
//         inclusion of the X-UA-Compatible IE=EmulateIE7 meta tag.
// 1.0   - (1/9/2010) Initial Release. Broke out the jQuery BBQ event.special
//         window.onhashchange functionality into a separate plugin for users
//         who want just the basic event & back button support, without all the
//         extra awesomeness that BBQ provides. This plugin will be included as
//         part of jQuery BBQ, but also be available separately.

(function($,window,undefined){
  '$:nomunge'; // Used by YUI compressor.

  // Reused string.
  var str_hashchange = 'hashchange',

    // Method / object references.
    doc = document,
    fake_onhashchange,
    special = $.event.special,

    // Does the browser support window.onhashchange? Note that IE8 running in
    // IE7 compatibility mode reports true for 'onhashchange' in window, even
    // though the event isn't supported, so also test document.documentMode.
    doc_mode = doc.documentMode,
    supports_onhashchange = 'on' + str_hashchange in window && ( doc_mode === undefined || doc_mode > 7 );

  // Get location.hash (or what you'd expect location.hash to be) sans any
  // leading #. Thanks for making this necessary, Firefox!
  function get_fragment( url ) {
    url = url || location.href;
    return '#' + url.replace( /^[^#]*#?(.*)$/, '$1' );
  };

  // Method: jQuery.fn.hashchange
  //
  // Bind a handler to the window.onhashchange event or trigger all bound
  // window.onhashchange event handlers. This behavior is consistent with
  // jQuery's built-in event handlers.
  //
  // Usage:
  //
  // > jQuery(window).hashchange( [ handler ] );
  //
  // Arguments:
  //
  //  handler - (Function) Optional handler to be bound to the hashchange
  //    event. This is a "shortcut" for the more verbose form:
  //    jQuery(window).bind( 'hashchange', handler ). If handler is omitted,
  //    all bound window.onhashchange event handlers will be triggered. This
  //    is a shortcut for the more verbose
  //    jQuery(window).trigger( 'hashchange' ). These forms are described in
  //    the <hashchange event> section.
  //
  // Returns:
  //
  //  (jQuery) The initial jQuery collection of elements.

  // Allow the "shortcut" format $(elem).hashchange( fn ) for binding and
  // $(elem).hashchange() for triggering, like jQuery does for built-in events.
  $.fn[ str_hashchange ] = function( fn ) {
    return fn ? this.bind( str_hashchange, fn ) : this.trigger( str_hashchange );
  };

  // Property: jQuery.fn.hashchange.delay
  //
  // The numeric interval (in milliseconds) at which the <hashchange event>
  // polling loop executes. Defaults to 50.

  // Property: jQuery.fn.hashchange.domain
  //
  // If you're setting document.domain in your JavaScript, and you want hash
  // history to work in IE6/7, not only must this property be set, but you must
  // also set document.domain BEFORE jQuery is loaded into the page. This
  // property is only applicable if you are supporting IE6/7 (or IE8 operating
  // in "IE7 compatibility" mode).
  //
  // In addition, the <jQuery.fn.hashchange.src> property must be set to the
  // path of the included "document-domain.html" file, which can be renamed or
  // modified if necessary (note that the document.domain specified must be the
  // same in both your main JavaScript as well as in this file).
  //
  // Usage:
  //
  // jQuery.fn.hashchange.domain = document.domain;

  // Property: jQuery.fn.hashchange.src
  //
  // If, for some reason, you need to specify an Iframe src file (for example,
  // when setting document.domain as in <jQuery.fn.hashchange.domain>), you can
  // do so using this property. Note that when using this property, history
  // won't be recorded in IE6/7 until the Iframe src file loads. This property
  // is only applicable if you are supporting IE6/7 (or IE8 operating in "IE7
  // compatibility" mode).
  //
  // Usage:
  //
  // jQuery.fn.hashchange.src = 'path/to/file.html';

  $.fn[ str_hashchange ].delay = 50;
  /*
  $.fn[ str_hashchange ].domain = null;
  $.fn[ str_hashchange ].src = null;
  */

  // Event: hashchange event
  //
  // Fired when location.hash changes. In browsers that support it, the native
  // HTML5 window.onhashchange event is used, otherwise a polling loop is
  // initialized, running every <jQuery.fn.hashchange.delay> milliseconds to
  // see if the hash has changed. In IE6/7 (and IE8 operating in "IE7
  // compatibility" mode), a hidden Iframe is created to allow the back button
  // and hash-based history to work.
  //
  // Usage as described in <jQuery.fn.hashchange>:
  //
  // > // Bind an event handler.
  // > jQuery(window).hashchange( function(e) {
  // >   var hash = location.hash;
  // >   ...
  // > });
  // >
  // > // Manually trigger the event handler.
  // > jQuery(window).hashchange();
  //
  // A more verbose usage that allows for event namespacing:
  //
  // > // Bind an event handler.
  // > jQuery(window).bind( 'hashchange', function(e) {
  // >   var hash = location.hash;
  // >   ...
  // > });
  // >
  // > // Manually trigger the event handler.
  // > jQuery(window).trigger( 'hashchange' );
  //
  // Additional Notes:
  //
  // * The polling loop and Iframe are not created until at least one handler
  //   is actually bound to the 'hashchange' event.
  // * If you need the bound handler(s) to execute immediately, in cases where
  //   a location.hash exists on page load, via bookmark or page refresh for
  //   example, use jQuery(window).hashchange() or the more verbose
  //   jQuery(window).trigger( 'hashchange' ).
  // * The event can be bound before DOM ready, but since it won't be usable
  //   before then in IE6/7 (due to the necessary Iframe), recommended usage is
  //   to bind it inside a DOM ready handler.

  // Override existing $.event.special.hashchange methods (allowing this plugin
  // to be defined after jQuery BBQ in BBQ's source code).
  special[ str_hashchange ] = $.extend( special[ str_hashchange ], {

    // Called only when the first 'hashchange' event is bound to window.
    setup: function() {
      // If window.onhashchange is supported natively, there's nothing to do..
      if ( supports_onhashchange ) { return false; }

      // Otherwise, we need to create our own. And we don't want to call this
      // until the user binds to the event, just in case they never do, since it
      // will create a polling loop and possibly even a hidden Iframe.
      $( fake_onhashchange.start );
    },

    // Called only when the last 'hashchange' event is unbound from window.
    teardown: function() {
      // If window.onhashchange is supported natively, there's nothing to do..
      if ( supports_onhashchange ) { return false; }

      // Otherwise, we need to stop ours (if possible).
      $( fake_onhashchange.stop );
    }

  });

  // fake_onhashchange does all the work of triggering the window.onhashchange
  // event for browsers that don't natively support it, including creating a
  // polling loop to watch for hash changes and in IE 6/7 creating a hidden
  // Iframe to enable back and forward.
  fake_onhashchange = (function(){
    var self = {},
      timeout_id,

      // Remember the initial hash so it doesn't get triggered immediately.
      last_hash = get_fragment(),

      fn_retval = function(val){ return val; },
      history_set = fn_retval,
      history_get = fn_retval;

    // Start the polling loop.
    self.start = function() {
      timeout_id || poll();
    };

    // Stop the polling loop.
    self.stop = function() {
      timeout_id && clearTimeout( timeout_id );
      timeout_id = undefined;
    };

    // This polling loop checks every $.fn.hashchange.delay milliseconds to see
    // if location.hash has changed, and triggers the 'hashchange' event on
    // window when necessary.
    function poll() {
      var hash = get_fragment(),
        history_hash = history_get( last_hash );

      if ( hash !== last_hash ) {
        history_set( last_hash = hash, history_hash );

        $(window).trigger( str_hashchange );

      } else if ( history_hash !== last_hash ) {
        location.href = location.href.replace( /#.*/, '' ) + history_hash;
      }

      timeout_id = setTimeout( poll, $.fn[ str_hashchange ].delay );
    };

    // vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
    // vvvvvvvvvvvvvvvvvvv REMOVE IF NOT SUPPORTING IE6/7/8 vvvvvvvvvvvvvvvvvvv
    // vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
    /MSIE/.test(navigator.userAgent) && !supports_onhashchange && (function(){
      // Not only do IE6/7 need the "magical" Iframe treatment, but so does IE8
      // when running in "IE7 compatibility" mode.

      var iframe,
        iframe_src;

      // When the event is bound and polling starts in IE 6/7, create a hidden
      // Iframe for history handling.
      self.start = function(){
        if ( !iframe ) {
          iframe_src = $.fn[ str_hashchange ].src;
          iframe_src = iframe_src && iframe_src + get_fragment();

          // Create hidden Iframe. Attempt to make Iframe as hidden as possible
          // by using techniques from http://www.paciellogroup.com/blog/?p=604.
          iframe = $('<iframe tabindex="-1" title="empty"/>').hide()

            // When Iframe has completely loaded, initialize the history and
            // start polling.
            .one( 'load', function(){
              iframe_src || history_set( get_fragment() );
              poll();
            })

            // Load Iframe src if specified, otherwise nothing.
            .attr( 'src', iframe_src || 'javascript:0' )

            // Append Iframe after the end of the body to prevent unnecessary
            // initial page scrolling (yes, this works).
            .insertAfter( 'body' )[0].contentWindow;

          // Whenever `document.title` changes, update the Iframe's title to
          // prettify the back/next history menu entries. Since IE sometimes
          // errors with "Unspecified error" the very first time this is set
          // (yes, very useful) wrap this with a try/catch block.
          doc.onpropertychange = function(){
            try {
              if ( event.propertyName === 'title' ) {
                iframe.document.title = doc.title;
              }
            } catch(e) {}
          };

        }
      };

      // Override the "stop" method since an IE6/7 Iframe was created. Even
      // if there are no longer any bound event handlers, the polling loop
      // is still necessary for back/next to work at all!
      self.stop = fn_retval;

      // Get history by looking at the hidden Iframe's location.hash.
      history_get = function() {
        return get_fragment( iframe.location.href );
      };

      // Set a new history item by opening and then closing the Iframe
      // document, *then* setting its location.hash. If document.domain has
      // been set, update that as well.
      history_set = function( hash, history_hash ) {
        var iframe_doc = iframe.document,
          domain = $.fn[ str_hashchange ].domain;

        if ( hash !== history_hash ) {
          // Update Iframe with any initial `document.title` that might be set.
          iframe_doc.title = doc.title;

          // Opening the Iframe's document after it has been closed is what
          // actually adds a history entry.
          iframe_doc.open();

          // Set document.domain for the Iframe document as well, if necessary.
          domain && iframe_doc.write( '<script>document.domain="' + domain + '"</script>' );

          iframe_doc.close();

          // Update the Iframe's hash, for great justice.
          iframe.location.hash = hash;
        }
      };

    })();
    // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // ^^^^^^^^^^^^^^^^^^^ REMOVE IF NOT SUPPORTING IE6/7/8 ^^^^^^^^^^^^^^^^^^^
    // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    return self;
  })();

})(jQuery,this);
;
// moment.js
// version : 2.1.0
// author : Tim Wood
// license : MIT
// momentjs.com
!function(t){function e(t,e){return function(n){return u(t.call(this,n),e)}}function n(t,e){return function(n){return this.lang().ordinal(t.call(this,n),e)}}function s(){}function i(t){a(this,t)}function r(t){var e=t.years||t.year||t.y||0,n=t.months||t.month||t.M||0,s=t.weeks||t.week||t.w||0,i=t.days||t.day||t.d||0,r=t.hours||t.hour||t.h||0,a=t.minutes||t.minute||t.m||0,o=t.seconds||t.second||t.s||0,u=t.milliseconds||t.millisecond||t.ms||0;this._input=t,this._milliseconds=u+1e3*o+6e4*a+36e5*r,this._days=i+7*s,this._months=n+12*e,this._data={},this._bubble()}function a(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}function o(t){return 0>t?Math.ceil(t):Math.floor(t)}function u(t,e){for(var n=t+"";n.length<e;)n="0"+n;return n}function h(t,e,n,s){var i,r,a=e._milliseconds,o=e._days,u=e._months;a&&t._d.setTime(+t._d+a*n),(o||u)&&(i=t.minute(),r=t.hour()),o&&t.date(t.date()+o*n),u&&t.month(t.month()+u*n),a&&!s&&H.updateOffset(t),(o||u)&&(t.minute(i),t.hour(r))}function d(t){return"[object Array]"===Object.prototype.toString.call(t)}function c(t,e){var n,s=Math.min(t.length,e.length),i=Math.abs(t.length-e.length),r=0;for(n=0;s>n;n++)~~t[n]!==~~e[n]&&r++;return r+i}function f(t){return t?ie[t]||t.toLowerCase().replace(/(.)s$/,"$1"):t}function l(t,e){return e.abbr=t,x[t]||(x[t]=new s),x[t].set(e),x[t]}function _(t){if(!t)return H.fn._lang;if(!x[t]&&A)try{require("./lang/"+t)}catch(e){return H.fn._lang}return x[t]}function m(t){return t.match(/\[.*\]/)?t.replace(/^\[|\]$/g,""):t.replace(/\\/g,"")}function y(t){var e,n,s=t.match(E);for(e=0,n=s.length;n>e;e++)s[e]=ue[s[e]]?ue[s[e]]:m(s[e]);return function(i){var r="";for(e=0;n>e;e++)r+=s[e]instanceof Function?s[e].call(i,t):s[e];return r}}function M(t,e){function n(e){return t.lang().longDateFormat(e)||e}for(var s=5;s--&&N.test(e);)e=e.replace(N,n);return re[e]||(re[e]=y(e)),re[e](t)}function g(t,e){switch(t){case"DDDD":return V;case"YYYY":return X;case"YYYYY":return $;case"S":case"SS":case"SSS":case"DDD":return I;case"MMM":case"MMMM":case"dd":case"ddd":case"dddd":return R;case"a":case"A":return _(e._l)._meridiemParse;case"X":return B;case"Z":case"ZZ":return j;case"T":return q;case"MM":case"DD":case"YY":case"HH":case"hh":case"mm":case"ss":case"M":case"D":case"d":case"H":case"h":case"m":case"s":return J;default:return new RegExp(t.replace("\\",""))}}function p(t){var e=(j.exec(t)||[])[0],n=(e+"").match(ee)||["-",0,0],s=+(60*n[1])+~~n[2];return"+"===n[0]?-s:s}function D(t,e,n){var s,i=n._a;switch(t){case"M":case"MM":i[1]=null==e?0:~~e-1;break;case"MMM":case"MMMM":s=_(n._l).monthsParse(e),null!=s?i[1]=s:n._isValid=!1;break;case"D":case"DD":case"DDD":case"DDDD":null!=e&&(i[2]=~~e);break;case"YY":i[0]=~~e+(~~e>68?1900:2e3);break;case"YYYY":case"YYYYY":i[0]=~~e;break;case"a":case"A":n._isPm=_(n._l).isPM(e);break;case"H":case"HH":case"h":case"hh":i[3]=~~e;break;case"m":case"mm":i[4]=~~e;break;case"s":case"ss":i[5]=~~e;break;case"S":case"SS":case"SSS":i[6]=~~(1e3*("0."+e));break;case"X":n._d=new Date(1e3*parseFloat(e));break;case"Z":case"ZZ":n._useUTC=!0,n._tzm=p(e)}null==e&&(n._isValid=!1)}function Y(t){var e,n,s=[];if(!t._d){for(e=0;7>e;e++)t._a[e]=s[e]=null==t._a[e]?2===e?1:0:t._a[e];s[3]+=~~((t._tzm||0)/60),s[4]+=~~((t._tzm||0)%60),n=new Date(0),t._useUTC?(n.setUTCFullYear(s[0],s[1],s[2]),n.setUTCHours(s[3],s[4],s[5],s[6])):(n.setFullYear(s[0],s[1],s[2]),n.setHours(s[3],s[4],s[5],s[6])),t._d=n}}function w(t){var e,n,s=t._f.match(E),i=t._i;for(t._a=[],e=0;e<s.length;e++)n=(g(s[e],t).exec(i)||[])[0],n&&(i=i.slice(i.indexOf(n)+n.length)),ue[s[e]]&&D(s[e],n,t);i&&(t._il=i),t._isPm&&t._a[3]<12&&(t._a[3]+=12),t._isPm===!1&&12===t._a[3]&&(t._a[3]=0),Y(t)}function k(t){var e,n,s,r,o,u=99;for(r=0;r<t._f.length;r++)e=a({},t),e._f=t._f[r],w(e),n=new i(e),o=c(e._a,n.toArray()),n._il&&(o+=n._il.length),u>o&&(u=o,s=n);a(t,s)}function v(t){var e,n=t._i,s=K.exec(n);if(s){for(t._f="YYYY-MM-DD"+(s[2]||" "),e=0;4>e;e++)if(te[e][1].exec(n)){t._f+=te[e][0];break}j.exec(n)&&(t._f+=" Z"),w(t)}else t._d=new Date(n)}function T(e){var n=e._i,s=G.exec(n);n===t?e._d=new Date:s?e._d=new Date(+s[1]):"string"==typeof n?v(e):d(n)?(e._a=n.slice(0),Y(e)):e._d=n instanceof Date?new Date(+n):new Date(n)}function b(t,e,n,s,i){return i.relativeTime(e||1,!!n,t,s)}function S(t,e,n){var s=W(Math.abs(t)/1e3),i=W(s/60),r=W(i/60),a=W(r/24),o=W(a/365),u=45>s&&["s",s]||1===i&&["m"]||45>i&&["mm",i]||1===r&&["h"]||22>r&&["hh",r]||1===a&&["d"]||25>=a&&["dd",a]||45>=a&&["M"]||345>a&&["MM",W(a/30)]||1===o&&["y"]||["yy",o];return u[2]=e,u[3]=t>0,u[4]=n,b.apply({},u)}function F(t,e,n){var s,i=n-e,r=n-t.day();return r>i&&(r-=7),i-7>r&&(r+=7),s=H(t).add("d",r),{week:Math.ceil(s.dayOfYear()/7),year:s.year()}}function O(t){var e=t._i,n=t._f;return null===e||""===e?null:("string"==typeof e&&(t._i=e=_().preparse(e)),H.isMoment(e)?(t=a({},e),t._d=new Date(+e._d)):n?d(n)?k(t):w(t):T(t),new i(t))}function z(t,e){H.fn[t]=H.fn[t+"s"]=function(t){var n=this._isUTC?"UTC":"";return null!=t?(this._d["set"+n+e](t),H.updateOffset(this),this):this._d["get"+n+e]()}}function C(t){H.duration.fn[t]=function(){return this._data[t]}}function L(t,e){H.duration.fn["as"+t]=function(){return+this/e}}for(var H,P,U="2.1.0",W=Math.round,x={},A="undefined"!=typeof module&&module.exports,G=/^\/?Date\((\-?\d+)/i,Z=/(\-)?(\d*)?\.?(\d+)\:(\d+)\:(\d+)\.?(\d{3})?/,E=/(\[[^\[]*\])|(\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|SS?S?|X|zz?|ZZ?|.)/g,N=/(\[[^\[]*\])|(\\)?(LT|LL?L?L?|l{1,4})/g,J=/\d\d?/,I=/\d{1,3}/,V=/\d{3}/,X=/\d{1,4}/,$=/[+\-]?\d{1,6}/,R=/[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i,j=/Z|[\+\-]\d\d:?\d\d/i,q=/T/i,B=/[\+\-]?\d+(\.\d{1,3})?/,K=/^\s*\d{4}-\d\d-\d\d((T| )(\d\d(:\d\d(:\d\d(\.\d\d?\d?)?)?)?)?([\+\-]\d\d:?\d\d)?)?/,Q="YYYY-MM-DDTHH:mm:ssZ",te=[["HH:mm:ss.S",/(T| )\d\d:\d\d:\d\d\.\d{1,3}/],["HH:mm:ss",/(T| )\d\d:\d\d:\d\d/],["HH:mm",/(T| )\d\d:\d\d/],["HH",/(T| )\d\d/]],ee=/([\+\-]|\d\d)/gi,ne="Date|Hours|Minutes|Seconds|Milliseconds".split("|"),se={Milliseconds:1,Seconds:1e3,Minutes:6e4,Hours:36e5,Days:864e5,Months:2592e6,Years:31536e6},ie={ms:"millisecond",s:"second",m:"minute",h:"hour",d:"day",w:"week",M:"month",y:"year"},re={},ae="DDD w W M D d".split(" "),oe="M D H h m s w W".split(" "),ue={M:function(){return this.month()+1},MMM:function(t){return this.lang().monthsShort(this,t)},MMMM:function(t){return this.lang().months(this,t)},D:function(){return this.date()},DDD:function(){return this.dayOfYear()},d:function(){return this.day()},dd:function(t){return this.lang().weekdaysMin(this,t)},ddd:function(t){return this.lang().weekdaysShort(this,t)},dddd:function(t){return this.lang().weekdays(this,t)},w:function(){return this.week()},W:function(){return this.isoWeek()},YY:function(){return u(this.year()%100,2)},YYYY:function(){return u(this.year(),4)},YYYYY:function(){return u(this.year(),5)},gg:function(){return u(this.weekYear()%100,2)},gggg:function(){return this.weekYear()},ggggg:function(){return u(this.weekYear(),5)},GG:function(){return u(this.isoWeekYear()%100,2)},GGGG:function(){return this.isoWeekYear()},GGGGG:function(){return u(this.isoWeekYear(),5)},e:function(){return this.weekday()},E:function(){return this.isoWeekday()},a:function(){return this.lang().meridiem(this.hours(),this.minutes(),!0)},A:function(){return this.lang().meridiem(this.hours(),this.minutes(),!1)},H:function(){return this.hours()},h:function(){return this.hours()%12||12},m:function(){return this.minutes()},s:function(){return this.seconds()},S:function(){return~~(this.milliseconds()/100)},SS:function(){return u(~~(this.milliseconds()/10),2)},SSS:function(){return u(this.milliseconds(),3)},Z:function(){var t=-this.zone(),e="+";return 0>t&&(t=-t,e="-"),e+u(~~(t/60),2)+":"+u(~~t%60,2)},ZZ:function(){var t=-this.zone(),e="+";return 0>t&&(t=-t,e="-"),e+u(~~(10*t/6),4)},z:function(){return this.zoneAbbr()},zz:function(){return this.zoneName()},X:function(){return this.unix()}};ae.length;)P=ae.pop(),ue[P+"o"]=n(ue[P],P);for(;oe.length;)P=oe.pop(),ue[P+P]=e(ue[P],2);for(ue.DDDD=e(ue.DDD,3),s.prototype={set:function(t){var e,n;for(n in t)e=t[n],"function"==typeof e?this[n]=e:this["_"+n]=e},_months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),months:function(t){return this._months[t.month()]},_monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),monthsShort:function(t){return this._monthsShort[t.month()]},monthsParse:function(t){var e,n,s;for(this._monthsParse||(this._monthsParse=[]),e=0;12>e;e++)if(this._monthsParse[e]||(n=H([2e3,e]),s="^"+this.months(n,"")+"|^"+this.monthsShort(n,""),this._monthsParse[e]=new RegExp(s.replace(".",""),"i")),this._monthsParse[e].test(t))return e},_weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdays:function(t){return this._weekdays[t.day()]},_weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysShort:function(t){return this._weekdaysShort[t.day()]},_weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),weekdaysMin:function(t){return this._weekdaysMin[t.day()]},weekdaysParse:function(t){var e,n,s;for(this._weekdaysParse||(this._weekdaysParse=[]),e=0;7>e;e++)if(this._weekdaysParse[e]||(n=H([2e3,1]).day(e),s="^"+this.weekdays(n,"")+"|^"+this.weekdaysShort(n,"")+"|^"+this.weekdaysMin(n,""),this._weekdaysParse[e]=new RegExp(s.replace(".",""),"i")),this._weekdaysParse[e].test(t))return e},_longDateFormat:{LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D YYYY",LLL:"MMMM D YYYY LT",LLLL:"dddd, MMMM D YYYY LT"},longDateFormat:function(t){var e=this._longDateFormat[t];return!e&&this._longDateFormat[t.toUpperCase()]&&(e=this._longDateFormat[t.toUpperCase()].replace(/MMMM|MM|DD|dddd/g,function(t){return t.slice(1)}),this._longDateFormat[t]=e),e},isPM:function(t){return"p"===(t+"").toLowerCase()[0]},_meridiemParse:/[ap]\.?m?\.?/i,meridiem:function(t,e,n){return t>11?n?"pm":"PM":n?"am":"AM"},_calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},calendar:function(t,e){var n=this._calendar[t];return"function"==typeof n?n.apply(e):n},_relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},relativeTime:function(t,e,n,s){var i=this._relativeTime[n];return"function"==typeof i?i(t,e,n,s):i.replace(/%d/i,t)},pastFuture:function(t,e){var n=this._relativeTime[t>0?"future":"past"];return"function"==typeof n?n(e):n.replace(/%s/i,e)},ordinal:function(t){return this._ordinal.replace("%d",t)},_ordinal:"%d",preparse:function(t){return t},postformat:function(t){return t},week:function(t){return F(t,this._week.dow,this._week.doy).week},_week:{dow:0,doy:6}},H=function(t,e,n){return O({_i:t,_f:e,_l:n,_isUTC:!1})},H.utc=function(t,e,n){return O({_useUTC:!0,_isUTC:!0,_l:n,_i:t,_f:e})},H.unix=function(t){return H(1e3*t)},H.duration=function(t,e){var n,s,i=H.isDuration(t),a="number"==typeof t,o=i?t._input:a?{}:t,u=Z.exec(t);return a?e?o[e]=t:o.milliseconds=t:u&&(n="-"===u[1]?-1:1,o={y:0,d:~~u[2]*n,h:~~u[3]*n,m:~~u[4]*n,s:~~u[5]*n,ms:~~u[6]*n}),s=new r(o),i&&t.hasOwnProperty("_lang")&&(s._lang=t._lang),s},H.version=U,H.defaultFormat=Q,H.updateOffset=function(){},H.lang=function(t,e){return t?(e?l(t,e):x[t]||_(t),H.duration.fn._lang=H.fn._lang=_(t),void 0):H.fn._lang._abbr},H.langData=function(t){return t&&t._lang&&t._lang._abbr&&(t=t._lang._abbr),_(t)},H.isMoment=function(t){return t instanceof i},H.isDuration=function(t){return t instanceof r},H.fn=i.prototype={clone:function(){return H(this)},valueOf:function(){return+this._d+6e4*(this._offset||0)},unix:function(){return Math.floor(+this/1e3)},toString:function(){return this.format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ")},toDate:function(){return this._offset?new Date(+this):this._d},toISOString:function(){return M(H(this).utc(),"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]")},toArray:function(){var t=this;return[t.year(),t.month(),t.date(),t.hours(),t.minutes(),t.seconds(),t.milliseconds()]},isValid:function(){return null==this._isValid&&(this._isValid=this._a?!c(this._a,(this._isUTC?H.utc(this._a):H(this._a)).toArray()):!isNaN(this._d.getTime())),!!this._isValid},utc:function(){return this.zone(0)},local:function(){return this.zone(0),this._isUTC=!1,this},format:function(t){var e=M(this,t||H.defaultFormat);return this.lang().postformat(e)},add:function(t,e){var n;return n="string"==typeof t?H.duration(+e,t):H.duration(t,e),h(this,n,1),this},subtract:function(t,e){var n;return n="string"==typeof t?H.duration(+e,t):H.duration(t,e),h(this,n,-1),this},diff:function(t,e,n){var s,i,r=this._isUTC?H(t).zone(this._offset||0):H(t).local(),a=6e4*(this.zone()-r.zone());return e=f(e),"year"===e||"month"===e?(s=432e5*(this.daysInMonth()+r.daysInMonth()),i=12*(this.year()-r.year())+(this.month()-r.month()),i+=(this-H(this).startOf("month")-(r-H(r).startOf("month")))/s,i-=6e4*(this.zone()-H(this).startOf("month").zone()-(r.zone()-H(r).startOf("month").zone()))/s,"year"===e&&(i/=12)):(s=this-r,i="second"===e?s/1e3:"minute"===e?s/6e4:"hour"===e?s/36e5:"day"===e?(s-a)/864e5:"week"===e?(s-a)/6048e5:s),n?i:o(i)},from:function(t,e){return H.duration(this.diff(t)).lang(this.lang()._abbr).humanize(!e)},fromNow:function(t){return this.from(H(),t)},calendar:function(){var t=this.diff(H().startOf("day"),"days",!0),e=-6>t?"sameElse":-1>t?"lastWeek":0>t?"lastDay":1>t?"sameDay":2>t?"nextDay":7>t?"nextWeek":"sameElse";return this.format(this.lang().calendar(e,this))},isLeapYear:function(){var t=this.year();return 0===t%4&&0!==t%100||0===t%400},isDST:function(){return this.zone()<this.clone().month(0).zone()||this.zone()<this.clone().month(5).zone()},day:function(t){var e=this._isUTC?this._d.getUTCDay():this._d.getDay();return null!=t?"string"==typeof t&&(t=this.lang().weekdaysParse(t),"number"!=typeof t)?this:this.add({d:t-e}):e},month:function(t){var e,n=this._isUTC?"UTC":"";return null!=t?"string"==typeof t&&(t=this.lang().monthsParse(t),"number"!=typeof t)?this:(e=this.date(),this.date(1),this._d["set"+n+"Month"](t),this.date(Math.min(e,this.daysInMonth())),H.updateOffset(this),this):this._d["get"+n+"Month"]()},startOf:function(t){switch(t=f(t)){case"year":this.month(0);case"month":this.date(1);case"week":case"day":this.hours(0);case"hour":this.minutes(0);case"minute":this.seconds(0);case"second":this.milliseconds(0)}return"week"===t&&this.weekday(0),this},endOf:function(t){return this.startOf(t).add(t,1).subtract("ms",1)},isAfter:function(t,e){return e="undefined"!=typeof e?e:"millisecond",+this.clone().startOf(e)>+H(t).startOf(e)},isBefore:function(t,e){return e="undefined"!=typeof e?e:"millisecond",+this.clone().startOf(e)<+H(t).startOf(e)},isSame:function(t,e){return e="undefined"!=typeof e?e:"millisecond",+this.clone().startOf(e)===+H(t).startOf(e)},min:function(t){return t=H.apply(null,arguments),this>t?this:t},max:function(t){return t=H.apply(null,arguments),t>this?this:t},zone:function(t){var e=this._offset||0;return null==t?this._isUTC?e:this._d.getTimezoneOffset():("string"==typeof t&&(t=p(t)),Math.abs(t)<16&&(t=60*t),this._offset=t,this._isUTC=!0,e!==t&&h(this,H.duration(e-t,"m"),1,!0),this)},zoneAbbr:function(){return this._isUTC?"UTC":""},zoneName:function(){return this._isUTC?"Coordinated Universal Time":""},daysInMonth:function(){return H.utc([this.year(),this.month()+1,0]).date()},dayOfYear:function(t){var e=W((H(this).startOf("day")-H(this).startOf("year"))/864e5)+1;return null==t?e:this.add("d",t-e)},weekYear:function(t){var e=F(this,this.lang()._week.dow,this.lang()._week.doy).year;return null==t?e:this.add("y",t-e)},isoWeekYear:function(t){var e=F(this,1,4).year;return null==t?e:this.add("y",t-e)},week:function(t){var e=this.lang().week(this);return null==t?e:this.add("d",7*(t-e))},isoWeek:function(t){var e=F(this,1,4).week;return null==t?e:this.add("d",7*(t-e))},weekday:function(t){var e=(this._d.getDay()+7-this.lang()._week.dow)%7;return null==t?e:this.add("d",t-e)},isoWeekday:function(t){return null==t?this.day()||7:this.day(this.day()%7?t:t-7)},lang:function(e){return e===t?this._lang:(this._lang=_(e),this)}},P=0;P<ne.length;P++)z(ne[P].toLowerCase().replace(/s$/,""),ne[P]);z("year","FullYear"),H.fn.days=H.fn.day,H.fn.months=H.fn.month,H.fn.weeks=H.fn.week,H.fn.isoWeeks=H.fn.isoWeek,H.fn.toJSON=H.fn.toISOString,H.duration.fn=r.prototype={_bubble:function(){var t,e,n,s,i=this._milliseconds,r=this._days,a=this._months,u=this._data;u.milliseconds=i%1e3,t=o(i/1e3),u.seconds=t%60,e=o(t/60),u.minutes=e%60,n=o(e/60),u.hours=n%24,r+=o(n/24),u.days=r%30,a+=o(r/30),u.months=a%12,s=o(a/12),u.years=s},weeks:function(){return o(this.days()/7)},valueOf:function(){return this._milliseconds+864e5*this._days+2592e6*(this._months%12)+31536e6*~~(this._months/12)},humanize:function(t){var e=+this,n=S(e,!t,this.lang());return t&&(n=this.lang().pastFuture(e,n)),this.lang().postformat(n)},add:function(t,e){var n=H.duration(t,e);return this._milliseconds+=n._milliseconds,this._days+=n._days,this._months+=n._months,this._bubble(),this},subtract:function(t,e){var n=H.duration(t,e);return this._milliseconds-=n._milliseconds,this._days-=n._days,this._months-=n._months,this._bubble(),this},get:function(t){return t=f(t),this[t.toLowerCase()+"s"]()},as:function(t){return t=f(t),this["as"+t.charAt(0).toUpperCase()+t.slice(1)+"s"]()},lang:H.fn.lang};for(P in se)se.hasOwnProperty(P)&&(L(P,se[P]),C(P.toLowerCase()));L("Weeks",6048e5),H.duration.fn.asMonths=function(){return(+this-31536e6*this.years())/2592e6+12*this.years()},H.lang("en",{ordinal:function(t){var e=t%10,n=1===~~(t%100/10)?"th":1===e?"st":2===e?"nd":3===e?"rd":"th";return t+n}}),A&&(module.exports=H),"undefined"==typeof ender&&(this.moment=H),"function"==typeof define&&define.amd&&define("moment",[],function(){return H})}.call(this);;
/*
 TraceKit - Cross brower stack traces - github.com/occ/TraceKit
 MIT license
*/

;(function(window, undefined) {


var TraceKit = {};
var _oldTraceKit = window.TraceKit;

// global reference to slice
var _slice = [].slice;
var UNKNOWN_FUNCTION = '?';


/**
 * _has, a better form of hasOwnProperty
 * Example: _has(MainHostObject, property) === true/false
 *
 * @param {Object} host object to check property
 * @param {string} key to check
 */
function _has(object, key) {
    return Object.prototype.hasOwnProperty.call(object, key);
}

function _isUndefined(what) {
    return typeof what === 'undefined';
}

/**
 * TraceKit.noConflict: Export TraceKit out to another variable
 * Example: var TK = TraceKit.noConflict()
 */
TraceKit.noConflict = function noConflict() {
    window.TraceKit = _oldTraceKit;
    return TraceKit;
};

/**
 * TraceKit.wrap: Wrap any function in a TraceKit reporter
 * Example: func = TraceKit.wrap(func);
 *
 * @param {Function} func Function to be wrapped
 * @return {Function} The wrapped func
 */
TraceKit.wrap = function traceKitWrapper(func) {
    function wrapped() {
        try {
            return func.apply(this, arguments);
        } catch (e) {
            TraceKit.report(e);
            throw e;
        }
    }
    return wrapped;
};

/**
 * TraceKit.report: cross-browser processing of unhandled exceptions
 *
 * Syntax:
 *   TraceKit.report.subscribe(function(stackInfo) { ... })
 *   TraceKit.report.unsubscribe(function(stackInfo) { ... })
 *   TraceKit.report(exception)
 *   try { ...code... } catch(ex) { TraceKit.report(ex); }
 *
 * Supports:
 *   - Firefox: full stack trace with line numbers, plus column number
 *              on top frame; column number is not guaranteed
 *   - Opera:   full stack trace with line and column numbers
 *   - Chrome:  full stack trace with line and column numbers
 *   - Safari:  line and column number for the top frame only; some frames
 *              may be missing, and column number is not guaranteed
 *   - IE:      line and column number for the top frame only; some frames
 *              may be missing, and column number is not guaranteed
 *
 * In theory, TraceKit should work on all of the following versions:
 *   - IE5.5+ (only 8.0 tested)
 *   - Firefox 0.9+ (only 3.5+ tested)
 *   - Opera 7+ (only 10.50 tested; versions 9 and earlier may require
 *     Exceptions Have Stacktrace to be enabled in opera:config)
 *   - Safari 3+ (only 4+ tested)
 *   - Chrome 1+ (only 5+ tested)
 *   - Konqueror 3.5+ (untested)
 *
 * Requires TraceKit.computeStackTrace.
 *
 * Tries to catch all unhandled exceptions and report them to the
 * subscribed handlers. Please note that TraceKit.report will rethrow the
 * exception. This is REQUIRED in order to get a useful stack trace in IE.
 * If the exception does not reach the top of the browser, you will only
 * get a stack trace from the point where TraceKit.report was called.
 *
 * Handlers receive a stackInfo object as described in the
 * TraceKit.computeStackTrace docs.
 */
TraceKit.report = (function reportModuleWrapper() {
    var handlers = [],
        lastException = null,
        lastExceptionStack = null;

    /**
     * Add a crash handler.
     * @param {Function} handler
     */
    function subscribe(handler) {
        installGlobalHandler();
        handlers.push(handler);
    }

    /**
     * Remove a crash handler.
     * @param {Function} handler
     */
    function unsubscribe(handler) {
        for (var i = handlers.length - 1; i >= 0; --i) {
            if (handlers[i] === handler) {
                handlers.splice(i, 1);
            }
        }
    }

    /**
     * Dispatch stack information to all handlers.
     * @param {Object.<string, *>} stack
     */
    function notifyHandlers(stack, windowError) {
        var exception = null;
        if (windowError && !TraceKit.collectWindowErrors) {
          return;
        }
        for (var i in handlers) {
            if (_has(handlers, i)) {
                try {
                    handlers[i].apply(null, [stack].concat(_slice.call(arguments, 2)));
                } catch (inner) {
                    exception = inner;
                }
            }
        }

        if (exception) {
            throw exception;
        }
    }

    var _oldOnerrorHandler, _onErrorHandlerInstalled;

    /**
     * Ensures all global unhandled exceptions are recorded.
     * Supported by Gecko and IE.
     * @param {string} message Error message.
     * @param {string} url URL of script that generated the exception.
     * @param {(number|string)} lineNo The line number at which the error
     * occurred.
     */
    function traceKitWindowOnError(message, url, lineNo) {
        var stack = null;

        if (lastExceptionStack) {
            TraceKit.computeStackTrace.augmentStackTraceWithInitialElement(lastExceptionStack, url, lineNo, message);
            stack = lastExceptionStack;
            lastExceptionStack = null;
            lastException = null;
        } else {
            var location = {
                'url': url,
                'line': lineNo
            };
            location.func = TraceKit.computeStackTrace.guessFunctionName(location.url, location.line);
            location.context = TraceKit.computeStackTrace.gatherContext(location.url, location.line);
            stack = {
                'mode': 'onerror',
                'message': message,
                'url': document.location.href,
                'stack': [location],
                'useragent': navigator.userAgent
            };
        }

        notifyHandlers(stack, 'from window.onerror');

        if (_oldOnerrorHandler) {
            return _oldOnerrorHandler.apply(this, arguments);
        }

        return false;
    }

    function installGlobalHandler ()
    {
        if (_onErrorHandlerInstalled === true) {
            return;
        }
        _oldOnerrorHandler = window.onerror;
        window.onerror = traceKitWindowOnError;
        _onErrorHandlerInstalled = true;
    }

    /**
     * Reports an unhandled Error to TraceKit.
     * @param {Error} ex
     */
    function report(ex) {
        var args = _slice.call(arguments, 1);
        if (lastExceptionStack) {
            if (lastException === ex) {
                return; // already caught by an inner catch block, ignore
            } else {
                var s = lastExceptionStack;
                lastExceptionStack = null;
                lastException = null;
                notifyHandlers.apply(null, [s, null].concat(args));
            }
        }

        var stack = TraceKit.computeStackTrace(ex);
        lastExceptionStack = stack;
        lastException = ex;

        // If the stack trace is incomplete, wait for 2 seconds for
        // slow slow IE to see if onerror occurs or not before reporting
        // this exception; otherwise, we will end up with an incomplete
        // stack trace
        window.setTimeout(function () {
            if (lastException === ex) {
                lastExceptionStack = null;
                lastException = null;
                notifyHandlers.apply(null, [stack, null].concat(args));
            }
        }, (stack.incomplete ? 2000 : 0));

        throw ex; // re-throw to propagate to the top level (and cause window.onerror)
    }

    report.subscribe = subscribe;
    report.unsubscribe = unsubscribe;
    return report;
}());

/**
 * TraceKit.computeStackTrace: cross-browser stack traces in JavaScript
 *
 * Syntax:
 *   s = TraceKit.computeStackTrace.ofCaller([depth])
 *   s = TraceKit.computeStackTrace(exception) // consider using TraceKit.report instead (see below)
 * Returns:
 *   s.name              - exception name
 *   s.message           - exception message
 *   s.stack[i].url      - JavaScript or HTML file URL
 *   s.stack[i].func     - function name, or empty for anonymous functions (if guessing did not work)
 *   s.stack[i].args     - arguments passed to the function, if known
 *   s.stack[i].line     - line number, if known
 *   s.stack[i].column   - column number, if known
 *   s.stack[i].context  - an array of source code lines; the middle element corresponds to the correct line#
 *   s.mode              - 'stack', 'stacktrace', 'multiline', 'callers', 'onerror', or 'failed' -- method used to collect the stack trace
 *
 * Supports:
 *   - Firefox:  full stack trace with line numbers and unreliable column
 *               number on top frame
 *   - Opera 10: full stack trace with line and column numbers
 *   - Opera 9-: full stack trace with line numbers
 *   - Chrome:   full stack trace with line and column numbers
 *   - Safari:   line and column number for the topmost stacktrace element
 *               only
 *   - IE:       no line numbers whatsoever
 *
 * Tries to guess names of anonymous functions by looking for assignments
 * in the source code. In IE and Safari, we have to guess source file names
 * by searching for function bodies inside all page scripts. This will not
 * work for scripts that are loaded cross-domain.
 * Here be dragons: some function names may be guessed incorrectly, and
 * duplicate functions may be mismatched.
 *
 * TraceKit.computeStackTrace should only be used for tracing purposes.
 * Logging of unhandled exceptions should be done with TraceKit.report,
 * which builds on top of TraceKit.computeStackTrace and provides better
 * IE support by utilizing the window.onerror event to retrieve information
 * about the top of the stack.
 *
 * Note: In IE and Safari, no stack trace is recorded on the Error object,
 * so computeStackTrace instead walks its *own* chain of callers.
 * This means that:
 *  * in Safari, some methods may be missing from the stack trace;
 *  * in IE, the topmost function in the stack trace will always be the
 *    caller of computeStackTrace.
 *
 * This is okay for tracing (because you are likely to be calling
 * computeStackTrace from the function you want to be the topmost element
 * of the stack trace anyway), but not okay for logging unhandled
 * exceptions (because your catch block will likely be far away from the
 * inner function that actually caused the exception).
 *
 * Tracing example:
 *     function trace(message) {
 *         var stackInfo = TraceKit.computeStackTrace.ofCaller();
 *         var data = message + "\n";
 *         for(var i in stackInfo.stack) {
 *             var item = stackInfo.stack[i];
 *             data += (item.func || '[anonymous]') + "() in " + item.url + ":" + (item.line || '0') + "\n";
 *         }
 *         if (window.console)
 *             console.info(data);
 *         else
 *             alert(data);
 *     }
 */
TraceKit.computeStackTrace = (function computeStackTraceWrapper() {
    var debug = false,
        sourceCache = {};

    /**
     * Attempts to retrieve source code via XMLHttpRequest, which is used
     * to look up anonymous function names.
     * @param {string} url URL of source code.
     * @return {string} Source contents.
     */
    function loadSource(url) {
        if (!TraceKit.remoteFetching) { //Only attempt request if remoteFetching is on.
            return '';
        }
        try {
            function getXHR() {
                try {
                    return new window.XMLHttpRequest();
                } catch (e) {
                    // explicitly bubble up the exception if not found
                    return new window.ActiveXObject('Microsoft.XMLHTTP');
                }
            }

            var request = getXHR();
            request.open('GET', url, false);
            request.send('');
            return request.responseText;
        } catch (e) {
            return '';
        }
    }

    /**
     * Retrieves source code from the source code cache.
     * @param {string} url URL of source code.
     * @return {Array.<string>} Source contents.
     */
    function getSource(url) {
        if (!_has(sourceCache, url)) {
            // URL needs to be able to fetched within the acceptable domain.  Otherwise,
            // cross-domain errors will be triggered.
            var source = '';
            if (url.indexOf(document.domain) !== -1) {
                source = loadSource(url);
            }
            sourceCache[url] = source ? source.split('\n') : [];
        }

        return sourceCache[url];
    }

    /**
     * Tries to use an externally loaded copy of source code to determine
     * the name of a function by looking at the name of the variable it was
     * assigned to, if any.
     * @param {string} url URL of source code.
     * @param {(string|number)} lineNo Line number in source code.
     * @return {string} The function name, if discoverable.
     */
    function guessFunctionName(url, lineNo) {
        var reFunctionArgNames = /function ([^(]*)\(([^)]*)\)/,
            reGuessFunction = /['"]?([0-9A-Za-z$_]+)['"]?\s*[:=]\s*(function|eval|new Function)/,
            line = '',
            maxLines = 10,
            source = getSource(url),
            m;

        if (!source.length) {
            return UNKNOWN_FUNCTION;
        }

        // Walk backwards from the first line in the function until we find the line which
        // matches the pattern above, which is the function definition
        for (var i = 0; i < maxLines; ++i) {
            line = source[lineNo - i] + line;

            if (!_isUndefined(line)) {
                if ((m = reGuessFunction.exec(line))) {
                    return m[1];
                } else if ((m = reFunctionArgNames.exec(line))) {
                    return m[1];
                }
            }
        }

        return UNKNOWN_FUNCTION;
    }

    /**
     * Retrieves the surrounding lines from where an exception occurred.
     * @param {string} url URL of source code.
     * @param {(string|number)} line Line number in source code to centre
     * around for context.
     * @return {?Array.<string>} Lines of source code.
     */
    function gatherContext(url, line) {
        var source = getSource(url);

        if (!source.length) {
            return null;
        }

        var context = [],
            // linesBefore & linesAfter are inclusive with the offending line.
            // if linesOfContext is even, there will be one extra line
            //   *before* the offending line.
            linesBefore = Math.floor(TraceKit.linesOfContext / 2),
            // Add one extra line if linesOfContext is odd
            linesAfter = linesBefore + (TraceKit.linesOfContext % 2),
            start = Math.max(0, line - linesBefore - 1),
            end = Math.min(source.length, line + linesAfter - 1);

        line -= 1; // convert to 0-based index

        for (var i = start; i < end; ++i) {
            if (!_isUndefined(source[i])) {
                context.push(source[i]);
            }
        }

        return context.length > 0 ? context : null;
    }

    /**
     * Escapes special characters, except for whitespace, in a string to be
     * used inside a regular expression as a string literal.
     * @param {string} text The string.
     * @return {string} The escaped string literal.
     */
    function escapeRegExp(text) {
        return text.replace(/[\-\[\]{}()*+?.,\\\^$|#]/g, '\\$&');
    }

    /**
     * Escapes special characters in a string to be used inside a regular
     * expression as a string literal. Also ensures that HTML entities will
     * be matched the same as their literal friends.
     * @param {string} body The string.
     * @return {string} The escaped string.
     */
    function escapeCodeAsRegExpForMatchingInsideHTML(body) {
        return escapeRegExp(body).replace('<', '(?:<|&lt;)').replace('>', '(?:>|&gt;)').replace('&', '(?:&|&amp;)').replace('"', '(?:"|&quot;)').replace(/\s+/g, '\\s+');
    }

    /**
     * Determines where a code fragment occurs in the source code.
     * @param {RegExp} re The function definition.
     * @param {Array.<string>} urls A list of URLs to search.
     * @return {?Object.<string, (string|number)>} An object containing
     * the url, line, and column number of the defined function.
     */
    function findSourceInUrls(re, urls) {
        var source, m;
        for (var i = 0, j = urls.length; i < j; ++i) {
            // console.log('searching', urls[i]);
            if ((source = getSource(urls[i])).length) {
                source = source.join('\n');
                if ((m = re.exec(source))) {
                    // console.log('Found function in ' + urls[i]);

                    return {
                        'url': urls[i],
                        'line': source.substring(0, m.index).split('\n').length,
                        'column': m.index - source.lastIndexOf('\n', m.index) - 1
                    };
                }
            }
        }

        // console.log('no match');

        return null;
    }

    /**
     * Determines at which column a code fragment occurs on a line of the
     * source code.
     * @param {string} fragment The code fragment.
     * @param {string} url The URL to search.
     * @param {(string|number)} line The line number to examine.
     * @return {?number} The column number.
     */
    function findSourceInLine(fragment, url, line) {
        var source = getSource(url),
            re = new RegExp('\\b' + escapeRegExp(fragment) + '\\b'),
            m;

        line -= 1;

        if (source && source.length > line && (m = re.exec(source[line]))) {
            return m.index;
        }

        return null;
    }

    /**
     * Determines where a function was defined within the source code.
     * @param {(Function|string)} func A function reference or serialized
     * function definition.
     * @return {?Object.<string, (string|number)>} An object containing
     * the url, line, and column number of the defined function.
     */
    function findSourceByFunctionBody(func) {
        var urls = [window.location.href],
            scripts = document.getElementsByTagName('script'),
            body,
            code = '' + func,
            codeRE = /^function(?:\s+([\w$]+))?\s*\(([\w\s,]*)\)\s*\{\s*(\S[\s\S]*\S)\s*\}\s*$/,
            eventRE = /^function on([\w$]+)\s*\(event\)\s*\{\s*(\S[\s\S]*\S)\s*\}\s*$/,
            re,
            parts,
            result;

        for (var i = 0; i < scripts.length; ++i) {
            var script = scripts[i];
            if (script.src) {
                urls.push(script.src);
            }
        }

        if (!(parts = codeRE.exec(code))) {
            re = new RegExp(escapeRegExp(code).replace(/\s+/g, '\\s+'));
        }

        // not sure if this is really necessary, but I don’t have a test
        // corpus large enough to confirm that and it was in the original.
        else {
            var name = parts[1] ? '\\s+' + parts[1] : '',
                args = parts[2].split(',').join('\\s*,\\s*');

            body = escapeRegExp(parts[3]).replace(/;$/, ';?'); // semicolon is inserted if the function ends with a comment.replace(/\s+/g, '\\s+');
            re = new RegExp('function' + name + '\\s*\\(\\s*' + args + '\\s*\\)\\s*{\\s*' + body + '\\s*}');
        }

        // look for a normal function definition
        if ((result = findSourceInUrls(re, urls))) {
            return result;
        }

        // look for an old-school event handler function
        if ((parts = eventRE.exec(code))) {
            var event = parts[1];
            body = escapeCodeAsRegExpForMatchingInsideHTML(parts[2]);

            // look for a function defined in HTML as an onXXX handler
            re = new RegExp('on' + event + '=[\\\'"]\\s*' + body + '\\s*[\\\'"]', 'i');

            if ((result = findSourceInUrls(re, urls[0]))) {
                return result;
            }

            // look for ???
            re = new RegExp(body);

            if ((result = findSourceInUrls(re, urls))) {
                return result;
            }
        }

        return null;
    }

    // Contents of Exception in various browsers.
    //
    // SAFARI:
    // ex.message = Can't find variable: qq
    // ex.line = 59
    // ex.sourceId = 580238192
    // ex.sourceURL = http://...
    // ex.expressionBeginOffset = 96
    // ex.expressionCaretOffset = 98
    // ex.expressionEndOffset = 98
    // ex.name = ReferenceError
    //
    // FIREFOX:
    // ex.message = qq is not defined
    // ex.fileName = http://...
    // ex.lineNumber = 59
    // ex.stack = ...stack trace... (see the example below)
    // ex.name = ReferenceError
    //
    // CHROME:
    // ex.message = qq is not defined
    // ex.name = ReferenceError
    // ex.type = not_defined
    // ex.arguments = ['aa']
    // ex.stack = ...stack trace...
    //
    // INTERNET EXPLORER:
    // ex.message = ...
    // ex.name = ReferenceError
    //
    // OPERA:
    // ex.message = ...message... (see the example below)
    // ex.name = ReferenceError
    // ex.opera#sourceloc = 11  (pretty much useless, duplicates the info in ex.message)
    // ex.stacktrace = n/a; see 'opera:config#UserPrefs|Exceptions Have Stacktrace'

    /**
     * Computes stack trace information from the stack property.
     * Chrome and Gecko use this property.
     * @param {Error} ex
     * @return {?Object.<string, *>} Stack trace information.
     */
    function computeStackTraceFromStackProp(ex) {
        if (!ex.stack) {
            return null;
        }

        var chrome = /^\s*at (?:((?:\[object object\])?\S+) )?\(?((?:file|http|https):.*?):(\d+)(?::(\d+))?\)?\s*$/i,
            gecko = /^\s*(\S*)(?:\((.*?)\))?@((?:file|http|https).*?):(\d+)(?::(\d+))?\s*$/i,
            lines = ex.stack.split('\n'),
            stack = [],
            parts,
            element,
            reference = /^(.*) is undefined$/.exec(ex.message);

        for (var i = 0, j = lines.length; i < j; ++i) {
            if ((parts = gecko.exec(lines[i]))) {
                element = {
                    'url': parts[3],
                    'func': parts[1] || UNKNOWN_FUNCTION,
                    'args': parts[2] ? parts[2].split(',') : '',
                    'line': +parts[4],
                    'column': parts[5] ? +parts[5] : null
                };
            } else if ((parts = chrome.exec(lines[i]))) {
                element = {
                    'url': parts[2],
                    'func': parts[1] || UNKNOWN_FUNCTION,
                    'line': +parts[3],
                    'column': parts[4] ? +parts[4] : null
                };
            } else {
                continue;
            }

            if (!element.func && element.line) {
                element.func = guessFunctionName(element.url, element.line);
            }

            if (element.line) {
                element.context = gatherContext(element.url, element.line);
            }

            stack.push(element);
        }

        if (stack[0] && stack[0].line && !stack[0].column && reference) {
            stack[0].column = findSourceInLine(reference[1], stack[0].url, stack[0].line);
        }

        if (!stack.length) {
            return null;
        }

        return {
            'mode': 'stack',
            'name': ex.name,
            'message': ex.message,
            'url': document.location.href,
            'stack': stack,
            'useragent': navigator.userAgent
        };
    }

    /**
     * Computes stack trace information from the stacktrace property.
     * Opera 10 uses this property.
     * @param {Error} ex
     * @return {?Object.<string, *>} Stack trace information.
     */
    function computeStackTraceFromStacktraceProp(ex) {
        // Access and store the stacktrace property before doing ANYTHING
        // else to it because Opera is not very good at providing it
        // reliably in other circumstances.
        var stacktrace = ex.stacktrace;

        var testRE = / line (\d+), column (\d+) in (?:<anonymous function: ([^>]+)>|([^\)]+))\((.*)\) in (.*):\s*$/i,
            lines = stacktrace.split('\n'),
            stack = [],
            parts;

        for (var i = 0, j = lines.length; i < j; i += 2) {
            if ((parts = testRE.exec(lines[i]))) {
                var element = {
                    'line': +parts[1],
                    'column': +parts[2],
                    'func': parts[3] || parts[4],
                    'args': parts[5] ? parts[5].split(',') : [],
                    'url': parts[6]
                };

                if (!element.func && element.line) {
                    element.func = guessFunctionName(element.url, element.line);
                }
                if (element.line) {
                    try {
                        element.context = gatherContext(element.url, element.line);
                    } catch (exc) {}
                }

                if (!element.context) {
                    element.context = [lines[i + 1]];
                }

                stack.push(element);
            }
        }

        if (!stack.length) {
            return null;
        }

        return {
            'mode': 'stacktrace',
            'name': ex.name,
            'message': ex.message,
            'url': document.location.href,
            'stack': stack,
            'useragent': navigator.userAgent
        };
    }

    /**
     * NOT TESTED.
     * Computes stack trace information from an error message that includes
     * the stack trace.
     * Opera 9 and earlier use this method if the option to show stack
     * traces is turned on in opera:config.
     * @param {Error} ex
     * @return {?Object.<string, *>} Stack information.
     */
    function computeStackTraceFromOperaMultiLineMessage(ex) {
        // Opera includes a stack trace into the exception message. An example is:
        //
        // Statement on line 3: Undefined variable: undefinedFunc
        // Backtrace:
        //   Line 3 of linked script file://localhost/Users/andreyvit/Projects/TraceKit/javascript-client/sample.js: In function zzz
        //         undefinedFunc(a);
        //   Line 7 of inline#1 script in file://localhost/Users/andreyvit/Projects/TraceKit/javascript-client/sample.html: In function yyy
        //           zzz(x, y, z);
        //   Line 3 of inline#1 script in file://localhost/Users/andreyvit/Projects/TraceKit/javascript-client/sample.html: In function xxx
        //           yyy(a, a, a);
        //   Line 1 of function script
        //     try { xxx('hi'); return false; } catch(ex) { TraceKit.report(ex); }
        //   ...

        var lines = ex.message.split('\n');
        if (lines.length < 4) {
            return null;
        }

        var lineRE1 = /^\s*Line (\d+) of linked script ((?:file|http|https)\S+)(?:: in function (\S+))?\s*$/i,
            lineRE2 = /^\s*Line (\d+) of inline#(\d+) script in ((?:file|http|https)\S+)(?:: in function (\S+))?\s*$/i,
            lineRE3 = /^\s*Line (\d+) of function script\s*$/i,
            stack = [],
            scripts = document.getElementsByTagName('script'),
            inlineScriptBlocks = [],
            parts,
            i,
            len,
            source;

        for (i in scripts) {
            if (_has(scripts, i) && !scripts[i].src) {
                inlineScriptBlocks.push(scripts[i]);
            }
        }

        for (i = 2, len = lines.length; i < len; i += 2) {
            var item = null;
            if ((parts = lineRE1.exec(lines[i]))) {
                item = {
                    'url': parts[2],
                    'func': parts[3],
                    'line': +parts[1]
                };
            } else if ((parts = lineRE2.exec(lines[i]))) {
                item = {
                    'url': parts[3],
                    'func': parts[4]
                };
                var relativeLine = (+parts[1]); // relative to the start of the <SCRIPT> block
                var script = inlineScriptBlocks[parts[2] - 1];
                if (script) {
                    source = getSource(item.url);
                    if (source) {
                        source = source.join('\n');
                        var pos = source.indexOf(script.innerText);
                        if (pos >= 0) {
                            item.line = relativeLine + source.substring(0, pos).split('\n').length;
                        }
                    }
                }
            } else if ((parts = lineRE3.exec(lines[i]))) {
                var url = window.location.href.replace(/#.*$/, ''),
                    line = parts[1];
                var re = new RegExp(escapeCodeAsRegExpForMatchingInsideHTML(lines[i + 1]));
                source = findSourceInUrls(re, [url]);
                item = {
                    'url': url,
                    'line': source ? source.line : line,
                    'func': ''
                };
            }

            if (item) {
                if (!item.func) {
                    item.func = guessFunctionName(item.url, item.line);
                }
                var context = gatherContext(item.url, item.line);
                var midline = (context ? context[Math.floor(context.length / 2)] : null);
                if (context && midline.replace(/^\s*/, '') === lines[i + 1].replace(/^\s*/, '')) {
                    item.context = context;
                } else {
                    // if (context) alert("Context mismatch. Correct midline:\n" + lines[i+1] + "\n\nMidline:\n" + midline + "\n\nContext:\n" + context.join("\n") + "\n\nURL:\n" + item.url);
                    item.context = [lines[i + 1]];
                }
                stack.push(item);
            }
        }
        if (!stack.length) {
            return null; // could not parse multiline exception message as Opera stack trace
        }

        return {
            'mode': 'multiline',
            'name': ex.name,
            'message': lines[0],
            'url': document.location.href,
            'stack': stack,
            'useragent': navigator.userAgent
        };
    }

    /**
     * Adds information about the first frame to incomplete stack traces.
     * Safari and IE require this to get complete data on the first frame.
     * @param {Object.<string, *>} stackInfo Stack trace information from
     * one of the compute* methods.
     * @param {string} url The URL of the script that caused an error.
     * @param {(number|string)} lineNo The line number of the script that
     * caused an error.
     * @param {string=} message The error generated by the browser, which
     * hopefully contains the name of the object that caused the error.
     * @return {boolean} Whether or not the stack information was
     * augmented.
     */
    function augmentStackTraceWithInitialElement(stackInfo, url, lineNo, message) {
        var initial = {
            'url': url,
            'line': lineNo
        };

        if (initial.url && initial.line) {
            stackInfo.incomplete = false;

            if (!initial.func) {
                initial.func = guessFunctionName(initial.url, initial.line);
            }

            if (!initial.context) {
                initial.context = gatherContext(initial.url, initial.line);
            }

            var reference = / '([^']+)' /.exec(message);
            if (reference) {
                initial.column = findSourceInLine(reference[1], initial.url, initial.line);
            }

            if (stackInfo.stack.length > 0) {
                if (stackInfo.stack[0].url === initial.url) {
                    if (stackInfo.stack[0].line === initial.line) {
                        return false; // already in stack trace
                    } else if (!stackInfo.stack[0].line && stackInfo.stack[0].func === initial.func) {
                        stackInfo.stack[0].line = initial.line;
                        stackInfo.stack[0].context = initial.context;
                        return false;
                    }
                }
            }

            stackInfo.stack.unshift(initial);
            stackInfo.partial = true;
            return true;
        } else {
            stackInfo.incomplete = true;
        }

        return false;
    }

    /**
     * Computes stack trace information by walking the arguments.caller
     * chain at the time the exception occurred. This will cause earlier
     * frames to be missed but is the only way to get any stack trace in
     * Safari and IE. The top frame is restored by
     * {@link augmentStackTraceWithInitialElement}.
     * @param {Error} ex
     * @return {?Object.<string, *>} Stack trace information.
     */
    function computeStackTraceByWalkingCallerChain(ex, depth) {
        var functionName = /function\s+([_$a-zA-Z\xA0-\uFFFF][_$a-zA-Z0-9\xA0-\uFFFF]*)?\s*\(/i,
            stack = [],
            funcs = {},
            recursion = false,
            parts,
            item,
            source;

        for (var curr = computeStackTraceByWalkingCallerChain.caller; curr && !recursion; curr = curr.caller) {
            if (curr === computeStackTrace || curr === TraceKit.report) {
                // console.log('skipping internal function');
                continue;
            }

            item = {
                'url': null,
                'func': UNKNOWN_FUNCTION,
                'line': null,
                'column': null
            };

            if (curr.name) {
                item.func = curr.name;
            } else if ((parts = functionName.exec(curr.toString()))) {
                item.func = parts[1];
            }

            if ((source = findSourceByFunctionBody(curr))) {
                item.url = source.url;
                item.line = source.line;

                if (item.func === UNKNOWN_FUNCTION) {
                    item.func = guessFunctionName(item.url, item.line);
                }

                var reference = / '([^']+)' /.exec(ex.message || ex.description);
                if (reference) {
                    item.column = findSourceInLine(reference[1], source.url, source.line);
                }
            }

            if (funcs['' + curr]) {
                recursion = true;
            }else{
                funcs['' + curr] = true;
            }

            stack.push(item);
        }

        if (depth) {
            // console.log('depth is ' + depth);
            // console.log('stack is ' + stack.length);
            stack.splice(0, depth);
        }

        var result = {
            'mode': 'callers',
            'name': ex.name,
            'message': ex.message,
            'url': document.location.href,
            'stack': stack,
            'useragent': navigator.userAgent
        };
        augmentStackTraceWithInitialElement(result, ex.sourceURL || ex.fileName, ex.line || ex.lineNumber, ex.message || ex.description);
        return result;
    }

    /**
     * Computes a stack trace for an exception.
     * @param {Error} ex
     * @param {(string|number)=} depth
     */
    function computeStackTrace(ex, depth) {
        var stack = null;
        depth = (depth == null ? 0 : +depth);

        try {
            // This must be tried first because Opera 10 *destroys*
            // its stacktrace property if you try to access the stack
            // property first!!
            stack = computeStackTraceFromStacktraceProp(ex);
            if (stack) {
                return stack;
            }
        } catch (e) {
            if (debug) {
                throw e;
            }
        }

        try {
            stack = computeStackTraceFromStackProp(ex);
            if (stack) {
                return stack;
            }
        } catch (e) {
            if (debug) {
                throw e;
            }
        }

        try {
            stack = computeStackTraceFromOperaMultiLineMessage(ex);
            if (stack) {
                return stack;
            }
        } catch (e) {
            if (debug) {
                throw e;
            }
        }

        try {
            stack = computeStackTraceByWalkingCallerChain(ex, depth + 1);
            if (stack) {
                return stack;
            }
        } catch (e) {
            if (debug) {
                throw e;
            }
        }

        return {
            'mode': 'failed'
        };
    }

    /**
     * Logs a stacktrace starting from the previous call and working down.
     * @param {(number|string)=} depth How many frames deep to trace.
     * @return {Object.<string, *>} Stack trace information.
     */
    function computeStackTraceOfCaller(depth) {
        depth = (depth == null ? 0 : +depth) + 1; // "+ 1" because "ofCaller" should drop one frame
        try {
            throw new Error();
        } catch (ex) {
            return computeStackTrace(ex, depth + 1);
        }

        return null;
    }

    computeStackTrace.augmentStackTraceWithInitialElement = augmentStackTraceWithInitialElement;
    computeStackTrace.guessFunctionName = guessFunctionName;
    computeStackTrace.gatherContext = gatherContext;
    computeStackTrace.ofCaller = computeStackTraceOfCaller;

    return computeStackTrace;
}());

/**
 * Extends support for global error handling for asynchronous browser
 * functions. Adopted from Closure Library's errorhandler.js
 */
(function extendToAsynchronousCallbacks() {
    var _helper = function _helper(fnName) {
        var originalFn = window[fnName];
        window[fnName] = function traceKitAsyncExtension() {
            // Make a copy of the arguments
            var args = _slice.call(arguments);
            var originalCallback = args[0];
            if (typeof (originalCallback) === 'function') {
                args[0] = TraceKit.wrap(originalCallback);
            }
            // IE < 9 doesn't support .call/.apply on setInterval/setTimeout, but it
            // also only supports 2 argument and doesn't care what "this" is, so we
            // can just call the original function directly.
            if (originalFn.apply) {
                return originalFn.apply(this, args);
            } else {
                return originalFn(args[0], args[1]);
            }
        };
    };

    _helper('setTimeout');
    _helper('setInterval');
}());

//Default options:
if (!TraceKit.remoteFetching) {
  TraceKit.remoteFetching = true;
}
if (!TraceKit.collectWindowErrors) {
  TraceKit.collectWindowErrors = true;
}
if (!TraceKit.linesOfContext || TraceKit.linesOfContext < 1) {
  // 5 lines before, the offending line, 5 lines after
  TraceKit.linesOfContext = 11;
}



// Export to global object
window.TraceKit = TraceKit;

}(window));
;
window.wpcom = window.wpcom || {};

(function( $, TraceKit, wpcom ) {
	var Errors;

	wpcom.Errors = wpcom.Errors || {};
	Errors = wpcom.Errors;
	Errors.options = {};
	Errors.options.ignoreErrors = [];
	Errors.sent = [];
	// ignore errors triggered by scripts limited by same-origin policy
	// see https://bugzilla.mozilla.org/show_bug.cgi?id=363897
	// these errors don't include a stack trace for security reasons so are not useful
	Errors.options.ignoreErrors.push('Script error.');

	TraceKit.remoteFetching = false;
	Errors.logger = function(uniqueData) {
		try {
			if (!uniqueData.stack) {
				uniqueData.stack = (new Error('make stack')).stack;
				if (uniqueData.stack) {
					uniqueData.stack = uniqueData.stack.toString();
				}
			}
		} catch (e) {}

		// don't log errors that have a message that we have decided to ignore
		if ( _.isObject( uniqueData ) && _.has( uniqueData, 'message' ) && _.contains( Errors.options.ignoreErrors, uniqueData.message ) ) {
			return;
		}

		if ( _.contains( Errors.sent, uniqueData ) ) {
			return;
		}

		if (typeof uniqueData !== 'string') {
			uniqueData = JSON.stringify(uniqueData);
		}

		if ( _.contains( Errors.sent, uniqueData ) ) {
			return;
		}

		Errors.send(uniqueData);
		Errors.sent.push( uniqueData );
	};

	Errors.send = function(stackTrace) {
		var data = {
			'action': 'wpcom_log_js_error',
			'newdash_error': stackTrace
		};
		$.ajax({
			url: '/wp-admin/admin-ajax.php',
			type: 'POST',
			data: data
		});
	};

	TraceKit.report.subscribe( Errors.logger );

})( jQuery, window.TraceKit, window.wpcom );
;
// Generated by CoffeeScript 1.4.0
(function() {
  var $, cardFromNumber, cardFromType, cards, defaultFormat, formatBackCardNumber, formatBackExpiry, formatCardNumber, formatExpiry, formatForwardExpiry, formatForwardSlash, hasTextSelected, luhnCheck, reFormatCardNumber, restrictCVC, restrictCardNumber, restrictExpiry, restrictNumeric, setCardType,
    __slice = [].slice,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    _this = this;

  $ = jQuery;

  $.payment = {};

  $.payment.fn = {};

  $.fn.payment = function() {
    var args, method;
    method = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    return $.payment.fn[method].apply(this, args);
  };

  defaultFormat = /(\d{1,4})/g;

  cards = [
    {
      type: 'maestro',
      pattern: /^(5018|5020|5038|6304|6759|676[1-3])/,
      format: defaultFormat,
      length: [12, 13, 14, 15, 16, 17, 18, 19],
      cvcLength: [3],
      luhn: true
    }, {
      type: 'dinersclub',
      pattern: /^(36|38|30[0-5])/,
      format: defaultFormat,
      length: [14],
      cvcLength: [3],
      luhn: true
    }, {
      type: 'laser',
      pattern: /^(6706|6771|6709)/,
      format: defaultFormat,
      length: [16, 17, 18, 19],
      cvcLength: [3],
      luhn: true
    }, {
      type: 'jcb',
      pattern: /^35/,
      format: defaultFormat,
      length: [16],
      cvcLength: [3],
      luhn: true
    }, {
      type: 'unionpay',
      pattern: /^62/,
      format: defaultFormat,
      length: [16, 17, 18, 19],
      cvcLength: [3],
      luhn: false
    }, {
      type: 'discover',
      pattern: /^(6011|65|64[4-9]|622)/,
      format: defaultFormat,
      length: [16],
      cvcLength: [3],
      luhn: true
    }, {
      type: 'mastercard',
      pattern: /^5[1-5]/,
      format: defaultFormat,
      length: [16],
      cvcLength: [3],
      luhn: true
    }, {
      type: 'amex',
      pattern: /^3[47]/,
      format: /(\d{1,4})(\d{1,6})?(\d{1,5})?/,
      length: [15],
      cvcLength: [3, 4],
      luhn: true
    }, {
      type: 'visa',
      pattern: /^4/,
      format: defaultFormat,
      length: [13, 14, 15, 16],
      cvcLength: [3],
      luhn: true
    }
  ];

  cardFromNumber = function(num) {
    var card, _i, _len;
    num = (num + '').replace(/\D/g, '');
    for (_i = 0, _len = cards.length; _i < _len; _i++) {
      card = cards[_i];
      if (card.pattern.test(num)) {
        return card;
      }
    }
  };

  cardFromType = function(type) {
    var card, _i, _len;
    for (_i = 0, _len = cards.length; _i < _len; _i++) {
      card = cards[_i];
      if (card.type === type) {
        return card;
      }
    }
  };

  luhnCheck = function(num) {
    var digit, digits, odd, sum, _i, _len;
    odd = true;
    sum = 0;
    digits = (num + '').split('').reverse();
    for (_i = 0, _len = digits.length; _i < _len; _i++) {
      digit = digits[_i];
      digit = parseInt(digit, 10);
      if ((odd = !odd)) {
        digit *= 2;
      }
      if (digit > 9) {
        digit -= 9;
      }
      sum += digit;
    }
    return sum % 10 === 0;
  };

  hasTextSelected = function($target) {
    var _ref;
    if (($target.prop('selectionStart') != null) && $target.prop('selectionStart') !== $target.prop('selectionEnd')) {
      return true;
    }
    if (typeof document !== "undefined" && document !== null ? (_ref = document.selection) != null ? typeof _ref.createRange === "function" ? _ref.createRange().text : void 0 : void 0 : void 0) {
      return true;
    }
    return false;
  };

  reFormatCardNumber = function(e) {
    var _this = this;
    return setTimeout(function() {
      var $target, value;
      $target = $(e.currentTarget);
      value = $target.val();
      value = $.payment.formatCardNumber(value);
      return $target.val(value);
    });
  };

  formatCardNumber = function(e) {
    var $target, card, digit, length, re, upperLength, value;
    digit = String.fromCharCode(e.which);
    if (!/^\d+$/.test(digit)) {
      return;
    }
    $target = $(e.currentTarget);
    value = $target.val();
    card = cardFromNumber(value + digit);
    length = (value.replace(/\D/g, '') + digit).length;
    upperLength = 16;
    if (card) {
      upperLength = card.length[card.length.length - 1];
    }
    if (length >= upperLength) {
      return;
    }
    if (($target.prop('selectionStart') != null) && $target.prop('selectionStart') !== value.length) {
      return;
    }
    if (card && card.type === 'amex') {
      re = /^(\d{4}|\d{4}\s\d{6})$/;
    } else {
      re = /(?:^|\s)(\d{4})$/;
    }
    if (re.test(value)) {
      e.preventDefault();
      return $target.val(value + ' ' + digit);
    } else if (re.test(value + digit)) {
      e.preventDefault();
      return $target.val(value + digit + ' ');
    }
  };

  formatBackCardNumber = function(e) {
    var $target, value;
    $target = $(e.currentTarget);
    value = $target.val();
    if (e.meta) {
      return;
    }
    if (e.which !== 8) {
      return;
    }
    if (($target.prop('selectionStart') != null) && $target.prop('selectionStart') !== value.length) {
      return;
    }
    if (/\d\s$/.test(value)) {
      e.preventDefault();
      return $target.val(value.replace(/\d\s$/, ''));
    } else if (/\s\d?$/.test(value)) {
      e.preventDefault();
      return $target.val(value.replace(/\s\d?$/, ''));
    }
  };

  formatExpiry = function(e) {
    var $target, digit, val;
    digit = String.fromCharCode(e.which);
    if (!/^\d+$/.test(digit)) {
      return;
    }
    $target = $(e.currentTarget);
    val = $target.val() + digit;
    if (/^\d$/.test(val) && (val !== '0' && val !== '1')) {
      e.preventDefault();
      return $target.val("0" + val + " / ");
    } else if (/^\d\d$/.test(val)) {
      e.preventDefault();
      return $target.val("" + val + " / ");
    }
  };

  formatForwardExpiry = function(e) {
    var $target, digit, val;
    digit = String.fromCharCode(e.which);
    if (!/^\d+$/.test(digit)) {
      return;
    }
    $target = $(e.currentTarget);
    val = $target.val();
    if (/^\d\d$/.test(val)) {
      return $target.val("" + val + " / ");
    }
  };

  formatForwardSlash = function(e) {
    var $target, slash, val;
    slash = String.fromCharCode(e.which);
    if (slash !== '/') {
      return;
    }
    $target = $(e.currentTarget);
    val = $target.val();
    if (/^\d$/.test(val) && val !== '0') {
      return $target.val("0" + val + " / ");
    }
  };

  formatBackExpiry = function(e) {
    var $target, value;
    if (e.meta) {
      return;
    }
    $target = $(e.currentTarget);
    value = $target.val();
    if (e.which !== 8) {
      return;
    }
    if (($target.prop('selectionStart') != null) && $target.prop('selectionStart') !== value.length) {
      return;
    }
    if (/\d(\s|\/)+$/.test(value)) {
      e.preventDefault();
      return $target.val(value.replace(/\d(\s|\/)*$/, ''));
    } else if (/\s\/\s?\d?$/.test(value)) {
      e.preventDefault();
      return $target.val(value.replace(/\s\/\s?\d?$/, ''));
    }
  };

  restrictNumeric = function(e) {
    var input;
    if (e.metaKey || e.ctrlKey) {
      return true;
    }
    if (e.which === 32) {
      return false;
    }
    if (e.which === 0) {
      return true;
    }
    if (e.which < 33) {
      return true;
    }
    input = String.fromCharCode(e.which);
    return !!/[\d\s]/.test(input);
  };

  restrictCardNumber = function(e) {
    var $target, card, digit, value;
    $target = $(e.currentTarget);
    digit = String.fromCharCode(e.which);
    if (!/^\d+$/.test(digit)) {
      return;
    }
    if (hasTextSelected($target)) {
      return;
    }
    value = ($target.val() + digit).replace(/\D/g, '');
    card = cardFromNumber(value);
    if (card) {
      return value.length <= card.length[card.length.length - 1];
    } else {
      return value.length <= 16;
    }
  };

  restrictExpiry = function(e) {
    var $target, digit, value;
    $target = $(e.currentTarget);
    digit = String.fromCharCode(e.which);
    if (!/^\d+$/.test(digit)) {
      return;
    }
    if (hasTextSelected($target)) {
      return;
    }
    value = $target.val() + digit;
    value = value.replace(/\D/g, '');
    if (value.length > 6) {
      return false;
    }
  };

  restrictCVC = function(e) {
    var $target, digit, val;
    $target = $(e.currentTarget);
    digit = String.fromCharCode(e.which);
    if (!/^\d+$/.test(digit)) {
      return;
    }
    val = $target.val() + digit;
    return val.length <= 4;
  };

  setCardType = function(e) {
    var $target, allTypes, card, cardType, val;
    $target = $(e.currentTarget);
    val = $target.val();
    cardType = $.payment.cardType(val) || 'unknown';
    if (!$target.hasClass(cardType)) {
      allTypes = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = cards.length; _i < _len; _i++) {
          card = cards[_i];
          _results.push(card.type);
        }
        return _results;
      })();
      $target.removeClass('unknown');
      $target.removeClass(allTypes.join(' '));
      $target.addClass(cardType);
      $target.toggleClass('identified', cardType !== 'unknown');
      return $target.trigger('payment.cardType', cardType);
    }
  };

  $.payment.fn.formatCardCVC = function() {
    this.payment('restrictNumeric');
    this.on('keypress', restrictCVC);
    return this;
  };

  $.payment.fn.formatCardExpiry = function() {
    this.payment('restrictNumeric');
    this.on('keypress', restrictExpiry);
    this.on('keypress', formatExpiry);
    this.on('keypress', formatForwardSlash);
    this.on('keypress', formatForwardExpiry);
    this.on('keydown', formatBackExpiry);
    return this;
  };

  $.payment.fn.formatCardNumber = function() {
    this.payment('restrictNumeric');
    this.on('keypress', restrictCardNumber);
    this.on('keypress', formatCardNumber);
    this.on('keydown', formatBackCardNumber);
    this.on('keyup', setCardType);
    this.on('paste', reFormatCardNumber);
    return this;
  };

  $.payment.fn.restrictNumeric = function() {
    this.on('keypress', restrictNumeric);
    return this;
  };

  $.payment.fn.cardExpiryVal = function() {
    return $.payment.cardExpiryVal($(this).val());
  };

  $.payment.cardExpiryVal = function(value) {
    var month, prefix, year, _ref;
    value = value.replace(/\s/g, '');
    _ref = value.split('/', 2), month = _ref[0], year = _ref[1];
    if ((year != null ? year.length : void 0) === 2 && /^\d+$/.test(year)) {
      prefix = (new Date).getFullYear();
      prefix = prefix.toString().slice(0, 2);
      year = prefix + year;
    }
    month = parseInt(month, 10);
    year = parseInt(year, 10);
    return {
      month: month,
      year: year
    };
  };

  $.payment.validateCardNumber = function(num) {
    var card, _ref;
    num = (num + '').replace(/\s+|-/g, '');
    if (!/^\d+$/.test(num)) {
      return false;
    }
    card = cardFromNumber(num);
    if (!card) {
      return false;
    }
    return (_ref = num.length, __indexOf.call(card.length, _ref) >= 0) && (card.luhn === false || luhnCheck(num));
  };

  $.payment.validateCardExpiry = function(month, year) {
    var currentTime, expiry, prefix, _ref;
    if (typeof month === 'object' && 'month' in month) {
      _ref = month, month = _ref.month, year = _ref.year;
    }
    if (!(month && year)) {
      return false;
    }
    month = $.trim(month);
    year = $.trim(year);
    if (!/^\d+$/.test(month)) {
      return false;
    }
    if (!/^\d+$/.test(year)) {
      return false;
    }
    if (!(parseInt(month, 10) <= 12)) {
      return false;
    }
    if (year.length === 2) {
      prefix = (new Date).getFullYear();
      prefix = prefix.toString().slice(0, 2);
      year = prefix + year;
    }
    expiry = new Date(year, month);
    currentTime = new Date;
    expiry.setMonth(expiry.getMonth() - 1);
    expiry.setMonth(expiry.getMonth() + 1, 1);
    return expiry > currentTime;
  };

  $.payment.validateCardCVC = function(cvc, type) {
    var _ref, _ref1;
    cvc = $.trim(cvc);
    if (!/^\d+$/.test(cvc)) {
      return false;
    }
    if (type) {
      return _ref = cvc.length, __indexOf.call((_ref1 = cardFromType(type)) != null ? _ref1.cvcLength : void 0, _ref) >= 0;
    } else {
      return cvc.length >= 3 && cvc.length <= 4;
    }
  };

  $.payment.cardType = function(num) {
    var _ref;
    if (!num) {
      return null;
    }
    return ((_ref = cardFromNumber(num)) != null ? _ref.type : void 0) || null;
  };

  $.payment.formatCardNumber = function(num) {
    var card, groups, upperLength, _ref;
    card = cardFromNumber(num);
    if (!card) {
      return num;
    }
    upperLength = card.length[card.length.length - 1];
    num = num.replace(/\D/g, '');
    num = num.slice(0, +upperLength + 1 || 9e9);
    if (card.format.global) {
      return (_ref = num.match(card.format)) != null ? _ref.join(' ') : void 0;
    } else {
      groups = card.format.exec(num);
      if (groups != null) {
        groups.shift();
      }
      return groups != null ? groups.join(' ') : void 0;
    }
  };

}).call(this);;
// This library has been patched by Automattic. Please don't upgrade without
// also making sure that our fixes are applied.

//
// Generated on Sun Dec 16 2012 22:47:05 GMT-0500 (EST) by Nodejitsu, Inc (Using Codesurgeon).
// Version 1.1.9
//
// Modified by Automattic
//

(function (exports) {


/*
 * browser.js: Browser specific functionality for director.
 *
 * (C) 2011, Nodejitsu Inc.
 * MIT LICENSE
 *
 */

if (!Array.prototype.filter) {
  Array.prototype.filter = function(filter, that) {
    var other = [], v;
    for (var i = 0, n = this.length; i < n; i++) {
      if (i in this && filter.call(that, v = this[i], i, this)) {
        other.push(v);
      }
    }
    return other;
  };
}

if (!Array.isArray){
  Array.isArray = function(obj) {
    return Object.prototype.toString.call(obj) === '[object Array]';
  };
}

var dloc = document.location;

function dlocHashEmpty() {
  // Non-IE browsers return '' when the address bar shows '#'; Director's logic
  // assumes both mean empty.
  return dloc.hash === '' || dloc.hash === '#';
}

var listener = {
  mode: 'modern',
  hash: dloc.hash,
  history: false,
  skip: false, // WPCOM: added to support https://github.com/flatiron/director/pull/179

  check: function () {
    var h = dloc.hash;
    if (h != this.hash) {
      this.hash = h;
      this.onHashChanged();
    }
  },

  fire: function () {
    if (this.mode === 'modern') {
      this.history === true ? window.onpopstate() : window.onhashchange();
    }
    else {
      this.onHashChanged();
    }
  },

  init: function (fn, history) {
    var self = this;
    this.history = history;

    if (!Router.listeners) {
      Router.listeners = [];
    }

		function onchange(onChangeEvent) {
			// WPCOM: added to support https://github.com/flatiron/director/pull/179
			if (!self.skip) {
				for (var i = 0, l = Router.listeners.length; i < l; i++) {
					Router.listeners[i](onChangeEvent);
				}
			}
			self.skip = false;
		}

    //note IE8 is being counted as 'modern' because it has the hashchange event
    if ('onhashchange' in window && (document.documentMode === undefined
      || document.documentMode > 7)) {
      // At least for now HTML5 history is available for 'modern' browsers only
      if (this.history === true) {
        window.onpopstate = onchange;
      }
      else {
        window.onhashchange = onchange;
      }
      this.mode = 'modern';
    }
    else {
      //
      // IE support, based on a concept by Erik Arvidson ...
      //
      var frame = document.createElement('iframe');
      frame.id = 'state-frame';
      frame.style.display = 'none';
      document.body.appendChild(frame);
      this.writeFrame('');

      if ('onpropertychange' in document && 'attachEvent' in document) {
        document.attachEvent('onpropertychange', function () {
          if (event.propertyName === 'location') {
            self.check();
          }
        });
      }

      window.setInterval(function () { self.check(); }, 50);

      this.onHashChanged = onchange;
      this.mode = 'legacy';
    }

    Router.listeners.push(fn);
    return this.mode;
  },

  destroy: function (fn) {
    if (!Router || !Router.listeners) {
      return;
    }

    var listeners = Router.listeners;

    for (var i = listeners.length - 1; i >= 0; i--) {
      if (listeners[i] === fn) {
        listeners.splice(i, 1);
      }
    }
  },

  setHash: function (s) {
    // Mozilla always adds an entry to the history
    if (this.mode === 'legacy') {
      this.writeFrame(s);
    }

    if (this.history === true) {
      window.history.pushState({}, document.title, s);
      // Fire an onpopstate event manually since pushing does not obviously
      // trigger the pop event.
      this.fire();
    } else {
      dloc.hash = (s[0] === '/') ? s : '/' + s;
    }
    return this;
  },

  writeFrame: function (s) {
    // IE support...
    var f = document.getElementById('state-frame');
    var d = f.contentDocument || f.contentWindow.document;
    d.open();
    d.write("<script>_hash = '" + s + "'; onload = parent.listener.syncHash;<script>");
    d.close();
  },

  syncHash: function () {
    // IE support...
    var s = this._hash;
    if (s != dloc.hash) {
      dloc.hash = s;
    }
    return this;
  },

  onHashChanged: function () {}
};

var Router = exports.Router = function (routes) {
  var ua = window.navigator.userAgent;

  if (!(this instanceof Router)) return new Router(routes);

  this.params   = {};
  this.routes   = {};
  this.methods  = ['on', 'once', 'after', 'before'];
  this.scope    = [];
  this._methods = {};

  this._insert = this.insert;
  this.insert = this.insertEx;

  // We only want Android 2, stock browser, and not Chrome which identifies
  // itself as 'Mobile Safari' as well
  if (ua.indexOf('Android 2') !== -1 &&
      ua.indexOf('Mobile Safari') !== -1 &&
        ua.indexOf('Chrome') === -1) {
    this.historySupport = false;
  } else {
    this.historySupport = (window.history && 'replaceState' in window.history);
  }

  this.configure();
  this.mount(routes || {});
};

Router.prototype.init = function (r) {
  var routeTo = null,
      self = this;
  this.handler = function(onChangeEvent) {
    var newURL = onChangeEvent && onChangeEvent.newURL || window.location.hash;
    var url = self.history === true ? self.getPath() : newURL.replace(/.*#/, '').replace( '!', '' ).split("?", 1)[0];
    var fullURL = window.location.pathname + window.location.search;
    if ( self.history && self.previousURL === fullURL ) {
      return;
    }
    self.previousURL = fullURL;
    self.dispatch('on', url);
  };

  listener.init(this.handler, this.history);

  if (this.history === false) {
    if (r && dloc.hash.replace(/^#/, '') !== r.replace('/^#/', '')) {
      dloc.hash = r;
    } else if (!dlocHashEmpty()) {
      self.dispatch('on', dloc.hash.replace(/^#/, '').replace( '!', '' ).split("?", 1)[0]);
    }
  }
  else {
    if (r) {
      routeTo = r;
    }
    else {
      if (!dlocHashEmpty()) {
        routeTo = dloc.hash.replace(/^#/, '').replace( '!', '' ).split("?", 1)[0];
      }
    }
    if (routeTo && this.run_in_init === true) {
      window.history.replaceState({}, document.title, routeTo);
      this.handler();
    }

  }

  return this;
};

Router.prototype.explode = function () {
  var v = this.history === true ? this.getPath() : dloc.hash;
  if (v.charAt(1) === '/') { v=v.slice(1) }
  return v.slice(1, v.length).split("/");
};

// WPCOM: modified to support https://github.com/flatiron/director/pull/179
Router.prototype.setRoute = function (i, v, val, skip) {
  var url = this.explode(),
    urlString;

  if (typeof i === 'number' && typeof v === 'string') {
    url[i] = v;
		skip = val;
  }
  else if (typeof val === 'string') {
    url.splice(i, v, s);
  }
  else {
    url = [i];
		skip = v;
  }

  urlString = url.join( '/' );

  /**
   * WPCOM: Modified to support busting out for Calypso routes
   * see https://github.com/Automattic/calypso-pre-oss/issues/2018
   */
  if ( this.isExternalRoute( urlString ) ) {
    // ensure there's a leading slash on our route
    if ( urlString.substr(0, 1) !== '/' ) {
      urlString = '/' + urlString;
    }
    window.location = window.location.protocol + '//' + window.location.host + urlString;
    return url;
  }

	listener.skip = skip;
  listener.setHash( urlString );
  return url;
};

/**
 * WPCOM: To support busting out for Calypso routes
 * see https://github.com/Automattic/calypso-pre-oss/issues/2018
 */
Router.prototype.isExternalRoute = function( path ) {
  var route, regex;

  if ( ! this.externalRoutes || ! this.externalRoutes.length ) {
    return false;
  }

  for ( var i = 0; i < this.externalRoutes.length; i++ ) {
    route = this.externalRoutes[i];
    regex = new RegExp( '^' + route );

    if ( regex.test( path ) ) {
      return true;
    }
  }
  return false;
};

Router.prototype.redirectTo = function (i, v, val) {
  var url = this.explode();

  if (typeof i === 'number' && typeof v === 'string') {
    url[i] = v;
  }
  else if (typeof val === 'string') {
    url.splice(i, v, s);
  }
  else {
    url = [i];
  }

  url = url.join('/');

  if (listener.mode === 'modern') {
    if (this.history) {
      window.history.replaceState({}, document.title, url);
      listener.fire();
    }
    else {
      dloc.hash = (url[0] === '/') ? url : '/' + url;
    }
  }
  else {
    listener.setFrame(url);
  }
};


//
// ### function insertEx(method, path, route, parent)
// #### @method {string} Method to insert the specific `route`.
// #### @path {Array} Parsed path to insert the `route` at.
// #### @route {Array|function} Route handlers to insert.
// #### @parent {Object} **Optional** Parent "routes" to insert into.
// insert a callback that will only occur once per the matched route.
//
Router.prototype.insertEx = function(method, path, route, parent) {
  if (method === "once") {
    method = "on";
    route = function(route) {
      var once = false;
      return function() {
        if (once) return;
        once = true;
        return route.apply(this, arguments);
      };
    }(route);
  }
  return this._insert(method, path, route, parent);
};

Router.prototype.getRoute = function (v) {
  var ret = v;

  if (typeof v === "number") {
    ret = this.explode()[v];
  }
  else if (typeof v === "string"){
    var h = this.explode();
    ret = h.indexOf(v);
  }
  else {
    ret = this.explode();
  }

  return ret;
};

Router.prototype.destroy = function () {
  listener.destroy(this.handler);
  return this;
};

Router.prototype.getPath = function () {
  var path = window.location.pathname;
  if (path.substr(0, 1) !== '/') {
    path = '/' + path;
  }
  return path;
};
function _every(arr, iterator) {
  for (var i = 0; i < arr.length; i += 1) {
    if (iterator(arr[i], i, arr) === false) {
      return;
    }
  }
}

function _flatten(arr) {
  var flat = [];
  for (var i = 0, n = arr.length; i < n; i++) {
    flat = flat.concat(arr[i]);
  }
  return flat;
}

function _asyncEverySeries(arr, iterator, callback) {
  if (!arr.length) {
    return callback();
  }
  var completed = 0;
  (function iterate() {
    iterator(arr[completed], function(err) {
      if (err || err === false) {
        callback(err);
        callback = function() {};
      } else {
        completed += 1;
        if (completed === arr.length) {
          callback();
        } else {
          iterate();
        }
      }
    });
  })();
}

function paramifyString(str, params, mod) {
  mod = str;
  for (var param in params) {
    if (params.hasOwnProperty(param)) {
      mod = params[param](str);
      if (mod !== str) {
        break;
      }
    }
  }
  return mod === str ? "([._a-zA-Z0-9-%]+)" : mod;
}

function regifyString(str, params) {
  var matches, last = 0, out = "";
  while (matches = str.substr(last).match(/[^\w\d\- %@&]*\*[^\w\d\- %@&]*/)) {
    last = matches.index + matches[0].length;
    matches[0] = matches[0].replace(/^\*/, "([_.()!\\ %@&a-zA-Z0-9-]+)");
    out += str.substr(0, matches.index) + matches[0];
  }
  str = out += str.substr(last);
  var captures = str.match(/:([^\/]+)/ig), length;
  if (captures) {
    length = captures.length;
    for (var i = 0; i < length; i++) {
      str = str.replace(captures[i], paramifyString(captures[i], params));
    }
  }
  return str;
}

function terminator(routes, delimiter, start, stop) {
  var last = 0, left = 0, right = 0, start = (start || "(").toString(), stop = (stop || ")").toString(), i;
  for (i = 0; i < routes.length; i++) {
    var chunk = routes[i];
    if (chunk.indexOf(start, last) > chunk.indexOf(stop, last) || ~chunk.indexOf(start, last) && !~chunk.indexOf(stop, last) || !~chunk.indexOf(start, last) && ~chunk.indexOf(stop, last)) {
      left = chunk.indexOf(start, last);
      right = chunk.indexOf(stop, last);
      if (~left && !~right || !~left && ~right) {
        var tmp = routes.slice(0, (i || 1) + 1).join(delimiter);
        routes = [ tmp ].concat(routes.slice((i || 1) + 1));
      }
      last = (right > left ? right : left) + 1;
      i = 0;
    } else {
      last = 0;
    }
  }
  return routes;
}

Router.prototype.configure = function(options) {
  options = options || {};
  for (var i = 0; i < this.methods.length; i++) {
    this._methods[this.methods[i]] = true;
  }
  this.externalRoutes = options.externalRoutes || false;
  this.recurse = options.recurse || this.recurse || false;
  this.async = options.async || false;
  this.delimiter = options.delimiter || "/";
  this.strict = typeof options.strict === "undefined" ? true : options.strict;
  this.notfound = options.notfound;
  this.resource = options.resource;
  this.history = options.html5history && this.historySupport || false;
  this.run_in_init = this.history === true && options.run_handler_in_init !== false;
  this.every = {
    after: options.after || null,
    before: options.before || null,
    on: options.on || null
  };
  return this;
};

Router.prototype.param = function(token, matcher) {
  if (token[0] !== ":") {
    token = ":" + token;
  }
  var compiled = new RegExp(token, "g");
  this.params[token] = function(str) {
    return str.replace(compiled, matcher.source || matcher);
  };
};

Router.prototype.on = Router.prototype.route = function(method, path, route) {
  var self = this;
  if (!route && typeof path == "function") {
    route = path;
    path = method;
    method = "on";
  }
  if (Array.isArray(path)) {
    return path.forEach(function(p) {
      self.on(method, p, route);
    });
  }
  if (path.source) {
    path = path.source.replace(/\\\//ig, "/");
  }
  if (Array.isArray(method)) {
    return method.forEach(function(m) {
      self.on(m.toLowerCase(), path, route);
    });
  }
  path = path.split(new RegExp(this.delimiter));
  path = terminator(path, this.delimiter);
  this.insert(method, this.scope.concat(path), route);
};

Router.prototype.dispatch = function(method, path, callback) {
  var self = this, fns = this.traverse(method, path, this.routes, ""), invoked = this._invoked, after;
  this._invoked = true;
  if (!fns || fns.length === 0) {
    this.last = [];
    if (typeof this.notfound === "function") {
      this.invoke([ this.notfound ], {
        method: method,
        path: path
      }, callback);
    }
    return false;
  }
  if (this.recurse === "forward") {
    fns = fns.reverse();
  }
  function updateAndInvoke() {
    self.last = fns.after;
    self.invoke(self.runlist(fns), self, callback);
  }
  after = this.every && this.every.after ? [ this.every.after ].concat(this.last) : [ this.last ];
  if (after && after.length > 0 && invoked) {
    if (this.async) {
      this.invoke(after, this, updateAndInvoke);
    } else {
      this.invoke(after, this);
      updateAndInvoke();
    }
    return true;
  }
  updateAndInvoke();
  return true;
};

Router.prototype.invoke = function(fns, thisArg, callback) {
  var self = this;
  if (this.async) {
    _asyncEverySeries(fns, function apply(fn, next) {
      if (Array.isArray(fn)) {
        return _asyncEverySeries(fn, apply, next);
      } else if (typeof fn == "function") {
        fn.apply(thisArg, fns.captures.concat(next));
      }
    }, function() {
      if (callback) {
        callback.apply(thisArg, arguments);
      }
    });
  } else {
    _every(fns, function apply(fn) {
      if (Array.isArray(fn)) {
        return _every(fn, apply);
      } else if (typeof fn === "function") {
        return fn.apply(thisArg, fns.captures || []);
      } else if (typeof fn === "string" && self.resource) {
        self.resource[fn].apply(thisArg, fns.captures || []);
      }
    });
  }
};

Router.prototype.traverse = function(method, path, routes, regexp, filter) {
  var fns = [], current, exact, match, next, that;
  function filterRoutes(routes) {
    if (!filter) {
      return routes;
    }
    function deepCopy(source) {
      var result = [];
      for (var i = 0; i < source.length; i++) {
        result[i] = Array.isArray(source[i]) ? deepCopy(source[i]) : source[i];
      }
      return result;
    }
    function applyFilter(fns) {
      for (var i = fns.length - 1; i >= 0; i--) {
        if (Array.isArray(fns[i])) {
          applyFilter(fns[i]);
          if (fns[i].length === 0) {
            fns.splice(i, 1);
          }
        } else {
          if (!filter(fns[i])) {
            fns.splice(i, 1);
          }
        }
      }
    }
    var newRoutes = deepCopy(routes);
    newRoutes.matched = routes.matched;
    newRoutes.captures = routes.captures;
    newRoutes.after = routes.after.filter(filter);
    applyFilter(newRoutes);
    return newRoutes;
  }
  if (path === this.delimiter && routes[method]) {
    next = [ [ routes.before, routes[method] ].filter(Boolean) ];
    next.after = [ routes.after ].filter(Boolean);
    next.matched = true;
    next.captures = [];
    return filterRoutes(next);
  }
  for (var r in routes) {
    if (routes.hasOwnProperty(r) && (!this._methods[r] || this._methods[r] && typeof routes[r] === "object" && !Array.isArray(routes[r]))) {
      current = exact = regexp + this.delimiter + r;
      if (!this.strict) {
        exact += "[" + this.delimiter + "]?";
      }
      match = path.match(new RegExp("^" + exact));
      if (!match) {
        continue;
      }
      if (match[0] && match[0] == path && routes[r][method]) {
        next = [ [ routes[r].before, routes[r][method] ].filter(Boolean) ];
        next.after = [ routes[r].after ].filter(Boolean);
        next.matched = true;
        next.captures = match.slice(1);
        if (this.recurse && routes === this.routes) {
          next.push([ routes.before, routes.on ].filter(Boolean));
          next.after = next.after.concat([ routes.after ].filter(Boolean));
        }
        return filterRoutes(next);
      }
      next = this.traverse(method, path, routes[r], current);
      if (next.matched) {
        if (next.length > 0) {
          fns = fns.concat(next);
        }
        if (this.recurse) {
          fns.push([ routes[r].before, routes[r].on ].filter(Boolean));
          next.after = next.after.concat([ routes[r].after ].filter(Boolean));
          if (routes === this.routes) {
            fns.push([ routes["before"], routes["on"] ].filter(Boolean));
            next.after = next.after.concat([ routes["after"] ].filter(Boolean));
          }
        }
        fns.matched = true;
        fns.captures = next.captures;
        fns.after = next.after;
        return filterRoutes(fns);
      }
    }
  }
  return false;
};

Router.prototype.insert = function(method, path, route, parent) {
  var methodType, parentType, isArray, nested, part;
  path = path.filter(function(p) {
    return p && p.length > 0;
  });
  parent = parent || this.routes;
  part = path.shift();
  if (/\:|\*/.test(part) && !/\\d|\\w/.test(part)) {
    part = regifyString(part, this.params);
  }
  if (path.length > 0) {
    parent[part] = parent[part] || {};
    return this.insert(method, path, route, parent[part]);
  }
  if (!part && !path.length && parent === this.routes) {
    methodType = typeof parent[method];
    switch (methodType) {
     case "function":
      parent[method] = [ parent[method], route ];
      return;
     case "object":
      parent[method].push(route);
      return;
     case "undefined":
      parent[method] = route;
      return;
    }
    return;
  }
  parentType = typeof parent[part];
  isArray = Array.isArray(parent[part]);
  if (parent[part] && !isArray && parentType == "object") {
    methodType = typeof parent[part][method];
    switch (methodType) {
     case "function":
      parent[part][method] = [ parent[part][method], route ];
      return;
     case "object":
      parent[part][method].push(route);
      return;
     case "undefined":
      parent[part][method] = route;
      return;
    }
  } else if (parentType == "undefined") {
    nested = {};
    nested[method] = route;
    parent[part] = nested;
    return;
  }
  throw new Error("Invalid route context: " + parentType);
};



Router.prototype.extend = function(methods) {
  var self = this, len = methods.length, i;
  function extend(method) {
    self._methods[method] = true;
    self[method] = function() {
      var extra = arguments.length === 1 ? [ method, "" ] : [ method ];
      self.on.apply(self, extra.concat(Array.prototype.slice.call(arguments)));
    };
  }
  for (i = 0; i < len; i++) {
    extend(methods[i]);
  }
};

Router.prototype.runlist = function(fns) {
  var runlist = this.every && this.every.before ? [ this.every.before ].concat(_flatten(fns)) : _flatten(fns);
  if (this.every && this.every.on) {
    runlist.push(this.every.on);
  }
  runlist.captures = fns.captures;
  runlist.source = fns.source;
  return runlist;
};

Router.prototype.mount = function(routes, path) {
  if (!routes || typeof routes !== "object" || Array.isArray(routes)) {
    return;
  }
  var self = this;
  path = path || [];
  if (!Array.isArray(path)) {
    path = path.split(self.delimiter);
  }
  function insertOrMount(route, local) {
    var rename = route, parts = route.split(self.delimiter), routeType = typeof routes[route], isRoute = parts[0] === "" || !self._methods[parts[0]], event = isRoute ? "on" : rename;
    if (isRoute) {
      rename = rename.slice((rename.match(new RegExp(self.delimiter)) || [ "" ])[0].length);
      parts.shift();
    }
    if (isRoute && routeType === "object" && !Array.isArray(routes[route])) {
      local = local.concat(parts);
      self.mount(routes[route], local);
      return;
    }
    if (isRoute) {
      local = local.concat(rename.split(self.delimiter));
      local = terminator(local, self.delimiter);
    }
    self.insert(event, local, routes[route]);
  }
  for (var route in routes) {
    if (routes.hasOwnProperty(route)) {
      insertOrMount(route, path.slice(0));
    }
  }
};



}(typeof exports === "object" ? exports : window));
;
(function($){
	var wpcom = window.wpcom || {};
	wpcom.keyNav = {};

	/** Generic j/k key command View
	 *  pressing j selects the next item
	 *  pressing k selects the previous item
	 *  pressing t scrolls to the top and selects the first item
	 *
	 *  An element (el) is required in the instantiation
	 *  Accepts options:
	 *		item: class name of the items between which to navigate
	 *		selectedStyle: applied to the selected item
	 *		unselectedStyle: applied to all unselected items when an item is selected
	 *		rejectIfKey: (function) a callback that's run before firing an action - ignore if true
	 *		callbacks: object with chars as keys and functions as values
	 *			- for a given char key, if corresponding upper / lower-case char isn't specified, fire on both
	 *			- distinct lower and uppercase keys are supported
	 *			- supported non-alphanumeric, non-char keys: 'return', 'esc'
	 */
	wpcom.keyNav.KeyNavView = function( options ) {
		var $el, builtinPromise, callbacks, currentClass, hasKeyedCommand, item, KeyNavView,
			rejectIfKey, selectedStyle, settingCurrent, unselectedStyle;

		$el = $( options.el );
		if ( ! $el.length ) {
			return {};
		}
		item = options.item || 'item';
		selectedStyle = options.selectedStyle || {};
		unselectedStyle = options.unselectedStyle || {};
		rejectIfKey = options.rejectIfKey;
		callbacks = options.callbacks || {};
		currentClass = options.currentClass || 'keynav_current';
		hasKeyedCommand = false;

		KeyNavView = {
			//which classname will be applied to the selected item

			setCurrent: function( $newCurrent, scrollTo ) {
				var t = this,
					$currentSelected;

				// one at a time
				if ( settingCurrent || !$newCurrent || !$newCurrent.length ) {
					return $.Deferred().reject();
				}
				$currentSelected = t.getCurrent();

				if ( $currentSelected[0] === $newCurrent[0] ) {
					// $newCurrent is already the current item
					return $.Deferred().reject();
				}
				settingCurrent = true;
				return $.Deferred( function( dfd ) {
					var $allItems = $el.find( item );
					if ( !$allItems.length ) {
						dfd.reject();
					}
					$allItems.removeClass( currentClass ).css( unselectedStyle );
					$newCurrent.addClass( currentClass ).css( selectedStyle );

					if ( scrollTo ) {
						$( 'html, body' ).animate({
							scrollTop: $newCurrent.position().top
						}, {
							duration: 175,
							always: function() {
								dfd.resolve();
							}
						});
					}
					dfd.resolve();
				}).always( function() {
					settingCurrent = false;
				});
			},

			getCurrent: function() {
				return $el.find( item + '.' + currentClass ).filter( ':visible:first' );
			},

			getFirst: function() {
				return $el.find( item ).filter( ':visible:first' );
			},

			getFirstInViewport: function() {
				var $first = false;

				$el.find( item ).filter( ':visible' ).each( function( i, e ) {
					var $e = $(e);
					if ( isInViewport( $e ) ) {
						if ( !$first || $e.offset().top < $first.offset().top ) {
							$first = $e;
						}
					}
				});
				return $first;
			},

			getNext: function() {
				var $current = this.getCurrent(),
					$next;

				if ( $current.length ) {
					$next = $current.nextAll( item ).filter( ':visible:first' );
					if ( $next.length ) {
						return $next;
					}
					return false;
				}
				return this.getFirstInViewport();
			},

			getPrev: function() {
				var $current = this.getCurrent(),
					$prev;
				if ( $current.length ) {
					$prev = $current.prevAll( item ).filter( ':visible:first' );
					if ( $prev.length ) {
						return $prev;
					}
					return false;
				}
				return this.getFirstInViewport();
			},

			selectFirst: function( scrollTo ) {
				return this.setCurrent( this.getFirst(), scrollTo );
			},

			selectNext: function( scrollTo ) {
				var $next = this.getNext();
				if ( !$next ) {
					return $.Deferred().reject();
				}
				return this.setCurrent( $next, scrollTo );
			},

			selectPrev: function( scrollTo ) {
				var $prev = this.getPrev();
				if ( !$prev ) {
					return $.Deferred().reject();
				}
				return this.setCurrent( $prev, scrollTo );
			},

			unload: function() {
				var t = this;
				$(window).off( '.keynav' );
				$el.find( item ).off( '.keynav' );
				t = null;
			},

			bindUI: function() {
				var t = this;

				// set the nav item to current when you click it
				$el.on( 'click.keynav', item, function() {
					// but only if the user has already used a key command this pageload
					if ( hasKeyedCommand && !settingCurrent ) {
						t.setCurrent( $(this), false );
					}
				});

				// bind the built-in key commands
				$(window).on( 'keyup.keynav', function( e ) {
					if ( t.blockedByReject( e.which ) ) {
						return;
					}
					var $target = $(e.target);
					if ( $target.is( 'input' ) || $target.is( 'textarea' ) || $target.is( 'select' ) ) {
						return;
					}

					// one at a time
					if ( builtinPromise && builtinPromise.state() === 'pending' ) {
						return;
					}
					builtinPromise = $.Deferred( function( dfd ) {
						switch( e.which ) {
							// j - next
							case  74:
							case 106:
								hasKeyedCommand = true;
								return t.selectNext( true )
									.done( function() {
										dfd.resolve();
									})
									.fail( function () {
										dfd.reject();
									})
								;

							// k - previous
							case  75:
							case 107:
								hasKeyedCommand = true;
								return t.selectPrev( true )
									.done( function() {
										dfd.resolve();
									})
									.fail( function () {
										dfd.reject();
									})
								;

							// t - top
							case  84:
							case 116:
								hasKeyedCommand = true;
								$( 'html, body' ).animate( { scrollTop: 0 }, 'fast', function() {
									t.selectFirst()
										.done( function() {
											dfd.resolve();
										})
										.fail( function () {
											dfd.reject();
										})
									;
								});
								return;
						}
						dfd.reject();
					}).promise();
				});

				// unpack and bind the supplied callbacks if any
				_.each( callbacks, function( fun, key ) {
					var codes, upper, lower;
					if ( 'function' !== typeof fun ) {
						return;
					}
					codes = [];

					// hardcoded keys
					if ( 'return' === key ) {
						codes.push(13);
					}
					if ( 'esc' === key ) {
						codes.push(27);
					}

					// lower-case characters
					else if ( key.match( /^[a-z]$/ ) ) {
						codes.push( key.charCodeAt(0) );
						upper = key.toUpperCase();
						// if no upper case key is defined for this letter, use supplied function there too
						if ( 'function' !== typeof callbacks[ upper ] ) {
							codes.push( upper.charCodeAt(0) );
						}
					}

					// upper-case characters
					else if ( key.match( /^[A-Z]$/ ) ) {
						codes.push( key.charCodeAt(0) );
						lower = key.toLowerCase();
						// if no lower case key is defined for this letter, use supplied function there too
						if ( 'function' !== typeof callbacks[ lower ] ) {
							codes.push( lower.charCodeAt(0) );
						}
					}

					if ( !codes.length ) {
						return;
					}

					$(window).on( 'keyup.keynav', function( e ) {
						var which = e.which || 0,
							$target;

						if ( t.blockedByReject( which ) ) {
							return;
						}

						$target = $(e.target);
						if ( $target.is( 'input' ) || $target.is( 'textarea' ) || $target.is( 'select' ) ) {
							return;
						}

						if ( which && _.contains( codes, which ) ) {
							fun( t.getCurrent() );
						}
					});

				});
			},

			/* Run the supplied callback against the current state
			 * If this returns true, block the action
			 */
			blockedByReject: function( key ) {
				if ( typeof rejectIfKey !== 'function' ) {
					return false;
				}
				var _key;

				// hardcoded keys
				if ( key === 13 ) {
					_key = 'return';
				}
				else if ( key === 27 ) {
					_key = 'esc';
				}
				else {
					_key = String.fromCharCode( key );
				}

				return rejectIfKey( _key );
			}
		};

		KeyNavView.bindUI();
		return KeyNavView;
	};

	function isInViewport ( $el ) {
		var height,width,$win,viewport,bounds;

		height = $el.outerHeight();
		if ( !height ) {
			return;
		}
		width = $el.outerWidth();
		if ( !width ) {
			return;
		}
		$win = $(window);
		viewport = {
			top: $win.scrollTop(),
			left: $win.scrollLeft()
		};
		viewport.right = viewport.left + $win.width();
		viewport.bottom = viewport.top + $win.height();

		bounds = $el.offset();
		bounds.right = bounds.left + height;
		bounds.bottom = bounds.top + width;

		return (
			viewport.right > bounds.left &&
			viewport.left < bounds.right &&
			viewport.bottom > bounds.top &&
			viewport.top < bounds.bottom
		);
	}
})(jQuery);
;
/**
 * Copyright (c) 2007-2013 Ariel Flesler - aflesler<a>gmail<d>com | http://flesler.blogspot.com
 * Dual licensed under MIT and GPL.
 * @author Ariel Flesler
 * @version 1.4.6
 */
;(function($){var h=$.scrollTo=function(a,b,c){$(window).scrollTo(a,b,c)};h.defaults={axis:'xy',duration:parseFloat($.fn.jquery)>=1.3?0:1,limit:true};h.window=function(a){return $(window)._scrollable()};$.fn._scrollable=function(){return this.map(function(){var a=this,isWin=!a.nodeName||$.inArray(a.nodeName.toLowerCase(),['iframe','#document','html','body'])!=-1;if(!isWin)return a;var b=(a.contentWindow||a).document||a.ownerDocument||a;return/webkit/i.test(navigator.userAgent)||b.compatMode=='BackCompat'?b.body:b.documentElement})};$.fn.scrollTo=function(e,f,g){if(typeof f=='object'){g=f;f=0}if(typeof g=='function')g={onAfter:g};if(e=='max')e=9e9;g=$.extend({},h.defaults,g);f=f||g.duration;g.queue=g.queue&&g.axis.length>1;if(g.queue)f/=2;g.offset=both(g.offset);g.over=both(g.over);return this._scrollable().each(function(){if(e==null)return;var d=this,$elem=$(d),targ=e,toff,attr={},win=$elem.is('html,body');switch(typeof targ){case'number':case'string':if(/^([+-]=?)?\d+(\.\d+)?(px|%)?$/.test(targ)){targ=both(targ);break}targ=$(targ,this);if(!targ.length)return;case'object':if(targ.is||targ.style)toff=(targ=$(targ)).offset()}$.each(g.axis.split(''),function(i,a){var b=a=='x'?'Left':'Top',pos=b.toLowerCase(),key='scroll'+b,old=d[key],max=h.max(d,a);if(toff){attr[key]=toff[pos]+(win?0:old-$elem.offset()[pos]);if(g.margin){attr[key]-=parseInt(targ.css('margin'+b))||0;attr[key]-=parseInt(targ.css('border'+b+'Width'))||0}attr[key]+=g.offset[pos]||0;if(g.over[pos])attr[key]+=targ[a=='x'?'width':'height']()*g.over[pos]}else{var c=targ[pos];attr[key]=c.slice&&c.slice(-1)=='%'?parseFloat(c)/100*max:c}if(g.limit&&/^\d+$/.test(attr[key]))attr[key]=attr[key]<=0?0:Math.min(attr[key],max);if(!i&&g.queue){if(old!=attr[key])animate(g.onAfterFirst);delete attr[key]}});animate(g.onAfter);function animate(a){$elem.animate(attr,f,g.easing,a&&function(){a.call(this,targ,g)})}}).end()};h.max=function(a,b){var c=b=='x'?'Width':'Height',scroll='scroll'+c;if(!$(a).is('html,body'))return a[scroll]-$(a)[c.toLowerCase()]();var d='client'+c,html=a.ownerDocument.documentElement,body=a.ownerDocument.body;return Math.max(html[scroll],body[scroll])-Math.min(html[d],body[d])};function both(a){return typeof a=='object'?a:{top:a,left:a}}})(jQuery);
;
/*! jQuery UI - v1.10.4 - 2014-01-17
* http://jqueryui.com
* Copyright 2014 jQuery Foundation and other contributors; Licensed MIT */
(function(e,t){function i(t,i){var a,n,r,o=t.nodeName.toLowerCase();return"area"===o?(a=t.parentNode,n=a.name,t.href&&n&&"map"===a.nodeName.toLowerCase()?(r=e("img[usemap=#"+n+"]")[0],!!r&&s(r)):!1):(/input|select|textarea|button|object/.test(o)?!t.disabled:"a"===o?t.href||i:i)&&s(t)}function s(t){return e.expr.filters.visible(t)&&!e(t).parents().addBack().filter(function(){return"hidden"===e.css(this,"visibility")}).length}var a=0,n=/^ui-id-\d+$/;e.ui=e.ui||{},e.extend(e.ui,{version:"1.10.4",keyCode:{BACKSPACE:8,COMMA:188,DELETE:46,DOWN:40,END:35,ENTER:13,ESCAPE:27,HOME:36,LEFT:37,NUMPAD_ADD:107,NUMPAD_DECIMAL:110,NUMPAD_DIVIDE:111,NUMPAD_ENTER:108,NUMPAD_MULTIPLY:106,NUMPAD_SUBTRACT:109,PAGE_DOWN:34,PAGE_UP:33,PERIOD:190,RIGHT:39,SPACE:32,TAB:9,UP:38}}),e.fn.extend({focus:function(t){return function(i,s){return"number"==typeof i?this.each(function(){var t=this;setTimeout(function(){e(t).focus(),s&&s.call(t)},i)}):t.apply(this,arguments)}}(e.fn.focus),scrollParent:function(){var t;return t=e.ui.ie&&/(static|relative)/.test(this.css("position"))||/absolute/.test(this.css("position"))?this.parents().filter(function(){return/(relative|absolute|fixed)/.test(e.css(this,"position"))&&/(auto|scroll)/.test(e.css(this,"overflow")+e.css(this,"overflow-y")+e.css(this,"overflow-x"))}).eq(0):this.parents().filter(function(){return/(auto|scroll)/.test(e.css(this,"overflow")+e.css(this,"overflow-y")+e.css(this,"overflow-x"))}).eq(0),/fixed/.test(this.css("position"))||!t.length?e(document):t},zIndex:function(i){if(i!==t)return this.css("zIndex",i);if(this.length)for(var s,a,n=e(this[0]);n.length&&n[0]!==document;){if(s=n.css("position"),("absolute"===s||"relative"===s||"fixed"===s)&&(a=parseInt(n.css("zIndex"),10),!isNaN(a)&&0!==a))return a;n=n.parent()}return 0},uniqueId:function(){return this.each(function(){this.id||(this.id="ui-id-"+ ++a)})},removeUniqueId:function(){return this.each(function(){n.test(this.id)&&e(this).removeAttr("id")})}}),e.extend(e.expr[":"],{data:e.expr.createPseudo?e.expr.createPseudo(function(t){return function(i){return!!e.data(i,t)}}):function(t,i,s){return!!e.data(t,s[3])},focusable:function(t){return i(t,!isNaN(e.attr(t,"tabindex")))},tabbable:function(t){var s=e.attr(t,"tabindex"),a=isNaN(s);return(a||s>=0)&&i(t,!a)}}),e("<a>").outerWidth(1).jquery||e.each(["Width","Height"],function(i,s){function a(t,i,s,a){return e.each(n,function(){i-=parseFloat(e.css(t,"padding"+this))||0,s&&(i-=parseFloat(e.css(t,"border"+this+"Width"))||0),a&&(i-=parseFloat(e.css(t,"margin"+this))||0)}),i}var n="Width"===s?["Left","Right"]:["Top","Bottom"],r=s.toLowerCase(),o={innerWidth:e.fn.innerWidth,innerHeight:e.fn.innerHeight,outerWidth:e.fn.outerWidth,outerHeight:e.fn.outerHeight};e.fn["inner"+s]=function(i){return i===t?o["inner"+s].call(this):this.each(function(){e(this).css(r,a(this,i)+"px")})},e.fn["outer"+s]=function(t,i){return"number"!=typeof t?o["outer"+s].call(this,t):this.each(function(){e(this).css(r,a(this,t,!0,i)+"px")})}}),e.fn.addBack||(e.fn.addBack=function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}),e("<a>").data("a-b","a").removeData("a-b").data("a-b")&&(e.fn.removeData=function(t){return function(i){return arguments.length?t.call(this,e.camelCase(i)):t.call(this)}}(e.fn.removeData)),e.ui.ie=!!/msie [\w.]+/.exec(navigator.userAgent.toLowerCase()),e.support.selectstart="onselectstart"in document.createElement("div"),e.fn.extend({disableSelection:function(){return this.bind((e.support.selectstart?"selectstart":"mousedown")+".ui-disableSelection",function(e){e.preventDefault()})},enableSelection:function(){return this.unbind(".ui-disableSelection")}}),e.extend(e.ui,{plugin:{add:function(t,i,s){var a,n=e.ui[t].prototype;for(a in s)n.plugins[a]=n.plugins[a]||[],n.plugins[a].push([i,s[a]])},call:function(e,t,i){var s,a=e.plugins[t];if(a&&e.element[0].parentNode&&11!==e.element[0].parentNode.nodeType)for(s=0;a.length>s;s++)e.options[a[s][0]]&&a[s][1].apply(e.element,i)}},hasScroll:function(t,i){if("hidden"===e(t).css("overflow"))return!1;var s=i&&"left"===i?"scrollLeft":"scrollTop",a=!1;return t[s]>0?!0:(t[s]=1,a=t[s]>0,t[s]=0,a)}})})(jQuery);;
/*! jQuery UI - v1.10.4 - 2014-01-17
* http://jqueryui.com
* Copyright 2014 jQuery Foundation and other contributors; Licensed MIT */
(function(e,t){var i=0,s=Array.prototype.slice,n=e.cleanData;e.cleanData=function(t){for(var i,s=0;null!=(i=t[s]);s++)try{e(i).triggerHandler("remove")}catch(a){}n(t)},e.widget=function(i,s,n){var a,r,o,h,l={},u=i.split(".")[0];i=i.split(".")[1],a=u+"-"+i,n||(n=s,s=e.Widget),e.expr[":"][a.toLowerCase()]=function(t){return!!e.data(t,a)},e[u]=e[u]||{},r=e[u][i],o=e[u][i]=function(e,i){return this._createWidget?(arguments.length&&this._createWidget(e,i),t):new o(e,i)},e.extend(o,r,{version:n.version,_proto:e.extend({},n),_childConstructors:[]}),h=new s,h.options=e.widget.extend({},h.options),e.each(n,function(i,n){return e.isFunction(n)?(l[i]=function(){var e=function(){return s.prototype[i].apply(this,arguments)},t=function(e){return s.prototype[i].apply(this,e)};return function(){var i,s=this._super,a=this._superApply;return this._super=e,this._superApply=t,i=n.apply(this,arguments),this._super=s,this._superApply=a,i}}(),t):(l[i]=n,t)}),o.prototype=e.widget.extend(h,{widgetEventPrefix:r?h.widgetEventPrefix||i:i},l,{constructor:o,namespace:u,widgetName:i,widgetFullName:a}),r?(e.each(r._childConstructors,function(t,i){var s=i.prototype;e.widget(s.namespace+"."+s.widgetName,o,i._proto)}),delete r._childConstructors):s._childConstructors.push(o),e.widget.bridge(i,o)},e.widget.extend=function(i){for(var n,a,r=s.call(arguments,1),o=0,h=r.length;h>o;o++)for(n in r[o])a=r[o][n],r[o].hasOwnProperty(n)&&a!==t&&(i[n]=e.isPlainObject(a)?e.isPlainObject(i[n])?e.widget.extend({},i[n],a):e.widget.extend({},a):a);return i},e.widget.bridge=function(i,n){var a=n.prototype.widgetFullName||i;e.fn[i]=function(r){var o="string"==typeof r,h=s.call(arguments,1),l=this;return r=!o&&h.length?e.widget.extend.apply(null,[r].concat(h)):r,o?this.each(function(){var s,n=e.data(this,a);return n?e.isFunction(n[r])&&"_"!==r.charAt(0)?(s=n[r].apply(n,h),s!==n&&s!==t?(l=s&&s.jquery?l.pushStack(s.get()):s,!1):t):e.error("no such method '"+r+"' for "+i+" widget instance"):e.error("cannot call methods on "+i+" prior to initialization; "+"attempted to call method '"+r+"'")}):this.each(function(){var t=e.data(this,a);t?t.option(r||{})._init():e.data(this,a,new n(r,this))}),l}},e.Widget=function(){},e.Widget._childConstructors=[],e.Widget.prototype={widgetName:"widget",widgetEventPrefix:"",defaultElement:"<div>",options:{disabled:!1,create:null},_createWidget:function(t,s){s=e(s||this.defaultElement||this)[0],this.element=e(s),this.uuid=i++,this.eventNamespace="."+this.widgetName+this.uuid,this.options=e.widget.extend({},this.options,this._getCreateOptions(),t),this.bindings=e(),this.hoverable=e(),this.focusable=e(),s!==this&&(e.data(s,this.widgetFullName,this),this._on(!0,this.element,{remove:function(e){e.target===s&&this.destroy()}}),this.document=e(s.style?s.ownerDocument:s.document||s),this.window=e(this.document[0].defaultView||this.document[0].parentWindow)),this._create(),this._trigger("create",null,this._getCreateEventData()),this._init()},_getCreateOptions:e.noop,_getCreateEventData:e.noop,_create:e.noop,_init:e.noop,destroy:function(){this._destroy(),this.element.unbind(this.eventNamespace).removeData(this.widgetName).removeData(this.widgetFullName).removeData(e.camelCase(this.widgetFullName)),this.widget().unbind(this.eventNamespace).removeAttr("aria-disabled").removeClass(this.widgetFullName+"-disabled "+"ui-state-disabled"),this.bindings.unbind(this.eventNamespace),this.hoverable.removeClass("ui-state-hover"),this.focusable.removeClass("ui-state-focus")},_destroy:e.noop,widget:function(){return this.element},option:function(i,s){var n,a,r,o=i;if(0===arguments.length)return e.widget.extend({},this.options);if("string"==typeof i)if(o={},n=i.split("."),i=n.shift(),n.length){for(a=o[i]=e.widget.extend({},this.options[i]),r=0;n.length-1>r;r++)a[n[r]]=a[n[r]]||{},a=a[n[r]];if(i=n.pop(),1===arguments.length)return a[i]===t?null:a[i];a[i]=s}else{if(1===arguments.length)return this.options[i]===t?null:this.options[i];o[i]=s}return this._setOptions(o),this},_setOptions:function(e){var t;for(t in e)this._setOption(t,e[t]);return this},_setOption:function(e,t){return this.options[e]=t,"disabled"===e&&(this.widget().toggleClass(this.widgetFullName+"-disabled ui-state-disabled",!!t).attr("aria-disabled",t),this.hoverable.removeClass("ui-state-hover"),this.focusable.removeClass("ui-state-focus")),this},enable:function(){return this._setOption("disabled",!1)},disable:function(){return this._setOption("disabled",!0)},_on:function(i,s,n){var a,r=this;"boolean"!=typeof i&&(n=s,s=i,i=!1),n?(s=a=e(s),this.bindings=this.bindings.add(s)):(n=s,s=this.element,a=this.widget()),e.each(n,function(n,o){function h(){return i||r.options.disabled!==!0&&!e(this).hasClass("ui-state-disabled")?("string"==typeof o?r[o]:o).apply(r,arguments):t}"string"!=typeof o&&(h.guid=o.guid=o.guid||h.guid||e.guid++);var l=n.match(/^(\w+)\s*(.*)$/),u=l[1]+r.eventNamespace,c=l[2];c?a.delegate(c,u,h):s.bind(u,h)})},_off:function(e,t){t=(t||"").split(" ").join(this.eventNamespace+" ")+this.eventNamespace,e.unbind(t).undelegate(t)},_delay:function(e,t){function i(){return("string"==typeof e?s[e]:e).apply(s,arguments)}var s=this;return setTimeout(i,t||0)},_hoverable:function(t){this.hoverable=this.hoverable.add(t),this._on(t,{mouseenter:function(t){e(t.currentTarget).addClass("ui-state-hover")},mouseleave:function(t){e(t.currentTarget).removeClass("ui-state-hover")}})},_focusable:function(t){this.focusable=this.focusable.add(t),this._on(t,{focusin:function(t){e(t.currentTarget).addClass("ui-state-focus")},focusout:function(t){e(t.currentTarget).removeClass("ui-state-focus")}})},_trigger:function(t,i,s){var n,a,r=this.options[t];if(s=s||{},i=e.Event(i),i.type=(t===this.widgetEventPrefix?t:this.widgetEventPrefix+t).toLowerCase(),i.target=this.element[0],a=i.originalEvent)for(n in a)n in i||(i[n]=a[n]);return this.element.trigger(i,s),!(e.isFunction(r)&&r.apply(this.element[0],[i].concat(s))===!1||i.isDefaultPrevented())}},e.each({show:"fadeIn",hide:"fadeOut"},function(t,i){e.Widget.prototype["_"+t]=function(s,n,a){"string"==typeof n&&(n={effect:n});var r,o=n?n===!0||"number"==typeof n?i:n.effect||i:t;n=n||{},"number"==typeof n&&(n={duration:n}),r=!e.isEmptyObject(n),n.complete=a,n.delay&&s.delay(n.delay),r&&e.effects&&e.effects.effect[o]?s[t](n):o!==t&&s[o]?s[o](n.duration,n.easing,a):s.queue(function(i){e(this)[t](),a&&a.call(s[0]),i()})}})})(jQuery);;
/*! jQuery UI - v1.10.4 - 2014-01-17
* http://jqueryui.com
* Copyright 2014 jQuery Foundation and other contributors; Licensed MIT */
(function(e){var t=!1;e(document).mouseup(function(){t=!1}),e.widget("ui.mouse",{version:"1.10.4",options:{cancel:"input,textarea,button,select,option",distance:1,delay:0},_mouseInit:function(){var t=this;this.element.bind("mousedown."+this.widgetName,function(e){return t._mouseDown(e)}).bind("click."+this.widgetName,function(i){return!0===e.data(i.target,t.widgetName+".preventClickEvent")?(e.removeData(i.target,t.widgetName+".preventClickEvent"),i.stopImmediatePropagation(),!1):undefined}),this.started=!1},_mouseDestroy:function(){this.element.unbind("."+this.widgetName),this._mouseMoveDelegate&&e(document).unbind("mousemove."+this.widgetName,this._mouseMoveDelegate).unbind("mouseup."+this.widgetName,this._mouseUpDelegate)},_mouseDown:function(i){if(!t){this._mouseStarted&&this._mouseUp(i),this._mouseDownEvent=i;var s=this,n=1===i.which,a="string"==typeof this.options.cancel&&i.target.nodeName?e(i.target).closest(this.options.cancel).length:!1;return n&&!a&&this._mouseCapture(i)?(this.mouseDelayMet=!this.options.delay,this.mouseDelayMet||(this._mouseDelayTimer=setTimeout(function(){s.mouseDelayMet=!0},this.options.delay)),this._mouseDistanceMet(i)&&this._mouseDelayMet(i)&&(this._mouseStarted=this._mouseStart(i)!==!1,!this._mouseStarted)?(i.preventDefault(),!0):(!0===e.data(i.target,this.widgetName+".preventClickEvent")&&e.removeData(i.target,this.widgetName+".preventClickEvent"),this._mouseMoveDelegate=function(e){return s._mouseMove(e)},this._mouseUpDelegate=function(e){return s._mouseUp(e)},e(document).bind("mousemove."+this.widgetName,this._mouseMoveDelegate).bind("mouseup."+this.widgetName,this._mouseUpDelegate),i.preventDefault(),t=!0,!0)):!0}},_mouseMove:function(t){return e.ui.ie&&(!document.documentMode||9>document.documentMode)&&!t.button?this._mouseUp(t):this._mouseStarted?(this._mouseDrag(t),t.preventDefault()):(this._mouseDistanceMet(t)&&this._mouseDelayMet(t)&&(this._mouseStarted=this._mouseStart(this._mouseDownEvent,t)!==!1,this._mouseStarted?this._mouseDrag(t):this._mouseUp(t)),!this._mouseStarted)},_mouseUp:function(t){return e(document).unbind("mousemove."+this.widgetName,this._mouseMoveDelegate).unbind("mouseup."+this.widgetName,this._mouseUpDelegate),this._mouseStarted&&(this._mouseStarted=!1,t.target===this._mouseDownEvent.target&&e.data(t.target,this.widgetName+".preventClickEvent",!0),this._mouseStop(t)),!1},_mouseDistanceMet:function(e){return Math.max(Math.abs(this._mouseDownEvent.pageX-e.pageX),Math.abs(this._mouseDownEvent.pageY-e.pageY))>=this.options.distance},_mouseDelayMet:function(){return this.mouseDelayMet},_mouseStart:function(){},_mouseDrag:function(){},_mouseStop:function(){},_mouseCapture:function(){return!0}})})(jQuery);;
/*! jQuery UI - v1.10.4 - 2014-01-17
* http://jqueryui.com
* Copyright 2014 jQuery Foundation and other contributors; Licensed MIT */
(function(t){function e(t,e,i){return t>e&&e+i>t}function i(t){return/left|right/.test(t.css("float"))||/inline|table-cell/.test(t.css("display"))}t.widget("ui.sortable",t.ui.mouse,{version:"1.10.4",widgetEventPrefix:"sort",ready:!1,options:{appendTo:"parent",axis:!1,connectWith:!1,containment:!1,cursor:"auto",cursorAt:!1,dropOnEmpty:!0,forcePlaceholderSize:!1,forceHelperSize:!1,grid:!1,handle:!1,helper:"original",items:"> *",opacity:!1,placeholder:!1,revert:!1,scroll:!0,scrollSensitivity:20,scrollSpeed:20,scope:"default",tolerance:"intersect",zIndex:1e3,activate:null,beforeStop:null,change:null,deactivate:null,out:null,over:null,receive:null,remove:null,sort:null,start:null,stop:null,update:null},_create:function(){var t=this.options;this.containerCache={},this.element.addClass("ui-sortable"),this.refresh(),this.floating=this.items.length?"x"===t.axis||i(this.items[0].item):!1,this.offset=this.element.offset(),this._mouseInit(),this.ready=!0},_destroy:function(){this.element.removeClass("ui-sortable ui-sortable-disabled"),this._mouseDestroy();for(var t=this.items.length-1;t>=0;t--)this.items[t].item.removeData(this.widgetName+"-item");return this},_setOption:function(e,i){"disabled"===e?(this.options[e]=i,this.widget().toggleClass("ui-sortable-disabled",!!i)):t.Widget.prototype._setOption.apply(this,arguments)},_mouseCapture:function(e,i){var s=null,n=!1,a=this;return this.reverting?!1:this.options.disabled||"static"===this.options.type?!1:(this._refreshItems(e),t(e.target).parents().each(function(){return t.data(this,a.widgetName+"-item")===a?(s=t(this),!1):undefined}),t.data(e.target,a.widgetName+"-item")===a&&(s=t(e.target)),s?!this.options.handle||i||(t(this.options.handle,s).find("*").addBack().each(function(){this===e.target&&(n=!0)}),n)?(this.currentItem=s,this._removeCurrentsFromItems(),!0):!1:!1)},_mouseStart:function(e,i,s){var n,a,o=this.options;if(this.currentContainer=this,this.refreshPositions(),this.helper=this._createHelper(e),this._cacheHelperProportions(),this._cacheMargins(),this.scrollParent=this.helper.scrollParent(),this.offset=this.currentItem.offset(),this.offset={top:this.offset.top-this.margins.top,left:this.offset.left-this.margins.left},t.extend(this.offset,{click:{left:e.pageX-this.offset.left,top:e.pageY-this.offset.top},parent:this._getParentOffset(),relative:this._getRelativeOffset()}),this.helper.css("position","absolute"),this.cssPosition=this.helper.css("position"),this.originalPosition=this._generatePosition(e),this.originalPageX=e.pageX,this.originalPageY=e.pageY,o.cursorAt&&this._adjustOffsetFromHelper(o.cursorAt),this.domPosition={prev:this.currentItem.prev()[0],parent:this.currentItem.parent()[0]},this.helper[0]!==this.currentItem[0]&&this.currentItem.hide(),this._createPlaceholder(),o.containment&&this._setContainment(),o.cursor&&"auto"!==o.cursor&&(a=this.document.find("body"),this.storedCursor=a.css("cursor"),a.css("cursor",o.cursor),this.storedStylesheet=t("<style>*{ cursor: "+o.cursor+" !important; }</style>").appendTo(a)),o.opacity&&(this.helper.css("opacity")&&(this._storedOpacity=this.helper.css("opacity")),this.helper.css("opacity",o.opacity)),o.zIndex&&(this.helper.css("zIndex")&&(this._storedZIndex=this.helper.css("zIndex")),this.helper.css("zIndex",o.zIndex)),this.scrollParent[0]!==document&&"HTML"!==this.scrollParent[0].tagName&&(this.overflowOffset=this.scrollParent.offset()),this._trigger("start",e,this._uiHash()),this._preserveHelperProportions||this._cacheHelperProportions(),!s)for(n=this.containers.length-1;n>=0;n--)this.containers[n]._trigger("activate",e,this._uiHash(this));return t.ui.ddmanager&&(t.ui.ddmanager.current=this),t.ui.ddmanager&&!o.dropBehaviour&&t.ui.ddmanager.prepareOffsets(this,e),this.dragging=!0,this.helper.addClass("ui-sortable-helper"),this._mouseDrag(e),!0},_mouseDrag:function(e){var i,s,n,a,o=this.options,r=!1;for(this.position=this._generatePosition(e),this.positionAbs=this._convertPositionTo("absolute"),this.lastPositionAbs||(this.lastPositionAbs=this.positionAbs),this.options.scroll&&(this.scrollParent[0]!==document&&"HTML"!==this.scrollParent[0].tagName?(this.overflowOffset.top+this.scrollParent[0].offsetHeight-e.pageY<o.scrollSensitivity?this.scrollParent[0].scrollTop=r=this.scrollParent[0].scrollTop+o.scrollSpeed:e.pageY-this.overflowOffset.top<o.scrollSensitivity&&(this.scrollParent[0].scrollTop=r=this.scrollParent[0].scrollTop-o.scrollSpeed),this.overflowOffset.left+this.scrollParent[0].offsetWidth-e.pageX<o.scrollSensitivity?this.scrollParent[0].scrollLeft=r=this.scrollParent[0].scrollLeft+o.scrollSpeed:e.pageX-this.overflowOffset.left<o.scrollSensitivity&&(this.scrollParent[0].scrollLeft=r=this.scrollParent[0].scrollLeft-o.scrollSpeed)):(e.pageY-t(document).scrollTop()<o.scrollSensitivity?r=t(document).scrollTop(t(document).scrollTop()-o.scrollSpeed):t(window).height()-(e.pageY-t(document).scrollTop())<o.scrollSensitivity&&(r=t(document).scrollTop(t(document).scrollTop()+o.scrollSpeed)),e.pageX-t(document).scrollLeft()<o.scrollSensitivity?r=t(document).scrollLeft(t(document).scrollLeft()-o.scrollSpeed):t(window).width()-(e.pageX-t(document).scrollLeft())<o.scrollSensitivity&&(r=t(document).scrollLeft(t(document).scrollLeft()+o.scrollSpeed))),r!==!1&&t.ui.ddmanager&&!o.dropBehaviour&&t.ui.ddmanager.prepareOffsets(this,e)),this.positionAbs=this._convertPositionTo("absolute"),this.options.axis&&"y"===this.options.axis||(this.helper[0].style.left=this.position.left+"px"),this.options.axis&&"x"===this.options.axis||(this.helper[0].style.top=this.position.top+"px"),i=this.items.length-1;i>=0;i--)if(s=this.items[i],n=s.item[0],a=this._intersectsWithPointer(s),a&&s.instance===this.currentContainer&&n!==this.currentItem[0]&&this.placeholder[1===a?"next":"prev"]()[0]!==n&&!t.contains(this.placeholder[0],n)&&("semi-dynamic"===this.options.type?!t.contains(this.element[0],n):!0)){if(this.direction=1===a?"down":"up","pointer"!==this.options.tolerance&&!this._intersectsWithSides(s))break;this._rearrange(e,s),this._trigger("change",e,this._uiHash());break}return this._contactContainers(e),t.ui.ddmanager&&t.ui.ddmanager.drag(this,e),this._trigger("sort",e,this._uiHash()),this.lastPositionAbs=this.positionAbs,!1},_mouseStop:function(e,i){if(e){if(t.ui.ddmanager&&!this.options.dropBehaviour&&t.ui.ddmanager.drop(this,e),this.options.revert){var s=this,n=this.placeholder.offset(),a=this.options.axis,o={};a&&"x"!==a||(o.left=n.left-this.offset.parent.left-this.margins.left+(this.offsetParent[0]===document.body?0:this.offsetParent[0].scrollLeft)),a&&"y"!==a||(o.top=n.top-this.offset.parent.top-this.margins.top+(this.offsetParent[0]===document.body?0:this.offsetParent[0].scrollTop)),this.reverting=!0,t(this.helper).animate(o,parseInt(this.options.revert,10)||500,function(){s._clear(e)})}else this._clear(e,i);return!1}},cancel:function(){if(this.dragging){this._mouseUp({target:null}),"original"===this.options.helper?this.currentItem.css(this._storedCSS).removeClass("ui-sortable-helper"):this.currentItem.show();for(var e=this.containers.length-1;e>=0;e--)this.containers[e]._trigger("deactivate",null,this._uiHash(this)),this.containers[e].containerCache.over&&(this.containers[e]._trigger("out",null,this._uiHash(this)),this.containers[e].containerCache.over=0)}return this.placeholder&&(this.placeholder[0].parentNode&&this.placeholder[0].parentNode.removeChild(this.placeholder[0]),"original"!==this.options.helper&&this.helper&&this.helper[0].parentNode&&this.helper.remove(),t.extend(this,{helper:null,dragging:!1,reverting:!1,_noFinalSort:null}),this.domPosition.prev?t(this.domPosition.prev).after(this.currentItem):t(this.domPosition.parent).prepend(this.currentItem)),this},serialize:function(e){var i=this._getItemsAsjQuery(e&&e.connected),s=[];return e=e||{},t(i).each(function(){var i=(t(e.item||this).attr(e.attribute||"id")||"").match(e.expression||/(.+)[\-=_](.+)/);i&&s.push((e.key||i[1]+"[]")+"="+(e.key&&e.expression?i[1]:i[2]))}),!s.length&&e.key&&s.push(e.key+"="),s.join("&")},toArray:function(e){var i=this._getItemsAsjQuery(e&&e.connected),s=[];return e=e||{},i.each(function(){s.push(t(e.item||this).attr(e.attribute||"id")||"")}),s},_intersectsWith:function(t){var e=this.positionAbs.left,i=e+this.helperProportions.width,s=this.positionAbs.top,n=s+this.helperProportions.height,a=t.left,o=a+t.width,r=t.top,h=r+t.height,l=this.offset.click.top,c=this.offset.click.left,u="x"===this.options.axis||s+l>r&&h>s+l,d="y"===this.options.axis||e+c>a&&o>e+c,p=u&&d;return"pointer"===this.options.tolerance||this.options.forcePointerForContainers||"pointer"!==this.options.tolerance&&this.helperProportions[this.floating?"width":"height"]>t[this.floating?"width":"height"]?p:e+this.helperProportions.width/2>a&&o>i-this.helperProportions.width/2&&s+this.helperProportions.height/2>r&&h>n-this.helperProportions.height/2},_intersectsWithPointer:function(t){var i="x"===this.options.axis||e(this.positionAbs.top+this.offset.click.top,t.top,t.height),s="y"===this.options.axis||e(this.positionAbs.left+this.offset.click.left,t.left,t.width),n=i&&s,a=this._getDragVerticalDirection(),o=this._getDragHorizontalDirection();return n?this.floating?o&&"right"===o||"down"===a?2:1:a&&("down"===a?2:1):!1},_intersectsWithSides:function(t){var i=e(this.positionAbs.top+this.offset.click.top,t.top+t.height/2,t.height),s=e(this.positionAbs.left+this.offset.click.left,t.left+t.width/2,t.width),n=this._getDragVerticalDirection(),a=this._getDragHorizontalDirection();return this.floating&&a?"right"===a&&s||"left"===a&&!s:n&&("down"===n&&i||"up"===n&&!i)},_getDragVerticalDirection:function(){var t=this.positionAbs.top-this.lastPositionAbs.top;return 0!==t&&(t>0?"down":"up")},_getDragHorizontalDirection:function(){var t=this.positionAbs.left-this.lastPositionAbs.left;return 0!==t&&(t>0?"right":"left")},refresh:function(t){return this._refreshItems(t),this.refreshPositions(),this},_connectWith:function(){var t=this.options;return t.connectWith.constructor===String?[t.connectWith]:t.connectWith},_getItemsAsjQuery:function(e){function i(){r.push(this)}var s,n,a,o,r=[],h=[],l=this._connectWith();if(l&&e)for(s=l.length-1;s>=0;s--)for(a=t(l[s]),n=a.length-1;n>=0;n--)o=t.data(a[n],this.widgetFullName),o&&o!==this&&!o.options.disabled&&h.push([t.isFunction(o.options.items)?o.options.items.call(o.element):t(o.options.items,o.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"),o]);for(h.push([t.isFunction(this.options.items)?this.options.items.call(this.element,null,{options:this.options,item:this.currentItem}):t(this.options.items,this.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"),this]),s=h.length-1;s>=0;s--)h[s][0].each(i);return t(r)},_removeCurrentsFromItems:function(){var e=this.currentItem.find(":data("+this.widgetName+"-item)");this.items=t.grep(this.items,function(t){for(var i=0;e.length>i;i++)if(e[i]===t.item[0])return!1;return!0})},_refreshItems:function(e){this.items=[],this.containers=[this];var i,s,n,a,o,r,h,l,c=this.items,u=[[t.isFunction(this.options.items)?this.options.items.call(this.element[0],e,{item:this.currentItem}):t(this.options.items,this.element),this]],d=this._connectWith();if(d&&this.ready)for(i=d.length-1;i>=0;i--)for(n=t(d[i]),s=n.length-1;s>=0;s--)a=t.data(n[s],this.widgetFullName),a&&a!==this&&!a.options.disabled&&(u.push([t.isFunction(a.options.items)?a.options.items.call(a.element[0],e,{item:this.currentItem}):t(a.options.items,a.element),a]),this.containers.push(a));for(i=u.length-1;i>=0;i--)for(o=u[i][1],r=u[i][0],s=0,l=r.length;l>s;s++)h=t(r[s]),h.data(this.widgetName+"-item",o),c.push({item:h,instance:o,width:0,height:0,left:0,top:0})},refreshPositions:function(e){this.offsetParent&&this.helper&&(this.offset.parent=this._getParentOffset());var i,s,n,a;for(i=this.items.length-1;i>=0;i--)s=this.items[i],s.instance!==this.currentContainer&&this.currentContainer&&s.item[0]!==this.currentItem[0]||(n=this.options.toleranceElement?t(this.options.toleranceElement,s.item):s.item,e||(s.width=n.outerWidth(),s.height=n.outerHeight()),a=n.offset(),s.left=a.left,s.top=a.top);if(this.options.custom&&this.options.custom.refreshContainers)this.options.custom.refreshContainers.call(this);else for(i=this.containers.length-1;i>=0;i--)a=this.containers[i].element.offset(),this.containers[i].containerCache.left=a.left,this.containers[i].containerCache.top=a.top,this.containers[i].containerCache.width=this.containers[i].element.outerWidth(),this.containers[i].containerCache.height=this.containers[i].element.outerHeight();return this},_createPlaceholder:function(e){e=e||this;var i,s=e.options;s.placeholder&&s.placeholder.constructor!==String||(i=s.placeholder,s.placeholder={element:function(){var s=e.currentItem[0].nodeName.toLowerCase(),n=t("<"+s+">",e.document[0]).addClass(i||e.currentItem[0].className+" ui-sortable-placeholder").removeClass("ui-sortable-helper");return"tr"===s?e.currentItem.children().each(function(){t("<td>&#160;</td>",e.document[0]).attr("colspan",t(this).attr("colspan")||1).appendTo(n)}):"img"===s&&n.attr("src",e.currentItem.attr("src")),i||n.css("visibility","hidden"),n},update:function(t,n){(!i||s.forcePlaceholderSize)&&(n.height()||n.height(e.currentItem.innerHeight()-parseInt(e.currentItem.css("paddingTop")||0,10)-parseInt(e.currentItem.css("paddingBottom")||0,10)),n.width()||n.width(e.currentItem.innerWidth()-parseInt(e.currentItem.css("paddingLeft")||0,10)-parseInt(e.currentItem.css("paddingRight")||0,10)))}}),e.placeholder=t(s.placeholder.element.call(e.element,e.currentItem)),e.currentItem.after(e.placeholder),s.placeholder.update(e,e.placeholder)},_contactContainers:function(s){var n,a,o,r,h,l,c,u,d,p,f=null,m=null;for(n=this.containers.length-1;n>=0;n--)if(!t.contains(this.currentItem[0],this.containers[n].element[0]))if(this._intersectsWith(this.containers[n].containerCache)){if(f&&t.contains(this.containers[n].element[0],f.element[0]))continue;f=this.containers[n],m=n}else this.containers[n].containerCache.over&&(this.containers[n]._trigger("out",s,this._uiHash(this)),this.containers[n].containerCache.over=0);if(f)if(1===this.containers.length)this.containers[m].containerCache.over||(this.containers[m]._trigger("over",s,this._uiHash(this)),this.containers[m].containerCache.over=1);else{for(o=1e4,r=null,p=f.floating||i(this.currentItem),h=p?"left":"top",l=p?"width":"height",c=this.positionAbs[h]+this.offset.click[h],a=this.items.length-1;a>=0;a--)t.contains(this.containers[m].element[0],this.items[a].item[0])&&this.items[a].item[0]!==this.currentItem[0]&&(!p||e(this.positionAbs.top+this.offset.click.top,this.items[a].top,this.items[a].height))&&(u=this.items[a].item.offset()[h],d=!1,Math.abs(u-c)>Math.abs(u+this.items[a][l]-c)&&(d=!0,u+=this.items[a][l]),o>Math.abs(u-c)&&(o=Math.abs(u-c),r=this.items[a],this.direction=d?"up":"down"));if(!r&&!this.options.dropOnEmpty)return;if(this.currentContainer===this.containers[m])return;r?this._rearrange(s,r,null,!0):this._rearrange(s,null,this.containers[m].element,!0),this._trigger("change",s,this._uiHash()),this.containers[m]._trigger("change",s,this._uiHash(this)),this.currentContainer=this.containers[m],this.options.placeholder.update(this.currentContainer,this.placeholder),this.containers[m]._trigger("over",s,this._uiHash(this)),this.containers[m].containerCache.over=1}},_createHelper:function(e){var i=this.options,s=t.isFunction(i.helper)?t(i.helper.apply(this.element[0],[e,this.currentItem])):"clone"===i.helper?this.currentItem.clone():this.currentItem;return s.parents("body").length||t("parent"!==i.appendTo?i.appendTo:this.currentItem[0].parentNode)[0].appendChild(s[0]),s[0]===this.currentItem[0]&&(this._storedCSS={width:this.currentItem[0].style.width,height:this.currentItem[0].style.height,position:this.currentItem.css("position"),top:this.currentItem.css("top"),left:this.currentItem.css("left")}),(!s[0].style.width||i.forceHelperSize)&&s.width(this.currentItem.width()),(!s[0].style.height||i.forceHelperSize)&&s.height(this.currentItem.height()),s},_adjustOffsetFromHelper:function(e){"string"==typeof e&&(e=e.split(" ")),t.isArray(e)&&(e={left:+e[0],top:+e[1]||0}),"left"in e&&(this.offset.click.left=e.left+this.margins.left),"right"in e&&(this.offset.click.left=this.helperProportions.width-e.right+this.margins.left),"top"in e&&(this.offset.click.top=e.top+this.margins.top),"bottom"in e&&(this.offset.click.top=this.helperProportions.height-e.bottom+this.margins.top)},_getParentOffset:function(){this.offsetParent=this.helper.offsetParent();var e=this.offsetParent.offset();return"absolute"===this.cssPosition&&this.scrollParent[0]!==document&&t.contains(this.scrollParent[0],this.offsetParent[0])&&(e.left+=this.scrollParent.scrollLeft(),e.top+=this.scrollParent.scrollTop()),(this.offsetParent[0]===document.body||this.offsetParent[0].tagName&&"html"===this.offsetParent[0].tagName.toLowerCase()&&t.ui.ie)&&(e={top:0,left:0}),{top:e.top+(parseInt(this.offsetParent.css("borderTopWidth"),10)||0),left:e.left+(parseInt(this.offsetParent.css("borderLeftWidth"),10)||0)}},_getRelativeOffset:function(){if("relative"===this.cssPosition){var t=this.currentItem.position();return{top:t.top-(parseInt(this.helper.css("top"),10)||0)+this.scrollParent.scrollTop(),left:t.left-(parseInt(this.helper.css("left"),10)||0)+this.scrollParent.scrollLeft()}}return{top:0,left:0}},_cacheMargins:function(){this.margins={left:parseInt(this.currentItem.css("marginLeft"),10)||0,top:parseInt(this.currentItem.css("marginTop"),10)||0}},_cacheHelperProportions:function(){this.helperProportions={width:this.helper.outerWidth(),height:this.helper.outerHeight()}},_setContainment:function(){var e,i,s,n=this.options;"parent"===n.containment&&(n.containment=this.helper[0].parentNode),("document"===n.containment||"window"===n.containment)&&(this.containment=[0-this.offset.relative.left-this.offset.parent.left,0-this.offset.relative.top-this.offset.parent.top,t("document"===n.containment?document:window).width()-this.helperProportions.width-this.margins.left,(t("document"===n.containment?document:window).height()||document.body.parentNode.scrollHeight)-this.helperProportions.height-this.margins.top]),/^(document|window|parent)$/.test(n.containment)||(e=t(n.containment)[0],i=t(n.containment).offset(),s="hidden"!==t(e).css("overflow"),this.containment=[i.left+(parseInt(t(e).css("borderLeftWidth"),10)||0)+(parseInt(t(e).css("paddingLeft"),10)||0)-this.margins.left,i.top+(parseInt(t(e).css("borderTopWidth"),10)||0)+(parseInt(t(e).css("paddingTop"),10)||0)-this.margins.top,i.left+(s?Math.max(e.scrollWidth,e.offsetWidth):e.offsetWidth)-(parseInt(t(e).css("borderLeftWidth"),10)||0)-(parseInt(t(e).css("paddingRight"),10)||0)-this.helperProportions.width-this.margins.left,i.top+(s?Math.max(e.scrollHeight,e.offsetHeight):e.offsetHeight)-(parseInt(t(e).css("borderTopWidth"),10)||0)-(parseInt(t(e).css("paddingBottom"),10)||0)-this.helperProportions.height-this.margins.top])},_convertPositionTo:function(e,i){i||(i=this.position);var s="absolute"===e?1:-1,n="absolute"!==this.cssPosition||this.scrollParent[0]!==document&&t.contains(this.scrollParent[0],this.offsetParent[0])?this.scrollParent:this.offsetParent,a=/(html|body)/i.test(n[0].tagName);return{top:i.top+this.offset.relative.top*s+this.offset.parent.top*s-("fixed"===this.cssPosition?-this.scrollParent.scrollTop():a?0:n.scrollTop())*s,left:i.left+this.offset.relative.left*s+this.offset.parent.left*s-("fixed"===this.cssPosition?-this.scrollParent.scrollLeft():a?0:n.scrollLeft())*s}},_generatePosition:function(e){var i,s,n=this.options,a=e.pageX,o=e.pageY,r="absolute"!==this.cssPosition||this.scrollParent[0]!==document&&t.contains(this.scrollParent[0],this.offsetParent[0])?this.scrollParent:this.offsetParent,h=/(html|body)/i.test(r[0].tagName);return"relative"!==this.cssPosition||this.scrollParent[0]!==document&&this.scrollParent[0]!==this.offsetParent[0]||(this.offset.relative=this._getRelativeOffset()),this.originalPosition&&(this.containment&&(e.pageX-this.offset.click.left<this.containment[0]&&(a=this.containment[0]+this.offset.click.left),e.pageY-this.offset.click.top<this.containment[1]&&(o=this.containment[1]+this.offset.click.top),e.pageX-this.offset.click.left>this.containment[2]&&(a=this.containment[2]+this.offset.click.left),e.pageY-this.offset.click.top>this.containment[3]&&(o=this.containment[3]+this.offset.click.top)),n.grid&&(i=this.originalPageY+Math.round((o-this.originalPageY)/n.grid[1])*n.grid[1],o=this.containment?i-this.offset.click.top>=this.containment[1]&&i-this.offset.click.top<=this.containment[3]?i:i-this.offset.click.top>=this.containment[1]?i-n.grid[1]:i+n.grid[1]:i,s=this.originalPageX+Math.round((a-this.originalPageX)/n.grid[0])*n.grid[0],a=this.containment?s-this.offset.click.left>=this.containment[0]&&s-this.offset.click.left<=this.containment[2]?s:s-this.offset.click.left>=this.containment[0]?s-n.grid[0]:s+n.grid[0]:s)),{top:o-this.offset.click.top-this.offset.relative.top-this.offset.parent.top+("fixed"===this.cssPosition?-this.scrollParent.scrollTop():h?0:r.scrollTop()),left:a-this.offset.click.left-this.offset.relative.left-this.offset.parent.left+("fixed"===this.cssPosition?-this.scrollParent.scrollLeft():h?0:r.scrollLeft())}},_rearrange:function(t,e,i,s){i?i[0].appendChild(this.placeholder[0]):e.item[0].parentNode.insertBefore(this.placeholder[0],"down"===this.direction?e.item[0]:e.item[0].nextSibling),this.counter=this.counter?++this.counter:1;var n=this.counter;this._delay(function(){n===this.counter&&this.refreshPositions(!s)})},_clear:function(t,e){function i(t,e,i){return function(s){i._trigger(t,s,e._uiHash(e))}}this.reverting=!1;var s,n=[];if(!this._noFinalSort&&this.currentItem.parent().length&&this.placeholder.before(this.currentItem),this._noFinalSort=null,this.helper[0]===this.currentItem[0]){for(s in this._storedCSS)("auto"===this._storedCSS[s]||"static"===this._storedCSS[s])&&(this._storedCSS[s]="");this.currentItem.css(this._storedCSS).removeClass("ui-sortable-helper")}else this.currentItem.show();for(this.fromOutside&&!e&&n.push(function(t){this._trigger("receive",t,this._uiHash(this.fromOutside))}),!this.fromOutside&&this.domPosition.prev===this.currentItem.prev().not(".ui-sortable-helper")[0]&&this.domPosition.parent===this.currentItem.parent()[0]||e||n.push(function(t){this._trigger("update",t,this._uiHash())}),this!==this.currentContainer&&(e||(n.push(function(t){this._trigger("remove",t,this._uiHash())}),n.push(function(t){return function(e){t._trigger("receive",e,this._uiHash(this))}}.call(this,this.currentContainer)),n.push(function(t){return function(e){t._trigger("update",e,this._uiHash(this))}}.call(this,this.currentContainer)))),s=this.containers.length-1;s>=0;s--)e||n.push(i("deactivate",this,this.containers[s])),this.containers[s].containerCache.over&&(n.push(i("out",this,this.containers[s])),this.containers[s].containerCache.over=0);if(this.storedCursor&&(this.document.find("body").css("cursor",this.storedCursor),this.storedStylesheet.remove()),this._storedOpacity&&this.helper.css("opacity",this._storedOpacity),this._storedZIndex&&this.helper.css("zIndex","auto"===this._storedZIndex?"":this._storedZIndex),this.dragging=!1,this.cancelHelperRemoval){if(!e){for(this._trigger("beforeStop",t,this._uiHash()),s=0;n.length>s;s++)n[s].call(this,t);this._trigger("stop",t,this._uiHash())}return this.fromOutside=!1,!1}if(e||this._trigger("beforeStop",t,this._uiHash()),this.placeholder[0].parentNode.removeChild(this.placeholder[0]),this.helper[0]!==this.currentItem[0]&&this.helper.remove(),this.helper=null,!e){for(s=0;n.length>s;s++)n[s].call(this,t);this._trigger("stop",t,this._uiHash())}return this.fromOutside=!1,!0},_trigger:function(){t.Widget.prototype._trigger.apply(this,arguments)===!1&&this.cancel()},_uiHash:function(e){var i=e||this;return{helper:i.helper,placeholder:i.placeholder||t([]),position:i.position,originalPosition:i.originalPosition,offset:i.positionAbs,item:i.currentItem,sender:e?e.element:null}}})})(jQuery);;
define("localStorage", [], function() {
    var w = window, whitelist;
    whitelist = [ "show-welcome" ];
    return {
        init: function() {
            var supported;
            try {
                supported = w.localStorage;
                if (supported) {
                    w.localStorage.setItem("wpcom_test_storage", "");
                    w.localStorage.removeItem("wpcom_test_storage");
                    this.storage = w.localStorage;
                }
            } catch (err) {
                this.storage = {
                    _data: {},
                    setItem: function(id, val) {
                        return this._data[id] = String(val);
                    },
                    getItem: function(id) {
                        return this._data.hasOwnProperty(id) ? this._data[id] : null;
                    },
                    removeItem: function(id) {
                        return delete this._data[id];
                    },
                    clear: function() {
                        return this._data = {};
                    }
                };
            }
        },
        set: function(key, val) {
            return this.storage.setItem(key + w.localstorageHash, val);
        },
        get: function(key) {
            return this.storage.getItem(key + w.localstorageHash);
        },
        remove: function(key) {
            return this.storage.removeItem(key + w.localstorageHash);
        },
        clear: function() {
            var saveThese = {}, value, key;
            _.each(whitelist, function(key) {
                value = this.storage.getItem(key);
                if (value) {
                    saveThese[key] = value;
                }
            }, this);
            this.storage.clear();
            for (key in saveThese) {
                if (!saveThese.hasOwnProperty(key)) {
                    continue;
                }
                this.storage.setItem(key, value);
            }
            return;
        }
    };
});

define("urlUtils", [], function() {
    var $ = jQuery, urlUtils = {
        mergeQueryParams: function() {
            var params, splits, result = {};
            $.each(arguments, function(i, paramStr) {
                if ("undefined" === typeof paramStr) return true;
                params = (paramStr + "").replace(/^\?/, "").split("&");
                $.each(params, function(i, param) {
                    splits = param.split("=");
                    result[splits[0]] = splits[1];
                });
            });
            return $.param(result);
        },
        urlAddParams: function(url, params) {
            var sections, uri, query, hash, result;
            sections = url.split("#");
            hash = (sections.length = 2) ? sections[1] : false;
            sections = sections[0].split("?");
            uri = sections[0];
            query = (sections.length = 2) ? sections[1] : false;
            query = this.mergeQueryParams(query, params);
            result = query ? uri + "?" + query : uri;
            result = hash ? result + "#" + hash : result;
            return result;
        },
        getAjaxUrl: function() {
            var ajaxUrl = "undefined" === typeof instapost_text || !instapost_text.ajaxurl ? "/wp-admin/admin-ajax.php" : instapost_text.ajaxurl;
            return ajaxUrl;
        },
        toQueryString: function(obj) {
            var queries = [];
            $.each(obj, function(key, val) {
                queries.push(key + "=" + val);
            });
            return queries.join("&");
        }
    };
    return urlUtils;
});

define("statUtils", [ "urlUtils" ], function(urlUtils) {
    var $ = jQuery, w = window;
    return {
        bumpStat: function(group, statName) {
            var loc;
            if (window.wpcomNewdash && window.wpcomNewdash.router && _.isFunction(window.wpcomNewdash.router.getRoute)) {
                loc = window.wpcomNewdash.router.getRoute().join("/");
            } else {
                if (typeof w.history !== "undefined" && typeof w.history.pushState !== "undefined") {
                    loc = w.location.pathname;
                } else {
                    loc = w.location.hash.replace(/^#/, "");
                }
            }
            if (loc[0] !== "/") {
                loc = "/" + loc;
            }
            $.post(urlUtils.getAjaxUrl(), {
                action: "wpcom_bump_stat",
                nonce: $("input#newdash_nonce").val(),
                group: group,
                stat: statName,
                loc: loc
            });
        },
        recordPageView: function(urlPath, pageTitle) {
            w.ga("set", "page", urlPath);
            w.ga("send", {
                hitType: "pageview",
                page: urlPath,
                title: pageTitle
            });
        },
        recordEvent: function(category, action, optionLabel, optionValue) {
            var optionLabel = optionLabel || undefined, optionValue = optionValue || undefined;
            w.ga("send", "event", category, action, optionLabel, optionValue);
        }
    };
});

define("templateFactory", [], function() {
    return {
        cache: {},
        fetch: function(template, data, partials) {
            var template_compiled = this.cache[template];
            if (!template_compiled) {
                var template_raw = null;
                if (jQuery("html").hasClass("ie")) {
                    template_raw = jQuery("#" + template + "-tmpl").html();
                }
                if (!template_raw) {
                    template_raw = jQuery("#" + template + "-tmpl").text();
                }
                template_compiled = Hogan.compile(template_raw);
                if (!template_compiled) return false;
                this.cache[template] = template_compiled;
            }
            if (!data) return template_compiled;
            return template_compiled.render(data, partials);
        },
        hydrate: function(string, data) {
            return Hogan.compile(string).render(data);
        }
    };
});

define("wpcomReaderConstants", [], function() {
    return {
        initialPageTitle: "WordPress.com"
    };
});

define("help", [ "urlUtils", "statUtils" ], function(urlUtils, statUtils) {
    var $ = jQuery, wpcomHelpTab = {
        init: function() {
            var $tab = $("#tab-content");
            wpcomHelpTab.externalizeLinks($tab);
            var path = window.wpcomNewdash.router.getRoute().join("/");
            $("#help-main").find('li a[href="' + path + '"]').addClass("selected");
            $("#search-bar").show();
            $tab.on("submit.help_tab", "#search-form", function(e) {
                e.preventDefault();
                $(document).off("newdash_help.loaded");
                var query = $("#help-search").val();
                if ("" === query) {
                    window.wpcomNewdash.router.setRoute("/help/");
                    return;
                }
                query = encodeURIComponent(query);
                window.wpcomNewdash.router.setRoute("/help/search/" + query.replace(/%20/g, "+"));
            });
            $(document).trigger("newdash_help.loaded");
        },
        showHistory: function() {
            var $results = $("#support-results-container");
            var template = $("#support-history-tmpl").html();
            wpcomHelpTab.toggleLoader();
            $.get(urlUtils.getAjaxUrl(), {
                action: "newdash_help_history"
            }, function(response) {
                $("#search-bar").hide();
                wpcomHelpTab.toggleLoader();
                if (response.success && !_.isEmpty(response.data)) $results.html(Mustache.render(template, response.data)); else $no_results.fadeIn();
            }, "json");
        },
        doSearch: function(query) {
            if (_.isUndefined(query)) {
                window.wpcomNewdash.router.setRoute("/help/");
                return;
            }
            statUtils.bumpStat("newdash_help", "search");
            var $cantFind = $("#cantfind");
            var $noResults = $("#no-results-found");
            $("#help-search").val(decodeURIComponent(query.replace(/\+/g, " ")));
            var $results = $("#support-results-container");
            $results.html("");
            wpcomHelpTab.toggleLoader();
            $.post(urlUtils.getAjaxUrl(), {
                action: "newdash_help_search",
                query: query
            }, function(response) {
                wpcomHelpTab.toggleLoader();
                if (response.success && !_.isEmpty(response.data)) {
                    $results.html(response.data);
                    wpcomHelpTab.externalizeLinks($results);
                } else {
                    $noResults.fadeIn();
                }
                $cantFind.fadeIn();
            });
        },
        toggleLoader: function() {
            var $loading = $("#help").find(".loading-indicator");
            var $cantFind = $("#cantfind");
            var $noResults = $("#no-results-found");
            if ($loading.hasClass("loading")) {
                $loading.removeClass("loading");
            } else {
                $cantFind.hide();
                $noResults.hide();
                $loading.addClass("loading");
            }
        },
        externalizeLinks: function($elem) {
            $elem.find('a[href^="http://"]').attr("target", "wpcomsupport");
            $elem.off("click.newdash_help", 'a[href^="http://"]');
            $elem.on("click.newdash_help", 'a[href^="http://"]', function(e) {
                var link = $(this).attr("href");
                if (link.indexOf("en.support.wordpress.com/contact/") !== -1) {
                    statUtils.bumpStat("newdash_help", "opened_contact_form");
                } else {
                    statUtils.bumpStat("newdash_help", "opened_support_document");
                }
            });
        }
    };
    return wpcomHelpTab;
});

define("remoteAvatarFetch", [ "urlUtils" ], function(urlUtils) {
    var $ = jQuery;
    return function() {
        var images = $("img[src$='wordpress.com/wp-content/themes/h4/i/subs-rss.png']");
        var rels = [];
        $.each(images, function(i, el) {
            if (-1 != $.inArray($(el).attr("rel"), rels)) return;
            $.get(urlUtils.getAjaxUrl(), {
                action: "fill_avatars",
                blog_url: $(el).attr("rel")
            }, function(response) {
                if ("-1" !== response && "" !== response) {
                    $("img[rel='" + $(el).attr("rel") + "']").fadeOut("fast", function() {
                        $("img[rel='" + $(el).attr("rel") + "']").attr("src", response);
                        $("img[rel='" + $(el).attr("rel") + "']").fadeIn("fast");
                    });
                }
            });
            rels.push($(el).attr("rel"));
        });
    };
});

define("externalAuth", [ "urlUtils", "remoteAvatarFetch" ], function(urlUtils, remoteAvatarFetch) {
    var $ = jQuery, w = window, wpcomExternalAuth = {
        cookies: {
            facebook: "wpc_fbc",
            twitter: "wpc_tc",
            google: "wpc_google"
        },
        popups: {
            facebook: ",height=400,width=640",
            twitter: ",height=515,width=600",
            google: ",height=400,width=720"
        },
        extWin: false,
        extWinCheck: false,
        init: function(service) {
            clearInterval(this.extWinCheck);
            if (window.wpcomNewdash.readCookie(this.cookies[service])) {
                $("#default-friends").fadeOut("fast", function() {
                    $("#subs-loading").fadeIn("fast");
                    wpcomExternalAuth.doExternalLoggedIn(service);
                });
            } else {
                window.wpcomNewdash.clearCookie(this.cookies[service]);
                var keyringService = service;
                if ("google" == keyringService) keyringService = "google-contacts";
                var url = "https://public-api.wordpress.com/connect/?magic=keyring&action=request&service=" + keyringService + "&scope=basic&for=friendfinder";
                wpcomExternalAuth.extWin = w.open(url, "highconn", "status=0,toolbar=0,location=1,menubar=0,directories=0,resizable=1,scrollbars=0" + this.popups[service]);
                wpcomExternalAuth.extWinCheck = setInterval(function() {
                    wpcomExternalAuth.pollExternalWindow(service);
                }, 100);
            }
        },
        doExternalLoggedIn: function(service) {
            clearInterval(this.extWinCheck);
            var data = this.getServiceData(service);
            if ("object" !== typeof data) return;
            if ("facebook" != service && "twitter" != service && "google" != service) return;
            $.get(urlUtils.getAjaxUrl(), {
                action: "wpcom_ff_query_" + service
            }, function(response) {
                if ("-1" == $.trim(response)) {
                    $("#subs-loading").fadeOut("fast");
                    window.wpcomNewdash.clearCookie(wpcomExternalAuth.cookies[service]);
                    wpcomExternalAuth.init(service);
                    return;
                }
                $("#found-friends").fadeOut("fast", function() {
                    $(this).html(response);
                    $(this).fadeIn("fast", function() {
                        remoteAvatarFetch();
                    });
                });
                $("#subs-loading").fadeOut("fast");
            });
        },
        doExternalCanceled: function(service) {
            this.trigger("cancelled:" + service, service);
        },
        doExternalLogout: function(service) {
            window.wpcomNewdash.clearCookie(this.cookies[service]);
            this.doExternalCanceled(service, true);
        },
        getServiceData: function(service) {
            var data = window.wpcomNewdash.readCookie(this.cookies[service]);
            if (null === data || "undefined" === typeof data.access_token || !data.access_token) {
                return false;
            }
            return data;
        },
        pollExternalWindow: function(service) {
            if (window.wpcomNewdash.readCookie(this.cookies[service])) {
                clearInterval(this.extWinCheck);
                wpcomExternalAuth.extWin.close();
                this.init(service);
                this.trigger("connected:" + service, service);
            } else {
                if (this.extWin.closed || !this.extWin) this.doExternalCanceled(service);
            }
        }
    };
    _.extend(wpcomExternalAuth, Backbone.Events);
    return wpcomExternalAuth;
});

define("friendFinder", [ "statUtils", "externalAuth" ], function(statUtils, externalAuth) {
    var $ = jQuery, wpcomFriendFinder = {
        init: function() {
            this.unload();
            if (parseInt($("#friend-list").data("followCount"), 10) > 0) {
                $("#default-friends").addClass("hidden");
            }
            $("#ff-services a").each(function() {
                var service = $(this).attr("id");
                $("#" + service + " p").text(" ");
                $("#" + service + " p").spin("small-right");
                if (false !== externalAuth.getServiceData(service)) {
                    wpcomFriendFinder.showConnected(service);
                } else {
                    wpcomFriendFinder.showConnect(service);
                }
            });
            $(".friend-finder").on("click.wpcom_friend_finder", "#ff-services a", function(e) {
                e.preventDefault();
                var service = $(this).attr("id");
                if (false === externalAuth.getServiceData(service)) {
                    $("#" + service + " p").text(" ");
                    $("#" + service + " p").spin("small-right");
                }
                wpcomFriendFinder.startAuth($(this));
            });
            $(".friend-finder").on("click.wpcom_friend_finder", "#found-friends a.f-all", function(e) {
                e.preventDefault();
                wpcomFriendFinder.followAllFriends();
                var service = $("ul#friend-list").attr("class");
                statUtils.bumpStat("reader_follows", "friend_finder_" + service);
            });
            $(".friend-finder").on("click.wpcom_friend_finder", "#found-friends a.follow", function(e) {
                e.preventDefault();
                var service = $("ul#friend-list").attr("class");
                statUtils.bumpStat("reader_follows", "friend_finder_" + service);
            });
            $(".friend-finder").on("click.wpcom_friend_finder", "#found-friends a.following", function(e) {
                e.preventDefault();
                var service = $("ul#friend-list").attr("class");
                statUtils.bumpStat("reader_unfollows", "friend_finder_" + service);
            });
        },
        showConnected: function(service) {
            externalAuth.off("connected:" + service);
            $("#" + service + " p").spin(false).text("Connected");
            $("div#" + service + "_publicize").removeClass("hide");
        },
        showConnect: function(service) {
            externalAuth.off("cancelled:" + service);
            $("#" + service + " p").spin(false).text("Connect");
            if (!$("div#" + service + "_publicize").hasClass("hide")) {
                $("div#" + service + "_publicize").addClass("hide");
            }
        },
        startAuth: function(link) {
            var service = link.attr("id");
            $("#found-friends").fadeOut("fast");
            externalAuth.on("cancelled:" + service, this.showConnect, this);
            externalAuth.on("connected:" + service, this.showConnected, this);
            externalAuth.init(service);
        },
        followAllFriends: function() {
            $.each($("a.follow", "ul.user-blogs li"), function(i, el) {
                window.wpcomReader.followBlog($(el), false);
            });
        },
        unload: function() {
            $(".friend-finder").off("click.wpcom_friend_finder", "#ff-services a");
            $(".friend-finder").off("click.wpcom_friend_finder", "#found-friends a.follow");
            $(".friend-finder").off("click.wpcom_friend_finder", "#found-friends a.following");
        }
    };
    return wpcomFriendFinder;
});

define("newdashI18n", [], function() {
    var newdashI18n = {
        get: function(key) {
            var data = this.data(), value = key;
            if (_.isArray(key)) {
                _.each(key, function(subKey) {
                    if (!data || "undefined" === typeof data[subKey]) {
                        value = _.last(key);
                        return;
                    }
                    if (_.isString(data[subKey])) {
                        value = data[subKey];
                        return;
                    }
                    data = data[subKey];
                });
            } else {
                if (!data || "undefined" === typeof data[key]) {
                    value = key;
                } else if (_.isString(data[key])) {
                    value = data[key];
                }
            }
            return value;
        },
        data: function() {
            if ("undefined" !== typeof window.wpcom_newdash_i18n && window.wpcom_newdash_i18n) {
                return window.wpcom_newdash_i18n;
            }
            if ("undefined" !== typeof window.newdashI18nData && window.newdashI18nData) {
                return window.newdashI18nData;
            }
            return {};
        }
    };
    return newdashI18n;
});

define("customizerLoader", [], function() {
    var $ = jQuery, loader = {
        _defaults: {
            addButtons: false
        },
        _iframe: null,
        _container: null,
        _buttons: null,
        _inited: false,
        _loaded: false,
        l10n: wpcom_newdash_i18n.customizer,
        _init: function() {
            if (this._inited) {
                return;
            }
            this._inited = true;
            this._container = $('<div id="customizer-loader" class="preload" />').appendTo("body");
            this._reset();
            $(window).on("message", _.bind(function(event) {
                var doClose = [ "closeCustomizerNux", "closeCustomizerNewdash" ];
                event = event.originalEvent;
                if (-1 !== _.indexOf(doClose, event.data)) {
                    this.close();
                }
                if ("customizerReady" === event.data) {
                    this.send("customizerNuxExperiment");
                    this.loaded();
                }
                if (this._buttons && "customizerChange" === event.data) {
                    this._buttons.find(".save").prop("disabled", false).text(this.l10n.save);
                }
            }, this));
        },
        _reset: function() {
            this._loaded = false;
            this._iframe && this._iframe.remove();
            this._iframe = $("<iframe />").appendTo(this._container);
            this._buttons && this._buttons.remove();
            this._buttons = null;
        },
        addButtons: function() {
            this._buttons = $('<div id="customizer-buttons" class="loading"><button disabled class="button-primary save">' + this.l10n.saved + '</button> <button class="button-secondary close">' + this.l10n.close + "</button></div>").insertAfter(".masterbar .site-navigation");
            this._buttons.find("button").on("click", _.bind(function(event) {
                var $el = $(event.target), message;
                event.preventDefault();
                if ($el.prop("disabled")) {
                    return;
                }
                message = $el.hasClass("close") ? "customizerDoClose" : "customizerDoSave";
                this.send(message);
            }, this));
        },
        open: function(url, opts) {
            opts = $.extend({}, this._defaults, opts);
            this.preload(url, opts.addButtons);
            this._container.removeClass("preload");
            if (opts.addButtons && !this._buttons) {
                this.addButtons();
            }
            if (this._loaded) {
                this.loaded();
            } else {
                this._container.addClass("loading");
            }
        },
        close: function() {
            this._container.addClass("preload");
            if (this._buttons) {
                this._buttons.addClass("loading");
            }
        },
        preload: function(src) {
            if (!this._inited) {
                this._init();
            }
            if (src === this._iframe.attr("src")) {
                return;
            } else if (this._loaded) {
                this._reset();
            }
            this._iframe.attr("src", src).one("load", this.loaded);
        },
        loaded: function() {
            this._loaded = true;
            this._container.removeClass("loading");
            if (this._buttons) {
                setTimeout(_.bind(function() {
                    this._buttons.removeClass("loading");
                }, this), 10);
            }
        },
        send: function(message) {
            var origin = this._iframe.attr("src").split("/wp-admin")[0];
            this._iframe[0].contentWindow.postMessage(message, origin);
        }
    };
    _.bindAll(loader, "open", "preload", "loaded", "close", "send");
    return loader;
});

define("nux", [ "statUtils", "urlUtils", "externalAuth", "friendFinder", "newdashI18n", "customizerLoader" ], function(statUtils, urlUtils, externalAuth, friendFinder, newdashI18n, customizerLoader) {
    var $ = jQuery, wpcomNewdashNux = {
        _steps: [],
        hasPublishedPost: false,
        themePurchaseUrl: false,
        showPurchasedNotice: false,
        fourThemesSelectedOrMore: 0,
        customizerUrl: false,
        themeDemoUrl: false,
        inCloseCustomizerNux: false,
        getSteps: function() {
            if (this._steps.length) return this._steps;
            var steps = [ "name", "theme", "customize", "post", "my-blog" ];
            if (undefined != newdashI18n && undefined != newdashI18n.data().nux && undefined != newdashI18n.data().nux.steps_list && newdashI18n.data().nux.steps_list.length > 0) steps = newdashI18n.data().nux.steps_list;
            this._steps = steps;
            return this._steps;
        },
        addStep: function(opt) {
            var self = this, steps = self.getSteps(), key, direction;
            opt = opt || {};
            opt.name = opt.name || "";
            opt.direction = opt.direction || "after";
            opt.relative = opt.relative || "";
            direction = "after" === opt.direction ? 1 : -1;
            key = $.inArray(opt.relative, steps);
            steps.splice(key + 1, 0, opt.name);
            return steps;
        },
        removeStep: function(step) {
            var self = this, steps = self.getSteps(), key = $.inArray(step, steps);
            if (-1 !== key) {
                steps.splice(key, 1);
            }
            return steps;
        },
        changeStep: function(direction) {
            var currentStep = $(".nux-current").attr("id").replace("nux-step-", ""), steps = wpcomNewdashNux.getSteps(), position = $.inArray(currentStep, steps), step = "next" === direction ? steps[position + 1] : steps[position - 1];
            if ("theme" === step && $("body").hasClass("no-theme-picker")) {
                position = "next" === direction ? position + 1 : position - 1;
                step = "next" === direction ? steps[position + 1] : steps[position - 1];
            }
            if (step) {
                statUtils.bumpStat("newdash_nux_direction", direction);
                statUtils.bumpStat("newdash_nux_direction", currentStep + "_to_" + step);
                wpcomNewdash.router.setRoute("/welcome/step/" + step + "/");
            } else {
                wpcomNewdash.router.setRoute("/welcome/step/first/");
            }
        },
        getAdjacentRoute: function(direction) {
            var currentStep = $(".nux-current").attr("id").replace("nux-step-", ""), steps = wpcomNewdashNux.getSteps(), position = $.inArray(currentStep, steps), step = direction == "next" ? steps[position + 1] : steps[position - 1];
            return "/welcome/step/" + step + "/";
        },
        renderStep: function(args) {
            var self = this, steps, query;
            args = "undefined" !== typeof args ? args : {};
            args.step = "undefined" !== typeof args.step ? args.step : false;
            args.target = ".nux-current";
            args.direction = "next";
            if (!args.step) {
                return false;
            }
            steps = wpcomNewdashNux.getSteps();
            if (steps[0] === args.step && wpcomNewdash.isTouchDevice) {
                steps.splice($.inArray("customize", steps), 1);
            }
            $("html").css({
                overflow: "visible"
            });
            setTimeout(function() {
                $("body").animate({
                    scrollTop: 0
                }, 200);
            }, 350);
            if ("nux/nux-frame.php" === $("#tab-content").data("initial-page")) {
                $("#tab-content").removeData().removeAttr("data-initial-page");
                wpcomNewdash.maximizeViewportHeight();
                self["step_" + args.step](args);
                self.preloadSteps(args);
            } else if (!$("div#welcome-nux").length) {
                query = "step=" + args.step;
                if (this.showPurchasedNotice) {
                    query += "&purchased=true";
                }
                wpcomNewdash.loadTemplate({
                    template: "nux/nux-frame.php",
                    query: query,
                    doAbort: false
                }).done(function() {
                    wpcomNewdash.maximizeViewportHeight();
                    self["step_" + args.step](args);
                    self.preloadSteps(args);
                });
            } else {
                if ($("#nux-step-" + args.step).length) {
                    $("#welcome-nux").find(".nux-current").removeClass("nux-current").addClass("off-screen");
                    $("#nux-step-" + args.step).addClass("nux-current").removeClass("off-screen");
                    this.markupSteps(args);
                    this.adjustNav(args);
                    self["step_" + args.step](args);
                }
            }
            if (typeof _kiq !== "undefined") _kiq.push([ "set", {
                "newdash-nux-step": args.step
            } ]);
            statUtils.bumpStat("newdash_nux_steps", args.step);
        },
        preloadSteps: function(args) {
            var self = this, steps = self.getSteps();
            $.each(steps, function(i, step) {
                $("#welcome-nux").append('<div class="off-screen" id="nux-step-' + step + '"></div>');
                if (args.step !== step) {
                    wpcomNewdash.loadTemplate({
                        template: "nux/" + step + ".php",
                        target: "#nux-step-" + step,
                        doAbort: false
                    }).done(function() {
                        self.adjustNav(args);
                    });
                }
            });
            this.markupSteps(args);
        },
        markupSteps: function(args) {
            var steps = this.getSteps(), position = $.inArray(args.step, steps), nextStep = steps[position + 1], prevStep = steps[position - 1];
            $("#welcome-nux").find(".nux-next").removeClass("nux-next");
            $("#welcome-nux").find(".nux-prev").removeClass("nux-prev");
            if (nextStep != undefined) {
                $("#nux-step-" + nextStep).addClass("nux-next");
            }
            if (prevStep != undefined) {
                $("#nux-step-" + prevStep).addClass("nux-prev");
            }
            $(".next-link").removeClass("hidden");
        },
        fetchStep: function(args) {
            this["step_" + args.step](args);
            $(".nux-current").attr("id", "nux-step-" + args.step);
        },
        adjustNav: function(args) {
            var nav = $("#nux-nav"), next = nav.find(".next-link"), prev = nav.find(".prev-link"), welcome = $("#welcome-nux"), stepNumNav = welcome.find(".nux-current .step-number"), steps = this.getSteps(), position = $.inArray(args.step, steps), firstStep = steps[0], lastStep = steps[steps.length - 1], prevStep = steps[position - 1];
            if ("read" == lastStep) lastStep = steps[steps.length - 2];
            if (undefined != stepNumNav && undefined != stepNumNav.html() && !stepNumNav.html().match(/[\d]+$/)) {
                if (undefined != newdashI18n.data().nux.steps_strings && undefined != newdashI18n.data().nux.steps_strings[position]) stepNumNav.html(newdashI18n.data().nux.steps_strings[position]); else stepNumNav.html(stepNumNav.html() + " " + (position + 1));
            }
            next.removeClass("name-next");
            next.attr("href", wpcomNewdash.getPathOrHash("/welcome/step/next/")).html(next.data("next-text"));
            if (firstStep == args.step) {
                $("#welcome-nux-intro").show();
            } else {
                $("#welcome-nux-intro").hide();
            }
            if (lastStep == args.step) {
                next.attr("href", wpcomNewdash.getPathOrHash("/welcome/step/read/")).html(next.data("finish-text"));
            }
            if ("post" === args.step) {
                next.on("click.nux", function(e) {
                    if ($(this).hasClass("publishing")) {
                        return false;
                    }
                    e.preventDefault();
                    e.stopPropagation();
                    var format = instapost.get_post_format(), startedPost = false;
                    switch (format) {
                      case "aside":
                        if (tinymce.get("ipteditor").getContent()) startedPost = true;
                        break;

                      case "image":
                        if ($("#ipt-image-uploaded").find("img").attr("src")) startedPost = true;
                        break;

                      case "video":
                        if ($("#ipt-uploaded-video-url").val()) startedPost = true;
                        break;

                      case "quote":
                        if ($("#ipt-quote-content").find("textarea").val() != $("#ipt-quote-content").find("textarea").data("default_val")) startedPost = true;
                        break;

                      case "link":
                        if ($("#ipt-link-url").find("input").val() != $("#ipt-link-url").find("input").data("default_val")) startedPost = true;
                        break;

                      default:
                        break;
                    }
                    if (startedPost) {
                        var link = $(this);
                        link.html(next.data("publishing-text")).addClass("publishing");
                        wpcom.doAction("ipt_publish_" + instapost.get_post_format());
                        wpcom.addAction("ipt_publish_error", function() {
                            link.html(next.data("next-text")).removeClass("publishing");
                        });
                    } else {
                        wpcomNewdash.router.setRoute($(this).attr("href"));
                    }
                });
            } else {
                next.off("click.nux");
            }
            if ("name" == args.step) next.addClass("name-next");
            welcome.attr("class", "tab step-" + args.step);
        },
        step_name: function(args) {
            $.post(urlUtils.getAjaxUrl(), {
                action: "nux_follow_core_blogs",
                source: "nux_core"
            });
            $("#welcome-nux").find("#nux-nav").off("click.nux", ".name-next").on("click.nux", ".name-next", function(e) {
                e.preventDefault();
                e.stopPropagation();
                $.post(urlUtils.getAjaxUrl(), {
                    action: "nux_setup_blog",
                    nonce: $("input#newdash_nonce").val(),
                    blogname: $("input#blogname").val(),
                    blogdescription: $("input#blogdesc").val(),
                    bloglanguage: $("select#langId").val(),
                    postinggoal: $('input[name="postinggoal"]:checked').val()
                });
                wpcomNewdash.router.setRoute($(this).attr("href"));
            });
        },
        step_theme: function(args) {
            var lastVisibleThemeIndex = 0, themePageSize = 9, moreButtonClicks = 0, $selectedTheme = $("#theme-chooser div.theme.selected a:first");
            $("#nux-step-customize").find(".theme-price").hide();
            wpcomNewdashNux.removePurchaseStep();
            if ($selectedTheme.length && $selectedTheme.attr("preview") + "?demo" != wpcomNewdashNux.themeDemoUrl) {
                $("#wp-loader").show();
                $("#nux-step-customize").find("iframe:first").attr("src", $selectedTheme.attr("preview") + "?demo").load(function(e) {
                    wpcomNewdashNux.themeDemoUrl = $selectedTheme.attr("preview") + "?demo";
                    $("#wp-loader").hide();
                }).end();
            }
            $("#nux-step-theme").off(".nux").on("click.nux", "a[theme]", function(e) {
                e.preventDefault();
                e.stopPropagation();
                var $this = $(this);
                if ($this.attr("preview") + "?demo" != wpcomNewdashNux.themeDemoUrl) {
                    $("#nux-step-customize").find("iframe:first").attr("src", "about:blank");
                }
                $("#theme-chooser").find(".theme.selected").removeClass("selected");
                if (typeof _kiq !== "undefined") {
                    wpcomNewdashNux.fourThemesSelectedOrMore++;
                    if (wpcomNewdashNux.fourThemesSelectedOrMore >= 4) {
                        _kiq.push([ "set", {
                            "four-themes-selected-or-more": 1
                        } ]);
                    }
                }
                $this.closest(".theme").addClass("selected"), setTimeout(function() {
                    wpcomNewdash.router.setRoute("/welcome/step/customize/");
                }, 700);
            });
            $("#more-themes").show();
            $("#more-themes").off(".nux").on("click.nux", function(e) {
                var themes = $(".theme");
                themes.slice(lastVisibleThemeIndex + 1, lastVisibleThemeIndex + 1 + themePageSize).show();
                $(this).animate({
                    opacity: 1
                }, 1200);
                lastVisibleThemeIndex += themePageSize;
                if (lastVisibleThemeIndex >= themes.length) $(this).hide();
                new Image().src = document.location.protocol + "//pixel.wp.com/g.gif?v=wpcom-no-pv&x_themes-on-signup-more=" + ++moreButtonClicks + "&baba=" + Math.random();
            });
            $("#themes-on-signup-theme-preview").off(".nux").on("click.nux", ".cancel a", function(e) {
                e.preventDefault();
                $("#themes-on-signup-theme-preview").hide();
                $("#theme-chooser, .success").show();
                $("#theme-picker-header").each(function() {
                    $(this).text($(this).attr("browse-text"));
                });
                $(".preview").hide();
                $(".browse").show();
                $("html, body").animate({
                    scrollTop: $(".theme.selected").offset().top
                }, 1e3);
            });
            $(".theme").slice(themePageSize).hide();
            lastVisibleThemeIndex = themePageSize - 1;
        },
        step_customize: function(args) {
            if (!$("#nux-step-theme").find(".theme.selected").length) {
                setTimeout(function() {
                    wpcomNewdash.router.setRoute("/welcome/step/theme/");
                }, 100);
                return;
            }
            var $selectedTheme = $("#nux-step-theme").find(".theme.selected").find("a:first"), $selectedThemeStylesheet = $selectedTheme.attr("stylesheet"), $selectedThemeTitle = $selectedTheme.parent().find("h3").html(), $selectedThemeMeta = $selectedTheme.parent().find(".meta"), $customizeStep = $("#nux-step-customize"), data = $("#customize-frame").data(), params = {
                "frame-nonce": data.nonce,
                theme: $selectedThemeStylesheet,
                nextStep: wpcomNewdashNux.getAdjacentRoute("next"),
                "loaded-url": data.loadedUrl
            }, url = urlUtils.urlAddParams(data.adminUrl, urlUtils.toQueryString(params));
            $.post(urlUtils.getAjaxUrl(), {
                action: "themes_on_signup_theme_selection",
                _wpnonce: $selectedTheme.data("nonce"),
                stylesheet: $selectedThemeStylesheet
            }, function(data) {}, "json");
            customizerLoader.preload(url);
            $(".load-customizer").attr("href", url).off(".nux").on("click.nux", function(event) {
                event.preventDefault();
                customizerLoader.open(event.target.href, {
                    addButtons: true
                });
            });
            $customizeStep.find(".nux-theme-title").html($selectedThemeTitle);
            if ($selectedTheme.attr("preview") + "?demo" != wpcomNewdashNux.themeDemoUrl) {
                $("#wp-loader").show();
                $customizeStep.find("iframe:first").attr("src", $selectedTheme.attr("preview") + "?demo").load(function(e) {
                    $("#wp-loader").fadeOut(function() {
                        wpcomNewdashNux.themeDemoUrl = $selectedTheme.attr("preview") + "?demo";
                        $(this).hide();
                    });
                }).end();
            }
            $customizeStep.find(".theme-description").html($selectedThemeMeta.find(".theme-description").html());
            $customizeStep.find(".theme-features").html($selectedThemeMeta.find(".theme-features").html());
            if ($selectedTheme.attr("premium")) {
                var $price = "$" + $selectedTheme.attr("price");
                $customizeStep.find(".theme-price").html($price).show();
                if (!$("#nux-step-purchase").length) wpcomNewdashNux.addPurchaseStep($selectedTheme);
                $("#themes-on-signup-theme-preview").addClass("theme-preview-premium").removeClass("theme-preview-free").find(".premium[label]").each(function() {
                    $(this).text($(this).attr("label").replace("%1", "$" + $price));
                });
            } else {
                $("#welcome-nux").find(".nux-next").removeClass("nux-next");
                $("#nux-step-" + newdashI18n.data().nux.steps_list[$.inArray("customize", newdashI18n.data().nux.steps_list) + 1]).addClass("nux-next");
                $("#themes-on-signup-theme-preview").addClass("theme-preview-free").removeClass("theme-preview-premium");
            }
        },
        step_purchase: function(args) {
            if (!wpcomNewdashNux.themePurchaseUrl) wpcomNewdash.router.setRoute("/welcome/step/theme/");
            if (args && args.callback && "function" === typeof args.callback) {
                args.callback();
            }
        },
        addPurchaseStep: function(theme) {
            wpcomNewdashNux.themePurchaseUrl = theme.attr("purchase_url");
            wpcomNewdashNux.addStep({
                name: "purchase",
                direction: "after",
                relative: "customize"
            });
            $("#welcome-nux").find(".nux-next").removeClass("nux-next");
            $("#welcome-nux").append('<div class="off-screen nux-next" id="nux-step-purchase"></div>');
            wpcomNewdash.loadTemplate({
                template: "nux/purchase.php",
                target: "#nux-step-purchase"
            }).done(function() {
                var iframe = $("#nux-step-purchase").find("#purchase-frame");
                iframe.addClass("active").attr("src", wpcomNewdashNux.themePurchaseUrl + "&frame-nonce=" + encodeURIComponent(iframe.data("nonce")));
            });
        },
        sanitizeUrl: function(url) {
            var a = document.createElement("a"), baseDomain;
            a.href = url;
            if (a.hostname.split(".").length > 2) {
                baseDomain = a.protocol + "//" + a.hostname.split(".")[0] + ".wordpress.com";
            } else {
                baseDomain = a.protocol + "//wordpress.com";
            }
            url = url.replace(/https?\:\/\/[^\?\,\/,&]*\.?[^\?\,\/,&]+/, baseDomain);
            return url;
        },
        removePurchaseStep: function() {
            wpcomNewdashNux.themePurchaseUrl = false;
            wpcomNewdashNux.removeStep("purchase");
            $("#nux-step-purchase").remove();
        },
        step_share: function(args) {
            var self = this;
            var connected = {
                twitter: false,
                facebook: false
            };
            $("#share-services").on("click.wpcom_nux_share", "a", function(e) {
                e.preventDefault();
                var service = $(this).attr("id");
                if (false === externalAuth.getServiceData(service)) {
                    friendFinder.startAuth($(this));
                }
            });
            var checkForNuxConnectedServices = setInterval(function() {
                $("#share-services a").each(function() {
                    var service = $(this).attr("id");
                    if (false !== externalAuth.getServiceData(service) && false == connected[service]) {
                        connected[service] = true;
                        $("span.caption", this).text(newdashI18n.data().nux.connected);
                        wpcomNewdashActions.publicizeConnect(service);
                    }
                });
                if (true == connected.twitter && true == connected.facebook) {
                    clearInterval(checkForNuxConnectedServices);
                } else if ("share" != wpcomNewdash.router.getRoute()[2]) {
                    clearInterval(checkForNuxConnectedServices);
                }
            }, 1e3);
        },
        step_post: function(args) {
            if (wpcomNewdashFeatures.interim_editor) {
                window.location = "/post/#signup";
                return;
            }
            wpcom.doAction("newdash_editor_page_loaded");
            instapost.init();
            $(document).on("ipt_published_post_rendered", function() {
                wpcomNewdashNux.hasPublishedPost = true;
                setTimeout(function() {
                    wpcomNewdashNux.changeStep("next");
                }, 200);
            });
        },
        step_read: function(args) {
            if (wpcomNewdash.isTouchDevice) {
                wpcomNewdash.router.setRoute("/read/following/");
                return;
            }
            $("#reader").css({
                "min-height": $("#welcome-nux").height() + "px"
            });
            var self = this;
            setTimeout(function() {
                $("div#reader").appendTo("div#tab-content");
                $("div#welcome-nux").remove();
                $("div#nux-nav").hide();
                $("#homenav li").removeClass("current");
                $("ul#homenav").slideDown().find("li.read").addClass("current");
                $("body").removeClass("noadminbar");
                wpcomReader.page_following();
                $("#reader").prepend('<div id="reader-tips"></div>');
                wpcomNewdash.loadTemplate({
                    template: "nux/read-tips.php",
                    target: "#reader-tips"
                }).done(function() {
                    $("body").addClass("nux");
                    var $tip1 = $("#nux-tip-1");
                    setTimeout(function() {
                        $("#reader").find(".page-activity").remove();
                        $tip1.show().find("button.button-secondary").on("click.nux", function() {
                            $tip1.fadeOut("fast", function() {
                                $("#reader-content").animate({
                                    "margin-top": "0"
                                }, 150, function() {
                                    $("#reader-tips").remove();
                                    wpcomNewdash.router.setRoute("/read/following/");
                                    $("body").removeClass("nux");
                                });
                            });
                        });
                    }, 800);
                });
            }, 650);
        }
    };
    return wpcomNewdashNux;
});

define("notifications", [], function() {
    var $ = jQuery, wpcomMyNotificationsTab = {
        init: function() {
            $(window).trigger("initialize.notifications");
            $(document).on("wpcom_tab_loaded.notifications", function() {
                if ("notifications" !== wpcomNewdash.activeTab) {
                    $(window).trigger("destroy.notifications");
                    $(document).off("wpcom_tab_loaded.notifications");
                }
            });
        }
    };
    return wpcomMyNotificationsTab;
});

define("readerSync", [ "urlUtils" ], function(urlUtils) {
    var $ = jQuery, WpcomReaderSync = function(method, model, options) {
        var params = {
            dataType: "json"
        };
        params.url = urlUtils.getAjaxUrl();
        params.cache = false;
        params.data = {};
        params.data.action = model.action;
        params.data.method = method;
        params.contentType = "application/x-www-form-urlencoded";
        if (method == "create" || method == "update" || method == "patch" || method == "delete") {
            params.type = "POST";
        } else {
            params.type = "GET";
        }
        return $.ajax(_.extend(params, options));
    };
    return WpcomReaderSync;
});

define("CurrentUser", [], function() {
    return Backbone.Model.extend({});
});

define("PostComment", [ "require" ], function(require) {
    var $ = jQuery, WpcomReaderPostComment = Backbone.Model.extend({
        idAttribute: "comment_ID",
        initialize: function(attributes) {
            if (_.has(attributes, "children")) {
                this.addChildren(attributes.children, {
                    silent: true
                });
                this.unset("children", {
                    silent: true
                });
            }
        },
        addChildren: function(models, options) {
            var PostCommentList;
            PostCommentList = require("PostCommentList");
            this.children = new PostCommentList(models, {
                post: this.collection.post
            });
            if (_.isObject(options) && options.silent) {
                return;
            }
            this.trigger("childrenAdded");
        },
        sync: function(method, model, options) {
            var params = {};
            params.path = "/sites/" + this.post.get("blog_id");
            params.cache = false;
            params.dataType = "json";
            if (method == "create") {
                params.method = "POST";
                params.body = {
                    content: this.get("comment_content")
                };
                if (this.get("comment_parent") > 0) {
                    params.path += "/comments/" + this.get("comment_parent") + "/replies/new";
                } else {
                    params.path += "/posts/" + this.post.get("ID") + "/replies/new";
                }
            } else {
                params.method = "GET";
            }
            var makeProxyCall = function() {
                return $.wpcom_proxy_request(params, function(response, statusCode) {
                    if (200 == statusCode) {
                        if ("function" == typeof options.success) {
                            options.success(response);
                        }
                    } else {
                        if ("function" == typeof options.error) {
                            options.error(response);
                        } else {
                            console.error(statusCode, response);
                        }
                    }
                });
            };
            if (this.hasAPIToken) {
                return makeProxyCall();
            } else {
                return $.wpcom_proxy_request({
                    metaAPI: {
                        accessAllUsersBlogs: true
                    }
                }).done(function() {
                    this.hasAPIToken = true;
                    makeProxyCall();
                });
            }
        },
        parse: function(resp) {
            var data;
            if (_.has(resp, "short_URL")) {
                data = {
                    comment_ID: resp.ID,
                    comment_author: resp.author.name,
                    comment_author_url: resp.author.URL,
                    comment_content: resp.content,
                    comment_date_gmt: resp.date,
                    comment_status: resp.status
                };
                if (resp.parent === false) {
                    data.comment_parent = 0;
                } else {
                    data.comment_parent = resp.parent.ID;
                }
            } else {
                data = resp;
            }
            return data;
        },
        areCommentsOpen: function() {
            return this.collection.post.get("comment_status") === "open";
        },
        isNotApproved: function() {
            return this.get("comment_status") === "unapproved";
        },
        isByCurrentUser: function() {
            if (_.isObject(this.collection.post.currentUser) && this.get("user_id") == this.collection.post.currentUser.get("user_id")) {
                return true;
            }
            return false;
        },
        getTime: function() {
            var date = window.moment(this.get("comment_date_gmt"));
            return date.format("h:mm a");
        },
        getDate: function() {
            var date = window.moment(this.get("comment_date_gmt"));
            return date.format("MMMM D, YYYY");
        }
    });
    return WpcomReaderPostComment;
});

define("PostCommentList", [ "PostComment" ], function(PostComment) {
    var WpcomReaderPostCommentList = Backbone.Collection.extend({
        model: PostComment,
        initialize: function(models, options) {
            this.post = options.post;
        },
        comparator: function(commentA, commentB) {
            if (commentA.get("comment_date_gmt") == commentB.get("comment_date_gmt")) {
                return 0;
            }
            return commentA.get("comment_date_gmt") > commentB.get("comment_date_gmt") ? 1 : -1;
        }
    });
    return WpcomReaderPostCommentList;
});

define("PostCommentTree", [ "readerSync", "PostCommentList" ], function(readerSync, PostCommentList) {
    var $ = jQuery, WpcomReaderPostCommentTree = PostCommentList.extend({
        action: "get_comments",
        load: function() {
            this.fetch({
                data: {
                    action: this.action,
                    post_id: this.post.get("ID"),
                    blog_id: this.post.get("blog_id")
                },
                reset: true
            });
        },
        parse: function(response) {
            var commentsByParent = _.groupBy(response, function(comment) {
                return comment.comment_parent;
            });
            var tree = this.buildTree(commentsByParent);
            if (!tree) $("#fpb-comments-box").removeClass("loading");
            return tree;
        },
        buildTree: function(commentsByParent) {
            var tree = commentsByParent[0];
            if (!tree) return;
            _.each(tree, function(comment, index, tree) {
                this.addChildren(tree, comment, commentsByParent);
            }, this);
            return tree;
        },
        addChildren: function(tree, comment, commentsByParent) {
            if (_.has(commentsByParent, comment.comment_ID)) {
                comment.children = commentsByParent[comment.comment_ID];
                if (!comment.children) return;
                _.each(comment.children, function(comment) {
                    this.addChildren(tree, comment, commentsByParent);
                }, this);
            }
        },
        sync: function() {
            return readerSync.apply(this, arguments);
        }
    });
    return WpcomReaderPostCommentTree;
});

define("FullPostModel", [ "readerSync", "CurrentUser", "PostCommentTree" ], function(readerSync, CurrentUser, PostCommentTree) {
    var WpcomReaderFullPostModel = Backbone.Model.extend({
        action: "get_single_post",
        initialize: function() {
            if (window.currentUser) {
                this.currentUser = new CurrentUser(window.currentUser);
            }
            if (!this.get("post_title") || "" === this.get("post_title")) {
                this.set({
                    has_title: false
                });
            }
            if (this.get("post_featured_thumbnail")) {
                this.set({
                    has_thumb: true
                });
            }
            if ("status" === this.get("post_format")) {
                this.set({
                    post_format: "aside"
                });
            }
            this.listenTo(this, "change:post_status", this.savePreviousState);
            this.updateTimeSince();
        },
        initComments: function() {
            if (this.get("ID") && this.get("blog_id")) {
                this.commentsTree = new PostCommentTree(null, {
                    post: this
                });
                this.commentsTree.load();
            }
        },
        sync: function(method, model, options) {
            var action = this.action;
            if ("create" === method) method = "update";
            if ("delete" === method) method = "update";
            if ("update" === method) action = "newdash_update_post";
            var nonce = jQuery("#newdash_nonce").val();
            var data = _.extend({
                _wpnonce: nonce,
                action: action,
                method: method
            }, model.toJSON());
            options = _.extend({
                data: data
            }, options);
            return readerSync.call(this, method, this, options);
        },
        parse: function(response, options) {
            if (response && Object == response.constructor) {
                if ("errors" in response && !_.isEmpty(response["errors"])) this.trigger("wp_error", response["errors"]);
                if ("post" in response) return response["post"];
            }
            return response;
        },
        savePreviousState: function() {
            this.set("old_post_status", this.previous("post_status"));
        },
        undoStateChange: function() {
            if (!this.has("old_post_status")) return;
            this.save({
                post_status: this.get("old_post_status")
            });
            this.unset("old_post_status");
        },
        areCommentsOpen: function() {
            return this.get("comment_status") === "open";
        },
        updateTimeSince: function() {
            if (window.moment) {
                var timestamp = parseInt(this.get("post_timestamp"), 10);
                if (!timestamp) return;
                var now = Math.round(new Date() / 1e3);
                if (timestamp >= now) {
                    this.set("post_time_since", moment.unix(timestamp).format("LLL"));
                } else {
                    this.set("post_time_since", moment.unix(timestamp).fromNow());
                }
            }
        }
    });
    return WpcomReaderFullPostModel;
});

define("PostCommentView", [ "require", "templateFactory" ], function(require, templateFactory) {
    var WpcomReaderCommentView = Backbone.View.extend({
        tagName: "li",
        events: {
            "click .c-reply": "reply",
            "touchend .c-reply": "reply"
        },
        initialize: function() {
            this.model.on("childrenAdded", this.addChildren, this);
            this.model.on("change", this.render, this);
            this.model.on("destroy", this.remove, this);
            if (this.model.isNew()) {
                this.isNew = true;
            }
        },
        render: function() {
            var data = this.model.toJSON();
            data.comments_open = this.model.areCommentsOpen();
            data.isReplyingTo = this.isReplyingTo;
            data.isNotApproved = this.model.isNotApproved();
            data.isByCurrentUser = this.model.isByCurrentUser();
            data.isLoading = this.model.isNew();
            data.isNew = this.isNew;
            data.date = this.model.getDate();
            data.time = this.model.getTime();
            var html = templateFactory.fetch("comment", data);
            this.$el.html(html);
            if (this.isNew && !this.model.isNew()) {
                this.$el.css("display", "none");
                this.$el.fadeIn();
            }
            this.addChildren();
            return this;
        },
        reply: function(e) {
            e.stopImmediatePropagation();
            if (!this.isReplyingTo) {
                this.isReplyingTo = true;
                window.wpcom.events.trigger("reader:comments:cancelReply");
                window.wpcom.events.trigger("reader:comments:reply", this.model);
                this.$el.children(".comment").addClass("replying");
                window.wpcom.events.on("reader:comments:cancelReply", this.cancelReply, this);
            }
        },
        cancelReply: function() {
            if (this.isReplyingTo) {
                this.isReplyingTo = false;
                this.$el.children(".comment").removeClass("replying");
            }
            window.wpcom.events.off("reader:comments:cancelReply", this.cancelReply, this);
        },
        addChildren: function() {
            var PostCommentListView;
            if (_.has(this.model, "children")) {
                PostCommentListView = require("PostCommentListView");
                this.children = new PostCommentListView({
                    model: this.model.children
                });
                this.$el.append(this.children.el);
            }
        }
    });
    return WpcomReaderCommentView;
});

define("PostCommentListView", [ "PostCommentView" ], function(PostCommentView) {
    var WpcomReaderCommentListView = Backbone.View.extend({
        tagName: "ul",
        className: "comments",
        views: [],
        initialize: function() {
            if (!this.model.post.get("ID")) {
                return;
            }
            this.model.on("add", this.addOne, this);
            this.model.on("reset", this.addAll, this);
            this.addAll();
        },
        removeLoader: function() {
            this.$el.parent("#fpb-comments-box").removeClass("loading").addClass("rendered");
        },
        addAll: function() {
            this.model.each(this.addOne, this);
        },
        addOne: function(comment) {
            var view = new PostCommentView({
                model: comment
            });
            this.$el.append(view.render().el);
            if (comment.isNew()) {
                setTimeout(function() {
                    window.wpcom.events.trigger("reader:comments:focusNew", view);
                }, 100);
            }
            this.views.push(view);
            this.addRenderedClass();
        },
        isRoot: function() {
            return this.$el.hasClass("fpb-comments");
        },
        addRenderedClass: function() {
            if (this.isRoot()) this.removeLoader();
        },
        remove: function() {
            this.$el.remove();
            this.model.off("add", this.addOne, this);
            this.model.off("reset", this.addAll, this);
            return this;
        }
    });
    return WpcomReaderCommentListView;
});

define("RebloggingModel", [], function() {
    return Backbone.Model.extend({});
});

define("RebloggingView", [ "statUtils", "urlUtils", "RebloggingModel" ], function(statUtils, urlUtils, RebloggingModel) {
    var $ = jQuery, WpcomRebloggingView = Backbone.View.extend({
        model: RebloggingModel,
        events: {
            "click a.cancel": "cancel",
            "click input[type=submit]": "submit",
            "touchend a.cancel": "cancel",
            "touchend input[type=submit]": "submit"
        },
        initialize: function(options) {
            options = options || {};
            this.$appendTo = options.$appendTo;
            statUtils.bumpStat("reader_actions", "clicked_reblog");
            $(".reblog-box-active").remove();
            this.$el = $("#reblog-box").clone();
            this.$el.addClass("reblog-box-active").appendTo($("div#reader"));
            this.$el = $(".reblog-box-active");
            this.resetBox();
            this.render();
            window.wpcom.events.trigger("reader:reblogging:open");
        },
        render: function() {
            this.$el.hide().addClass("translate3d").appendTo(this.$appendTo).show().find("textarea").focus();
        },
        resetBox: function() {
            this.$el.find("textarea").val("").find("p.response").remove().find("div.submit, .reblog-box-active div.submit span.canceltext").show().find("div.submit input[type=submit]").prop("disabled", false);
        },
        submit: function(e) {
            e.preventDefault();
            var _self = this;
            this.$el.find("input[type=submit]").val("Reblogging...").prop("disabled", true);
            this.$el.find("span.canceltext").hide();
            this.request = $.post(urlUtils.getAjaxUrl(), {
                action: "subs_post_reblog",
                ids: this.model.get("blog_id") + "," + this.model.get("ID"),
                blog_id: this.$el.find("#reblog-to-blog-id").val(),
                blog_url: this.model.get("blog_url"),
                blog_title: this.model.get("blog_name"),
                post_url: this.model.get("post_permalink"),
                post_title: this.model.get("post_title"),
                note: this.$el.find("textarea").val(),
                _wpnonce: this.$el.find("#_wpnonce").val()
            }, "json");
            this.request.success(function(response) {
                try {
                    var json_response = JSON.parse(response);
                    if (json_response.type && "error" === json_response.type) {
                        statUtils.bumpStat("reader_actions", "reblogged_post_failed");
                        _self.showError();
                    } else {
                        statUtils.bumpStat("reader_actions", "reblogged_post");
                        _self.showReblogged();
                    }
                } catch (error) {
                    statUtils.bumpStat("reader_actions", "reblogged_post_failed_nonce");
                    _self.showError();
                }
            });
        },
        showError: function($reblog_box) {
            var _self = this;
            this.$el.css({
                height: this.$el.height() + "px"
            }).slideUp(150, function() {
                _self.$appendTo.children(".sub-content-footer").before('<div class="sub-reblog"><div class="sub-reblog-content sub-relog-content-error" style="width: 100%">We encountered an issue reblogging this.  Please Try Again.</div></div>').end().find("a.reblog").show();
                _self.model.set("is_reblogged", 0);
                _self.close();
            });
        },
        showReblogged: function($reblog_box) {
            var _self = this;
            this.$el.css({
                height: this.$el.height() + "px"
            }).slideUp(150, function() {
                _self.$appendTo.children(".sub-content-footer").before('<div class="sub-reblog"><div class="sub-reblog-content" style="width: 100%">You reblogged this.</div></div>').end().find("a.reblog").hide().html("Reblogged").removeClass("reblog").addClass("reblogged").show();
                _self.model.set("is_reblogged", 1);
                $("a.reblog").trigger("reblogged.wpcomReader", [ _self.model.get("blog_id"), _self.model.get("ID") ]);
                _self.close();
            });
        },
        cancel: function(e) {
            e.preventDefault();
            this.$el.remove();
            $("a.reblog").removeClass("selected");
            statUtils.recordEvent("Reader", "Reblog UI Closed");
            this.close();
        },
        close: function() {
            this.trigger("close");
            this.remove();
            this.unbind();
            window.wpcom.events.trigger("reader:reblogging:close");
        }
    });
    return WpcomRebloggingView;
});

define("ActionButtonsView", [ "localStorage", "templateFactory", "RebloggingView", "statUtils" ], function(localStorage, templateFactory, RebloggingView, statUtils) {
    var $ = jQuery, WpcomActionButtonsView = Backbone.View.extend({
        events: {
            "click a.like": "likePost",
            "click a.liked": "unlikePost",
            touchmove: "disableLikes",
            touchend: "enableLikes",
            "click a.follow": "followBlog",
            "click a.following": "unfollowBlog",
            "touchend a.follow": "followBlog",
            "touchend a.following": "unfollowBlog",
            "click a.reblog": "reblogPost",
            "click a.reblogged": "alreadyRebloggedPost",
            "click a.comment": "openFullPost",
            "touchend a.reblog": "reblogPost",
            "touchend a.reblogged": "alreadyRebloggedPost",
            "touchend a.comment": "openFullPost"
        },
        initialize: function(options) {
            if (!this.model.get("ID")) return;
            options = options || {};
            options = _.defaults(options, {
                showReblogAction: true
            });
            this.model.on("change:is_liked", this.render, this);
            this.model.on("change:post_like_count", this.render, this);
            this.model.on("change:post_comment_count", this.render, this);
            this.model.on("change:is_reblogged", this.render, this);
            this.model.on("change:is_following", this.render, this);
            this.model.on("remove", this.destroy, this);
            this.showReblogAction = options.showReblogAction;
            this.showFollowAction = options.showFollowAction;
            this.render();
        },
        render: function() {
            var commentButton, likeButton, reblogButton, followButton, likesDisplay;
            commentButton = templateFactory.fetch("comment-post-button", this.model.attributes);
            if (this.model.get("is_liked")) likeButton = templateFactory.fetch("unlike-post-button", this.model.attributes); else likeButton = templateFactory.fetch("like-post-button", this.model.attributes);
            if (true === this.showFollowAction) {
                if (this.model.get("is_following")) followButton = templateFactory.fetch("unfollow-blog-button", this.model.attributes); else followButton = templateFactory.fetch("follow-blog-button", this.model.attributes);
            }
            if ("1" == this.model.get("blog_public") && this.showReblogAction) {
                if (this.model.get("is_reblogged")) reblogButton = templateFactory.fetch("post-reblogged-button", this.model.attributes); else reblogButton = templateFactory.fetch("reblog-post-button", this.model.attributes);
            }
            var showComments = false;
            if (this.model.get("comment_status") === "open") {
                showComments = true;
            }
            if (1 === this.model.get("post_like_count")) {
                likesDisplay = templateFactory.fetch("single-like-display", this.model.attributes);
            } else if (this.model.get("post_like_count") > 1) {
                likesDisplay = templateFactory.fetch("multiple-like-display", this.model.attributes);
            }
            var template = templateFactory.fetch("action-buttons", {
                data: this.model.attributes,
                like: likeButton,
                follow: followButton,
                reblog: reblogButton,
                comment: commentButton,
                showComments: showComments,
                likesDisplay: likesDisplay
            });
            this.$el.html(template);
            return this;
        },
        disableLikes: function() {
            this.$el.find("a.like").unbind("click", this.likePost);
            this.$el.find("a.liked").unbind("click", this.unlikePost);
        },
        enableLikes: function() {
            this.$el.find("a.like").bind("click", this.likePost);
            this.$el.find("a.liked").bind("click", this.unlikePost);
        },
        likePost: function(e) {
            e.preventDefault();
            var request = window.wpcomNewdashActions.likePost(this.model.get("blog_id"), this.model.get("ID")), self = this;
            statUtils.recordEvent("Reader", "Clicked Like");
            this.model.set({
                is_liked: 1,
                post_like_count: this.model.get("post_like_count") === undefined ? undefined : Number(this.model.get("post_like_count")) + 1
            });
            localStorage.clear();
            request.done(function(response) {
                self.model.set({
                    is_liked: !!response.i_like,
                    post_like_count: +response.like_count
                });
            });
            request.fail(function() {
                self.model.set({
                    is_liked: 0,
                    post_like_count: this.model.get("post_like_count") === undefined ? undefined : Number(this.model.get("post_like_count")) - 1
                });
            });
        },
        unlikePost: function(e) {
            e.preventDefault();
            var request = window.wpcomNewdashActions.unlikePost(this.model.get("blog_id"), this.model.get("ID")), self = this;
            statUtils.recordEvent("Reader", "Clicked Unlike");
            this.model.set({
                is_liked: 0,
                post_like_count: Number(this.model.get("post_like_count")) - 1
            });
            localStorage.clear();
            request.done(function(response) {
                self.model.set({
                    is_liked: !!response.i_like,
                    post_like_count: +response.like_count
                });
            });
            request.fail(function() {
                self.model.set({
                    is_liked: 1,
                    post_like_count: Number(self.model.get("post_like_count")) + 1
                });
            });
        },
        followBlog: function(e) {
            e.preventDefault();
        },
        unfollowBlog: function(e) {
            e.preventDefault();
        },
        alreadyRebloggedPost: function(e) {
            e.preventDefault();
        },
        reblogPost: function(e) {
            e.preventDefault();
            var $fullPostBox = this.$el.parents("#fpb-box");
            statUtils.recordEvent("Reader", "Clicked Reblog");
            if ($fullPostBox.length) {
                $fullPostBox.addClass("show-reblog");
                this.reblogUI = new RebloggingView({
                    model: this.model,
                    $appendTo: $fullPostBox.find("#fpb-reblog-ui")
                });
                this.reblogUI.bind("close", function() {
                    $fullPostBox.removeClass("show-reblog");
                });
            } else {
                if ($(e.target).hasClass("priv")) {
                    return false;
                }
                var $content = $(e.target).parents("div.sub-body-content");
                var reblogBox = new RebloggingView({
                    model: this.model,
                    $appendTo: $content
                });
            }
        },
        openFullPost: function(e) {
            e.preventDefault();
            var $fullPostBox = this.$el.parents("#fpb-box");
            statUtils.recordEvent("Reader", "Clicked Comment");
            if ($fullPostBox.length) {
                return $fullPostBox.find("#fpb-comment-form textarea").focus();
            }
        },
        destroy: function() {
            this.undelegateEvents();
            this.$el.removeData().unbind();
            this.remove();
            Backbone.View.prototype.remove.call(this);
        }
    });
    return WpcomActionButtonsView;
});

define("FollowPillButtonView", [ "localStorage", "templateFactory", "statUtils" ], function(localStorage, templateFactory, statUtils) {
    var $ = jQuery, WpcomFollowPillButtonView = Backbone.View.extend({
        events: {
            "click a.followPill": "followBlog",
            "click a.followingPill": "unfollowBlog",
            "touchend a.followPill": "followBlog",
            "touchend a.followingPill": "unfollowBlog"
        },
        initialize: function(options) {
            this.listenTo(this.model, "change:is_following", this.render, this);
            this.nonce = options.nonce || $("#subs").val();
            this.render();
        },
        render: function() {
            var followPill;
            if (this.model.get("is_following")) {
                followPill = templateFactory.fetch("unfollow-blog-pill", this.model.attributes);
            } else {
                followPill = templateFactory.fetch("follow-blog-pill", this.model.attributes);
            }
            this.$el.html(followPill);
            return this;
        },
        followBlog: function(e) {
            e.preventDefault();
            var isFollowing = this.model.get("is_following"), t = this, request;
            this.model.set("is_following", 1);
            statUtils.recordEvent("Reader", "Clicked Follow Blog");
            if (this.model.get("blog_id")) {
                request = window.wpcomNewdashActions.followBlog(this.model.get("blog_id"), this.nonce);
                $(".reader-header a.blog.follow").replaceWith(templateFactory.fetch("unfollow-blog-button", {
                    blog_id: this.model.get("blog_id")
                }));
            } else {
                request = window.wpcomNewdashActions.followFeed(this.model.get("feed_id"), this.nonce);
                $(".reader-header a.feed.follow").replaceWith(templateFactory.fetch("unfollow-feed-button", {
                    blog_id: this.model.get("feed_id")
                }));
            }
            request.error(function() {
                t.model.set("is_following", isFollowing);
            });
            localStorage.clear();
        },
        unfollowBlog: function(e) {
            e.preventDefault();
            var isFollowing = this.model.get("is_following"), t = this, request;
            statUtils.recordEvent("Reader", "Clicked On Post Unfollow Blog");
            this.model.set("is_following", 0);
            if (this.model.get("blog_id")) {
                request = window.wpcomNewdashActions.unfollowBlog(this.model.get("blog_id"), this.nonce);
                $(".reader-header a.blog.following").replaceWith(templateFactory.fetch("follow-blog-button", {
                    blog_id: this.model.get("blog_id")
                }));
            } else {
                request = window.wpcomNewdashActions.unfollowFeed(this.model.get("feed_id"), this.nonce);
                $(".reader-header a.feed.following").replaceWith(templateFactory.fetch("follow-feed-button", {
                    blog_id: this.model.get("feed_id")
                }));
            }
            request.error(function() {
                t.model.set("is_following", isFollowing);
            });
            localStorage.clear();
        }
    });
    return WpcomFollowPillButtonView;
});

define("PostCommentForm", [ "CurrentUser", "templateFactory", "PostComment", "statUtils", "newdashI18n" ], function(CurrentUser, templateFactory, PostComment, statUtils, newdashI18n) {
    var $ = jQuery, WpcomReaderCommentForm = Backbone.View.extend({
        model: CurrentUser,
        initialize: function(options) {
            this.comments = options.comments;
            this.postView = options.postView;
            window.wpcom.events.on("reader:comments:reply", this.prepReply, this);
            window.wpcom.events.on("reader:reblogging:open", this.hide, this);
            window.wpcom.events.on("reader:reblogging:close", this.show, this);
        },
        events: {
            "click button": "postComment",
            "click .cancel-reply": "cancelReply",
            "touchend button": "postComment",
            "touchend .cancel-reply": "cancelReply",
            'focus [name="comment"]': "showActions",
            'mouseup [name="comment"]': "resizeCommentArea",
            'keydown [name="comment"]': "resizeCommentBox",
            'change [name="comment"]': "resizeCommentBox",
            'blur [name="comment"]': "resizeCommentBox",
            'cut [name="comment"]': "resizeCommentBox",
            'drop [name="comment"]': "resizeCommentBox",
            'paste [name="comment"]': "resizeCommentBox"
        },
        render: function() {
            if (this.comments.post.get("comment_status") === "open") {
                var data = this.model.toJSON();
                data.comment = "";
                if (this.replyTo) {
                    data.isReply = true;
                    data.replyingTo = this.replyTo.get("comment_author");
                }
                if (this.errorMessage) {
                    data.errorMessage = this.errorMessage;
                    data.comment = this.$el.find('[name="comment"]').val();
                }
                var html = templateFactory.fetch("comment-form", data);
                this.$el.html(html);
                this.$commentArea = this.$el.find('[name="comment"]');
                if ("undefined" !== typeof window.wpcomTermsCache) {
                    var siteID = this.comments.post.get("blog_id");
                    window.wpcomTermsCache.getMentions(siteID, "reader").done($.proxy(this.attachSuggestions, this));
                }
                this.commentAreaHeight = this.$commentArea.outerHeight();
                this.postView.setContentHeight();
            }
        },
        attachSuggestions: function(suggestions) {
            var siteID = this.comments.post.get("blog_id");
            this.$el.find('[name="comment"]').mentions(suggestions);
        },
        postComment: function(e) {
            var data = {};
            data.comment_content = this.$el.find('[name="comment"]').val();
            data.avatar = this.model.get("avatar");
            data.comment_author = this.model.get("display_name");
            var comment = new PostComment(data);
            comment.post = this.comments.post;
            statUtils.recordEvent("Reader", "Clicked Post Comment Button");
            if (this.replyTo) {
                comment.set("comment_parent", this.replyTo.get("comment_ID"));
                if (this.replyTo.children) {
                    this.replyTo.children.add(comment);
                } else {
                    this.replyTo.addChildren(comment);
                }
                wpcom.events.trigger("reader:comments:cancelReply");
            } else {
                this.comments.add(comment);
            }
            comment.save(null, {
                success: _.bind(this.success, this),
                error: _.bind(this.error, this)
            });
            return false;
        },
        success: function(model, resp) {
            model.post.set("post_comment_count", Number(model.post.get("post_comment_count")) + 1);
            this.$commentArea.val("");
            this.replyTo = null;
            this.render();
            statUtils.bumpStat("reader_actions", "posted_comment");
        },
        error: function(model, resp) {
            model.destroy();
            if (_.has(resp, "message")) {
                this.errorMessage = resp.message;
            } else {
                this.errorMessage = newdashI18n.get([ "fp_comments", "unknown_error" ]);
            }
            this.render();
        },
        prepReply: function(comment) {
            if (this.$commentArea.val() !== "") {
                if (!confirm(newdashI18n.get([ "fp_comments", "confirm_overwrite" ]))) {
                    return;
                }
            }
            this.replyTo = comment;
            this.render();
            this.$el.find('[name="comment"]').focus();
        },
        cancelReply: function() {
            statUtils.recordEvent("Reader", "Clicked Cancel Comment");
            if (this.$commentArea.val() !== "") {
                if (!confirm(newdashI18n.get([ "fp_comments", "confirm_overwrite" ]))) {
                    return;
                }
            }
            this.replyTo = null;
            this.$commentArea.val("");
            wpcom.events.trigger("reader:comments:cancelReply");
            this.render();
            return false;
        },
        showActions: function() {
            this.$el.find(".actions").removeClass("hide");
            this.postView.setContentHeight();
        },
        hideActions: function() {
            if (this.$commentArea.val() === "") {
                this.$el.find(".actions").addClass("hide");
                this.postView.setContentHeight();
            }
        },
        resizeCommentArea: function() {
            if (this.$commentArea.outerHeight() > this.commentAreaHeight) {
                this.postView.setContentHeight();
                this.commentAreaHeight = this.$commentArea.outerHeight();
            }
        },
        resizeCommentBox: function(e) {
            var _self = this;
            clearTimeout(this.resizeTimer);
            this.resizeTimer = setTimeout(function() {
                var $textarea = $(e.target), initialHeight = 42;
                $textarea.height(initialHeight).height($textarea.scrollHeight);
                while ($textarea.outerHeight() < e.target.scrollHeight && $textarea.outerHeight() <= 150) {
                    $textarea.height($textarea.height() + 1);
                    _self.postView.setContentHeight();
                }
                _self.postView.setContentHeight();
            }, 150);
        },
        hide: function() {
            this.$el.addClass("hide");
            this.postView.setContentHeight();
        },
        show: function() {
            this.$el.removeClass("hide");
            this.postView.setContentHeight();
        },
        remove: function() {
            wpcom.events.off("reader:comments:reply", this.prepReply);
            wpcom.events.off("reader:reblogging:open", this.hide);
            wpcom.events.off("reader:reblogging:close", this.show);
            this.undelegateEvents();
            this.$commentArea = null;
            this.$el.remove();
            return this;
        }
    });
    return WpcomReaderCommentForm;
});

define("FullPostView", [ "templateFactory", "FullPostModel", "PostCommentListView", "ActionButtonsView", "FollowPillButtonView", "PostCommentForm", "statUtils" ], function(templateFactory, FullPostModel, CommentListView, ActionButtonsView, FollowPillButtonView, CommentForm, statUtils) {
    var $ = jQuery, WpcomReaderFullPostView = Backbone.View.extend({
        model: FullPostModel,
        events: {
            "click #fpb-overlay": "onClosePost",
            "click #fpb-close": "onClosePost",
            "click a.comment-like-link": "likeComment",
            "click a.original": "bumpPermalinkStat"
        },
        initialize: function(options) {
            var _self = this;
            if (_.isArray(options.previousRoute)) {
                this.previousRoute = "/" + options.previousRoute.join("/");
            }
            if (this.previousRoute === undefined || this.previousRoute === window.location.pathname) {
                this.previousRoute = "/read/following/";
            }
            if (!this.model.get("post_content_full")) {
                var req = this.model.fetch({
                    data: {
                        action: this.model.action,
                        post_id: this.model.get("ID"),
                        blog_id: this.model.get("blog_id"),
                        feed_id: this.model.get("feed_id"),
                        feed_item_id: this.model.get("feed_item_id")
                    }
                });
                req.done(function(r) {
                    if ("-1" == r) window.wpcomNewdash.router.setRoute("/read/following/"); else _self.render();
                });
            } else {
                this.render();
            }
            $(window).on("debouncedresize", this.setContentHeight);
            wpcom.events.on("reader:comments:focusNew", this.focusNewComment, this);
            wpcom.events.on("reader:reblogging:open", this.setContentHeight, this);
            wpcom.events.on("reader:reblogging:close", this.setContentHeight, this);
        },
        render: function() {
            this.model.initComments();
            this.originalScrollTop = $(document).scrollTop();
            this.$el.css("top", this.originalScrollTop + "px");
            $("html").addClass("no-scroll");
            window.wpcomNewdash.setTitle(this.model.get("post_title"));
            this.$el.html(templateFactory.fetch("full-post", this.model.attributes));
            if (window.wpcomNewdash.isTouchDevice) this.setupTouchMods();
            if (_.isObject(this.model.commentsTree)) {
                this.$el.find("#fpb-comments-box").addClass("loading");
                var commentsBox = this.$el.find("#fpb-comments-box").addClass("loading");
                this.commentList = new CommentListView({
                    el: commentsBox.find(".fpb-comments"),
                    model: this.model.commentsTree,
                    postView: this
                });
            }
            if (this.model.get("ID")) {
                this.actionButtons = new ActionButtonsView({
                    el: this.$el.find(".actions"),
                    model: this.model,
                    showFollowAction: false
                });
            }
            this.followPillButton = new FollowPillButtonView({
                el: this.$el.find(".follow-button"),
                model: this.model
            });
            if (this.model.areCommentsOpen()) {
                this.commentForm = new CommentForm({
                    model: this.model.currentUser,
                    comments: this.model.commentsTree,
                    el: this.$el.find("#fpb-comment-form"),
                    postView: this
                });
                this.commentForm.render();
            } else {
                this.$el.find("#fpb-comment-form").addClass("hide");
            }
            this.setContentHeight();
            this.renderStatsPixel();
            this.$el.find("#fpb-content").focus();
            $("body").trigger("post-load");
            return this;
        },
        renderStatsPixel: function() {
            if (1 != this.model.get("blog_site_id")) return;
            this.$el.append('<img id="wpcom-stats" src="//pixel.wp.com/g.gif?ref=http://wordpress.com/&reader=1&v=wpcom&host=' + this.model.get("blog_url").replace(/.*?:\/\//g, "") + "&blog=" + this.model.get("blog_id") + "&post=" + this.model.get("ID") + "&rand=" + Math.random() + "&user_id=" + this.model.currentUser.get("user_id") + '">');
        },
        onClosePost: function(e) {
            e.preventDefault();
            this.closePost();
            window.wpcomNewdash.router.setRoute(this.previousRoute);
        },
        closePost: function() {
            if (_.isObject(this.commentList)) {
                this.commentList.remove();
            }
            if (_.isObject(this.commentForm)) {
                this.commentForm.remove();
            }
            $("html").removeClass("no-scroll");
            $(window).off("debouncedresize", this.setContentHeight);
            wpcom.events.off("reader:comments");
            wpcom.events.off("reader:reblogging:open", this.setContentHeight);
            wpcom.events.off("reader:reblogging:close", this.setContentHeight);
            this.$el.html("");
            this.undelegateEvents();
            if (window.wpcomNewdash.isTouchDevice) {
                $(document).scrollTop(this.originalScrollTop);
                $("html").removeClass("fpb-touch-device");
            }
            if (_.isObject(this.actionButtons)) {
                this.actionButtons.destroy();
            }
        },
        setContentHeight: function() {
            if (window.wpcomNewdash.isTouchDevice) {
                return;
            }
            var $content = $("#fpb-content");
            var $commentForm = $("#fpb-comment-form");
            var formHeight = 0;
            if (!$commentForm.hasClass("hide") && !window.wpcomNewdash.isTouchDevice) {
                formHeight = $commentForm.outerHeight();
            }
            $content.css("height", $content.parent().height() - (formHeight + $("#fpb-actions").outerHeight() + $("#fpb-reblog-ui").outerHeight()));
        },
        focusNewComment: function(comment) {
            var commentTop = comment.$el.position().top;
            var $content = this.$el.find("#fpb-content");
            if (!this.isVisible(commentTop)) {
                $content.scrollTop($content.scrollTop() + (commentTop - $content.height() * .333));
            }
        },
        isVisible: function(commentTop) {
            return commentTop < this.$el.find("#fpb-content").height() && commentTop >= 0;
        },
        setupTouchMods: function() {
            var $content = this.$el.find("#fpb-content");
            $("html").addClass("fpb-touch-device");
            this.$el.css("top", 0);
            $("body").height($(window).height());
            if (window.matchMedia("(max-width: 640px)").matches) {
                var extra = window.navigator.userAgent.toLowerCase().match("safari") && !window.navigator.userAgent.toLowerCase().match("crios") ? 62 : 0;
                this.$el.height($(window).height() + extra);
            } else {
                if (!window.wpcomNewdash.isTouchDevice) {
                    this.$el.height($(window).height());
                }
                this.$el.find("#fpb-comment-form").appendTo($content);
            }
            window.scrollTo(0, 0);
        },
        likeComment: function(e) {
            e.preventDefault();
            var $container = $(e.target).closest("div.comment-likes");
            if ("comment-liked" === $container.data("liked")) {
                window.wpcomNewdashActions.unlikeComment();
                statUtils.recordEvent("Reader", "Clicked Comment Unlike");
            } else {
                window.wpcomNewdashActions.likeComment();
                statUtils.recordEvent("Reader", "Clicked Comment Like");
            }
            localStorage.clear();
        },
        bumpPermalinkStat: function() {
            statUtils.recordEvent("Reader", "Clicked View Original Post");
            statUtils.bumpStat("reader_actions", "visited_post_permalink");
        }
    });
    return WpcomReaderFullPostView;
});

define("postRoute", [ "FullPostModel", "FullPostView", "statUtils" ], function(FullPostModel, FullPostView, statUtils) {
    var $ = jQuery, init = function(args) {
        var loadedPosts = window.wpcomReader.activeCollection, fetchedPost, postModel;
        if (loadedPosts.models) {
            if (args.blogId && args.postId) {
                fetchedPost = loadedPosts.findWhere({
                    blog_id: Number(args.blogId),
                    ID: Number(args.postId)
                });
            } else {
                fetchedPost = loadedPosts.findWhere({
                    feed_id: Number(args.feedId),
                    feed_item_id: Number(args.feedItemId)
                });
            }
        }
        if (!fetchedPost) {
            postModel = new FullPostModel(args.blogId && args.postId ? {
                ID: args.postId,
                blog_id: args.blogId
            } : {
                feed_item_id: args.feedItemId,
                feed_id: args.feedId
            });
        } else {
            postModel = fetchedPost;
        }
        statUtils.bumpStat("reader_views", "full_post");
        this.fullPostView = new FullPostView({
            el: $("#fpb-ui"),
            model: postModel,
            previousRoute: window.wpcomNewdash.router.previousRoute
        });
    };
    return {
        init: init
    };
});

if ("undefined" === typeof wpcom.events) {
    wpcom.events = _.extend({}, Backbone.Events);
}

require([ "localStorage", "urlUtils", "statUtils", "templateFactory", "wpcomReaderConstants", "help", "friendFinder", "nux", "notifications", "newdashI18n", "postRoute" ], function(localStorage, urlUtils, statUtils, templateFactory, wpcomReaderConstants, wpcomHelpTab, wpcomFriendFinder, wpcomNewdashNux, wpcomMyNotificationsTab, newdashI18n, wpcomPost) {
    var $ = jQuery, w = window, jqxhr = false, wpcomNewdash, wpcomLocalStorage = localStorage;
    wpcomLocalStorage.init();
    $("div#tab-content").on("blogUserTags.modify", "ul.blogs > li", function(e) {
        wpcomLocalStorage.remove("wpcom_template_my-blogs.php_content");
    });
    wpcomNewdash = {
        router: false,
        request: false,
        activeTab: false,
        routeModuleReferences: {},
        lastQueryId: false,
        message: "",
        isTouchDevice: w.navigator.userAgent.toLowerCase().match(/mobile|android|ios/i) != null,
        init: function() {
            this.unload();
            this.checkStorage();
            var $tabContent = $("#tab-content");
            if (!$tabContent.length || !$tabContent.data("initial-page")) {
                this.showLoader();
            }
            wpcomNewdashActions.init();
            wpcomReader.init();
            this.currentPageTitle = wpcomReaderConstants.initialPageTitle;
            if (!this.isTouchDevice) {
                $("html").removeClass("touch");
            }
            this.router = Router(this.routes).configure({
                externalRoutes: this.externalRoutes(),
                strict: false,
                recurse: "forward",
                html5history: true,
                before: function() {
                    var route = this.getRoute(), tab;
                    tab = wpcomNewdash.getCurrentTab(route);
                    this.currentRoute = route;
                    wpcomNewdash.activeTab = tab;
                    $("body").addClass("newdash-" + tab).removeClass("noadminbar");
                    $("ul#homenav").show();
                    $("#footer").addClass("show");
                    $("#menu-dash-newpost-tagged").removeClass("visible");
                    $("#menu-dash-newpost").show();
                    wpcomNewdash.setTitle();
                    statUtils.bumpStat("newdash_pageviews", "route");
                },
                on: function() {
                    var route = this.getRoute(), tab = wpcomNewdash.getCurrentTab(route);
                },
                notfound: function() {
                    var path = "/";
                    setTimeout(function() {
                        wpcomNewdash.router.redirectTo(path);
                    });
                },
                after: function() {
                    this.previousRoute = this.currentRoute;
                    if (typeof wpcomNewdash.activeTab !== undefined) {
                        $("body").removeClass("newdash-" + wpcomNewdash.activeTab);
                    }
                }
            }).init(this.initialRoute());
            this.notesMenu();
            if (w.postMessage) {
                $(w).on("message", function(e) {
                    if (!wpcomNewdash || !wpcomNewdash.router || "function" != typeof wpcomNewdash.router.getRoute) {
                        return;
                    }
                    var currentRoute = wpcomNewdash.router.getRoute();
                    e = e.originalEvent;
                    switch (e.data) {
                      case "closeCustomizerNewdash":
                        if (currentRoute.length < 3 || "customize" != currentRoute[2]) {
                            return;
                        }
                        newRoute = [ "", currentRoute[0], currentRoute[1], "posts", "" ].join("/");
                        wpcomNewdash.router.setRoute(newRoute);
                        break;

                      case "skipPurchaseStep":
                        if (currentRoute.length >= 3 && "purchase" === currentRoute[2]) {
                            wpcomNewdash.router.setRoute("/welcome/step/after/purchase/");
                        }
                        wpcomNewdashNux.removePurchaseStep();
                        break;
                    }
                });
            }
        },
        initialRoute: function() {
            var query = w.location.search.replace(/^\?/, ""), path = w.location.pathname, hash = w.location.hash, hashQuery;
            if (/^\/?$/.test(path)) {
                if (/^#?.+/.test(hash)) {
                    path = hash.replace(/^#?!?/, "").split("?")[0];
                    hashQuery = hash.split("?")[1];
                    if (hashQuery && query) {
                        query = urlUtils.mergeQueryParams(query, hashQuery);
                    } else if (hashQuery) {
                        query = hashQuery;
                    }
                } else {
                    path = "/";
                }
            }
            if (query) {
                query = "?" + query;
            }
            path = path.replace(/\/\//g, "/");
            return path + query;
        },
        getCurrentTab: function(route) {
            var tab = route[0];
            if (_.indexOf([ "", "activities", "find-friends", "following", "fresh", "tag", "tags", "read", "recommendations" ], tab) !== -1) {
                tab = "read";
            }
            return tab;
        },
        isBlogOwner: function(route) {
            return window.currentUser.blog_ids && -1 !== $.inArray(parseInt(route[1], 10), window.currentUser.blog_ids);
        },
        externalRoutes: function() {
            var routes = [ "/sites", "/post\\/?$", "/wp-login.php", "/wp-admin", "/me/billing", "/me/next", "/stats", "/posts", "/pages", "/customize", "/menus/?.*", "/sharing(/.*)?$" ];
            if (wpcomNewdashFeatures.calypso_plans) {
                routes.push("/plans/?.*");
            }
            if (wpcomNewdashFeatures.calypso_checkout) {
                routes.push("/checkout(/[^\\/]/?)?$");
            }
            if (wpcomNewdashFeatures.calypso_domain_search) {
                routes.push("/domains/?.*");
            }
            if (wpcomNewdashFeatures.calypso_me) {
                routes.push("/me/?.*");
            }
            return routes;
        },
        routes: {
            "^/?$": {
                on: function() {
                    wpcomNewdash.setTitle(newdashI18n.get([ "page_titles", "Blogs I Follow" ]));
                    wpcomReader.loadFrame().then(function() {
                        wpcomReader.renderPage({
                            page: "following"
                        });
                    });
                },
                after: function() {
                    wpcomReader.unload();
                }
            },
            "/activities/": {
                on: function() {
                    wpcomNewdash.highlightMenu("reader");
                    statUtils.bumpStat("newdash_visits", "activities");
                    var route = this.getRoute();
                    wpcomNewdash.setTitle(newdashI18n.get([ "page_titles", "My Activity" ]));
                    if (!route[1]) {
                        wpcomNewdash.loadTemplate({
                            template: "read.php"
                        }).done(function() {
                            wpcomReader.pageActivities({
                                filter: "all"
                            });
                        });
                    }
                },
                "/comments/": function() {
                    wpcomNewdash.setTitle(newdashI18n.get([ "page_titles", "Comments I Made" ]));
                    statUtils.recordPageView("/activities/comments", "Reader > My Comments");
                    wpcomNewdash.loadTemplate({
                        template: "read.php"
                    }).done(function() {
                        wpcomReader.pageActivities({
                            filter: "comments"
                        });
                    });
                },
                "/likes/": function() {
                    wpcomNewdash.setTitle(newdashI18n.get([ "page_titles", "Posts I Like" ]));
                    wpcomNewdash.loadTemplate({
                        template: "read.php"
                    }).done(function() {
                        wpcomReader.pageActivities({
                            filter: "likes"
                        });
                    });
                }
            },
            "/find-friends/": function() {
                if (wpcomNewdashFeatures.me_section) {
                    this.redirectTo("/me/find-friends");
                    return;
                }
                wpcomNewdash.setTitle(newdashI18n.get([ "page_titles", "Find Friends" ]));
                wpcomReader.loadFrame().then(function() {
                    wpcomReader.renderPage({
                        page: "find_friends"
                    });
                });
            },
            "/following/edit/": function() {
                statUtils.recordPageView("/following/edit", "Reader > Following > Edit");
                wpcomNewdash.setTitle(newdashI18n.get([ "page_titles", "Edit Blogs I Follow" ]));
                wpcomReader.loadFrame().then(function() {
                    wpcomReader.renderPage({
                        page: "edit"
                    });
                });
            },
            "/following/import/": function() {
                statUtils.recordPageView("/following/import", "Reader > Following > Import");
                wpcomReader.loadFrame().then(function() {
                    wpcomReader.renderPage({
                        page: "import"
                    });
                });
            },
            "/following/add-follow/:user_id/:blog_id/": {
                on: function() {
                    wpcomNewdash.highlightMenu("reader");
                    wpcomNewdash.setTitle(newdashI18n.get([ "page_titles", "Edit Blogs I Follow" ]));
                }
            },
            "/connected-blogs/": function() {
                statUtils.recordPageView("/connected-blogs", "Reader > Connected Blogs");
                wpcomNewdash.loadTemplate({
                    template: "connected-blogs.php"
                }).done(function() {
                    wpcomNewdash.setTitle(newdashI18n.get([ "page_titles", "Connected Blogs" ]));
                });
            },
            "/fresh/": {
                on: function() {
                    wpcomReader.loadFrame().then(function() {
                        statUtils.bumpStat("newdash_visits", "fresh");
                        wpcomNewdash.setTitle(newdashI18n.get([ "page_titles", "Freshly Pressed" ]));
                        wpcomReader.renderPage({
                            page: "fresh"
                        });
                    });
                    if (this.previousRoute && this.previousRoute[0] === this.currentRoute[0]) {
                        return;
                    }
                    if (this.previousRoute && this.previousRoute.length > 1 && "read" === this.previousRoute[0] && "post" === this.previousRoute[1]) {
                        return;
                    }
                    wpcomNewdashActions.scrollToTop();
                },
                after: function() {
                    wpcomReader.unload();
                }
            },
            "/groups/": {
                on: function() {
                    wpcomReader.loadFrame();
                    var route = this.getRoute();
                    if (!route[1]) {
                        this.redirectTo("/");
                    }
                },
                after: function() {
                    wpcomReader.unload();
                },
                "/new/": {
                    on: function() {
                        statUtils.recordPageView("/groups/new", "Reader > Groups > New");
                        wpcomReader.renderPage({
                            page: "group_new"
                        });
                    },
                    after: function() {
                        wpcomReader.unload();
                    }
                },
                "/:group_id/": {
                    on: function(groupID) {
                        var route = this.getRoute();
                        if (!route[2]) {
                            statUtils.recordPageView("/groups/:id", "Reader > Groups > View Group");
                            wpcomReader.renderPage({
                                page: "group",
                                groupID: groupID
                            });
                        }
                    },
                    after: function() {
                        wpcomReader.unload();
                    },
                    "/edit/": {
                        on: function(groupID) {
                            statUtils.recordPageView("/groups/edit", "Reader > Groups > Edit Group");
                            wpcomReader.renderPage({
                                page: "group_edit",
                                groupID: groupID
                            });
                        },
                        after: function() {
                            wpcomReader.unload();
                        }
                    }
                }
            },
            "/opt-out/goal/:id/": {
                on: function() {
                    wpcomNewdash.highlightMenu("");
                    wpcomNewdash.setTitle(newdashI18n.get([ "page_titles", "Posting Goal Opt-Out" ]));
                }
            },
            "/opt-out/whats-new/:id/": {
                on: function() {
                    wpcomNewdash.highlightMenu("");
                    wpcomNewdash.setTitle(newdashI18n.get([ "page_titles", "What's New Opt-Out" ]));
                }
            },
            "/post/": {
                on: function() {
                    if (this.getRoute()[2] % 1 !== 0) {
                        statUtils.recordPageView("/post", "New Post");
                    }
                    if (("undefined" == typeof myBlogsPostEditor || !myBlogsPostEditor) && currentUser.blog_count == 1 && !currentUser.primary_blog.can_post) {
                        window.location.href = "//wordpress.com/sites";
                    }
                    wpcomNewdash.highlightMenu("post");
                    if ("undefined" == typeof myBlogsPostEditor || !myBlogsPostEditor) {
                        statUtils.bumpStat("newdash_visits", "post");
                    } else {
                        wpcomNewdash.setTitle(myBlogsPostEditor.getPageTitle());
                    }
                    wpcomNewdash.loadTemplate({
                        template: "post.php"
                    }).done(function() {
                        wpcom.doAction("newdash_editor_page_loaded");
                        if ("undefined" != typeof instapost) {
                            instapost.init();
                        }
                    });
                    wpcomNewdashActions.scrollToTop();
                },
                after: function() {
                    if ("undefined" !== typeof myBlogsPostEditor) {
                        myBlogsPostEditor.tearDown();
                    }
                    if ("undefined" != typeof instapost && instapost && instapost.editing && instapost.reset_defaults) {
                        instapost.reset_defaults();
                        instapost.editing = false;
                    }
                    wpcom.doAction("leaving_newdash_editor_page");
                },
                "/:blog_id/": {
                    on: function(blogid) {
                        if (wpcom && wpcom.masterbar) {
                            wpcom.masterbar.setSite({
                                id: blogid
                            });
                        }
                    },
                    "/new/": {
                        on: function() {}
                    },
                    "/:post_id/": {
                        on: function() {
                            statUtils.recordPageView("/post/:blogid/:postid", "Edit Post");
                        }
                    }
                },
                "/new/": {
                    on: function() {}
                }
            },
            "/page/": {
                on: function() {
                    if (this.getRoute()[2] % 1 !== 0) {
                        statUtils.recordPageView("/page", "New Page");
                    }
                    if (("undefined" == typeof myBlogsPostEditor || !myBlogsPostEditor) && currentUser.blog_count == 1 && !currentUser.primary_blog.can_post) {
                        window.location.href = "//wordpress.com/sites";
                    }
                    wpcomNewdash.highlightMenu("post");
                    if ("undefined" == typeof myBlogsPostEditor || !myBlogsPostEditor) {
                        statUtils.bumpStat("newdash_visits", "page");
                    } else {
                        wpcomNewdash.setTitle(myBlogsPostEditor.getPageTitle());
                    }
                    wpcomNewdash.loadTemplate({
                        template: "page.php"
                    }).done(function() {
                        wpcom.doAction("newdash_editor_page_loaded");
                        if ("undefined" != typeof instapost) {
                            instapost.init();
                        }
                    });
                    wpcomNewdashActions.scrollToTop();
                },
                after: function() {
                    if ("undefined" !== typeof myBlogsPostEditor) {
                        myBlogsPostEditor.tearDown();
                    }
                    if ("undefined" != typeof instapost && instapost && instapost.editing && instapost.reset_defaults) {
                        instapost.reset_defaults();
                        instapost.editing = false;
                    }
                    wpcom.doAction("leaving_newdash_editor_page");
                },
                "/:blog_id/": {
                    "/new/": {
                        on: function() {}
                    },
                    "/:post_id/": {
                        on: function() {
                            statUtils.recordPageView("/page/:blogid/:postid", "Edit Page");
                        }
                    }
                },
                "/new/": {
                    on: function() {}
                }
            },
            "/manage/": {
                "/:blog_id": {
                    on: function(blog_id) {
                        wpcomNewdash.highlightMenu("my-sites");
                        wpcomNewdash.loadTemplate({
                            template: "manage.php",
                            query: "blog_id=" + blog_id
                        }).done(function() {
                            require([ "manage" ], function(wpcomWidgets) {
                                wpcomWidgets.init();
                            });
                        });
                    }
                }
            },
            "/notifications/": {
                on: function() {
                    wpcomNewdash.highlightMenu("notifications");
                    wpcomNewdash.setTitle(newdashI18n.get([ "page_titles", "Notifications" ]));
                    statUtils.bumpStat("newdash_visits", "notifications");
                    wpcomNewdash.loadTemplate({
                        template: "notifications.php"
                    }).done(function() {
                        wpcomMyNotificationsTab.init();
                    });
                },
                "/latest/": function() {
                    this.setRoute("/notifications/");
                }
            },
            "/my-stats/": {
                on: function() {
                    if (wpcomNewdashFeatures.masterbar) {
                        wpcomNewdash.highlightMenu("my-sites");
                    } else {
                        wpcomNewdash.highlightMenu("stats");
                    }
                    wpcomNewdash.setTitle(newdashI18n.get([ "page_titles", "My Stats" ]));
                    wpcomNewdash.initStats({
                        router: this
                    });
                },
                after: function() {
                    if (typeof tooltip == "object" && tooltip) {
                        tooltip.remove();
                    }
                }
            },
            "/themes/": {
                on: function() {
                    statUtils.bumpStat("newdash_visits", "themes");
                    if (this.getRoute()[1] == "") {
                        statUtils.recordPageView("/themes", "Themes");
                    }
                    wpcomNewdash.highlightMenu("");
                    wpcomNewdash.setTitle(newdashI18n.get([ "page_titles", "Change Theme" ]));
                    var route = this.getRoute();
                    require([ "changeTheme" ], function(wpcomChangeTheme) {
                        if (wpcomChangeTheme.isSameBlog(route)) {
                            wpcomChangeTheme.updateThemeDataForRoute(route);
                            wpcomChangeTheme.init();
                        } else {
                            wpcomNewdash.showLoader();
                            wpcomReader.showLoading("change-theme");
                            wpcomNewdash.loadTemplate({
                                template: "themes/change-theme.php",
                                query: wpcomChangeTheme.buildQuery(route)
                            }).done(function() {
                                wpcomReader.hideLoading();
                                wpcomChangeTheme.init();
                            });
                        }
                    });
                    $("#themes-loader").remove();
                },
                after: function() {
                    require([ "changeTheme" ], function(wpcomChangeTheme) {
                        wpcomChangeTheme.unload(wpcomNewdash.router.getRoute());
                    });
                },
                "/filter/[^/]+/": {
                    on: function(filter) {
                        statUtils.recordPageView("/themes/:filter", "Themes > Filter");
                        statUtils.recordEvent("Themes", "Clicked Filter", this.getRoute()[2]);
                    },
                    "/type/:type": {
                        on: function(type) {}
                    }
                },
                "/search/:term": {
                    on: function(term) {},
                    "/type/:type": {
                        on: function(type) {}
                    }
                },
                "/:theme_or_blog/": {
                    on: function() {
                        statUtils.recordPageView("/themes/:themename", "Themes > Theme Details");
                    },
                    "/filter/[^/]+/": {
                        on: function() {},
                        "/type/:type": {
                            on: function() {}
                        }
                    },
                    "/:theme/": {
                        on: function() {},
                        "/support/": {
                            on: function() {}
                        }
                    },
                    "/type/:type": {
                        on: function() {}
                    }
                }
            },
            "/jetpack/": function() {
                wpcomNewdash.setTitle(newdashI18n.get([ "page_titles", "Jetpack" ]));
                wpcomNewdash.loadTemplate({
                    template: "jetpack.php"
                }).done(function() {});
            },
            "/upgrade/:blogid": {
                on: function(blogid) {
                    var route = this.getRoute();
                    if (!wpcomNewdash.isBlogOwner(route)) {
                        window.location.href = "//wordpress.com/sites";
                        return;
                    }
                    wpcomManage.loadManage(route);
                    $(document).on("my-blog-rendered.wpcom-newdash", function() {
                        wpcomNewdash.showLoader();
                        wpcomNewdash.setTitle(newdashI18n.get([ "page_titles", "Upgrade" ]));
                        var query = "blog_id=" + blogid;
                        if ("" !== wpcomNewdash.message) {
                            query += "&message=" + wpcomNewdash.message;
                        }
                        wpcomNewdash.loadTemplate({
                            template: "upgrade/upgrade.php",
                            query: query
                        });
                    });
                },
                after: function() {
                    wpcomManage.unload();
                },
                "/thank-you/": function() {
                    wpcomNewdash.message = "thank-you";
                    wpcomReader.bindDismissNoticeEvent();
                }
            },
            "/checkout/:blogid/:product": {
                on: function(blogid, product) {
                    var route = this.getRoute(), query = "blog_id=" + blogid + "&product=" + product;
                    if (!wpcomNewdash.isBlogOwner(route)) {
                        window.location.href = "//wordpress.com/sites";
                        return;
                    }
                    wpcomManage.loadManage(route);
                    if (route[3]) {
                        query += "&meta=" + route[3];
                    }
                    wpcomNewdash.hideEmailVerificationNotice();
                    if ("39" === product) {
                        query += "&change-theme=1";
                    }
                    if (window.location.search) {
                        query += "&" + window.location.search.substring(1);
                    }
                    $(document).on("my-blog-rendered.wpcom-newdash", function() {
                        wpcomNewdash.setTitle(newdashI18n.get([ "page_titles", "Checkout" ]));
                        wpcomNewdash.showLoader();
                        wpcomNewdash.loadTemplate({
                            template: "my-blogs/checkout.php",
                            query: query
                        }).done(function() {
                            wpcomNewdash.addLoader();
                            wpcomNewdash.setProperty("Store_Version", "newdash");
                            $("#tab-content iframe").load(function() {
                                wpcomNewdash.removeLoader();
                                window.scrollTo(0, 0);
                            });
                        });
                    });
                },
                after: function() {
                    wpcomManage.unload();
                    wpcomNewdash.showEmailVerificationNotice();
                },
                "/:meta/": function(meta) {}
            },
            "/trophy-case/": function() {
                if (wpcomNewdashFeatures.me_section) {
                    this.redirectTo("/me/trophies");
                    return;
                }
                wpcomNewdash.highlightMenu("me");
                wpcomNewdash.setTitle(newdashI18n.get([ "page_titles", "Trophy Case" ]));
                wpcomNewdash.loadTemplate({
                    template: "trophy-case.php"
                }).done(function() {
                    require([ "trophyCase" ], function(wpcomTrophyCase) {
                        wpcomTrophyCase.init();
                    });
                });
            },
            "/trophy-case/(.+)?": function(page) {
                if (wpcomNewdashFeatures.me_section) {
                    this.redirectTo("/me/trophies");
                    return;
                }
                wpcomNewdash.highlightMenu("me");
                wpcomNewdash.setTitle(newdashI18n.get([ "page_titles", "Trophy Case" ]));
                wpcomNewdash.loadTemplate({
                    template: "trophy-case.php",
                    tcpage: page
                }).done(function() {
                    require([ "trophyCase" ], function(wpcomTrophyCase) {
                        wpcomTrophyCase.init();
                    });
                });
            },
            "/help/": {
                on: function() {
                    if (wpcomNewdashFeatures.me_section) {
                        this.redirectTo("/me/help");
                        return;
                    }
                    var path = wpcomNewdash.getPathOrHash(), route;
                    if ($("#tab-content").children(".tab").attr("id") !== "help") {
                        wpcomNewdash.highlightMenu("me");
                    }
                    wpcomNewdash.setTitle(newdashI18n.get([ "page_titles", "Help" ]));
                    $("#help-main").find("a").removeClass("selected");
                    $("#help-main").find('li a[href="' + path + '"]').addClass("selected");
                    var route = this.getRoute();
                    if ($("#tab-content").children(".tab").attr("id") !== "help" || !route[2]) {
                        wpcomNewdash.loadTemplate({
                            template: "help.php"
                        }).done(function() {
                            statUtils.bumpStat("newdash_visits", "help");
                            wpcomHelpTab.init();
                        });
                    }
                },
                "/history/": {
                    on: function() {
                        if ($("#tab-content").children(".tab").attr("id") != "help") {
                            return;
                        }
                        wpcomHelpTab.showHistory();
                    }
                },
                "/search/(.+)?": {
                    on: function(query) {
                        if ($("#tab-content").children(".tab").attr("id") != "help") {
                            return;
                        }
                        wpcomHelpTab.doSearch(query);
                    }
                }
            },
            "/recommendations/(.+)?": {
                after: function() {
                    var route = this.getRoute(), wpcomReaderRecommendations = wpcomNewdash.routeModuleReferences.recommendations;
                    if (wpcomReaderRecommendations && !route[0] || "recommendations" !== route[0]) {
                        wpcomReaderRecommendations.unload();
                        delete wpcomNewdash.routeModuleReferences.recommendations;
                    }
                },
                on: function(topicSlug) {
                    var wpcomReaderRecommendations = wpcomNewdash.routeModuleReferences.recommendations;
                    wpcomNewdash.setTitle(newdashI18n.get([ "page_titles", "Recommended Blogs" ]));
                    if (topicSlug) {
                        statUtils.bumpStat("reader_recommendations_views", topicSlug);
                        statUtils.recordPageView("/recommendations/" + topicSlug, "Reader > Recommendations > " + topicSlug);
                    }
                    if (topicSlug && wpcomReaderRecommendations) {
                        wpcomReaderRecommendations.setTopic(topicSlug);
                    } else {
                        wpcomReader.loadFrame().then(function() {
                            wpcomReader.renderPage({
                                page: "recommendations",
                                topic: topicSlug || null
                            });
                            if (!topicSlug) {
                                statUtils.recordPageView("/recommendations", "Reader > Recommendations");
                            }
                        });
                    }
                }
            },
            "/settings/": {
                on: function() {
                    if (w.location.protocol === "http:") {
                        w.location.href = w.location.href.replace(/^http:/, "https:");
                    }
                    if (wpcomNewdashFeatures.me_section) {
                        this.redirectTo("/me/public-profile");
                        return;
                    }
                    if ($("#edit-settings #edit-profile-content").length) {
                        return;
                    }
                    wpcomNewdash.highlightMenu("me");
                    wpcomNewdash.setTitle(newdashI18n.get([ "page_titles", "Settings" ]));
                    statUtils.bumpStat("newdash_visits", "settings");
                    wpcomNewdash.loadTemplate({
                        template: "settings.php"
                    }).done(function() {
                        require([ "mySettings" ], function(wpcomMySettings) {
                            wpcomNewdash.routeModuleReferences.mySettings = wpcomMySettings;
                            var route = wpcomNewdash.router.getRoute();
                            wpcomMySettings.init();
                            wpcomMySettings.toggleSection($("a#" + route[1] + "-section").parent());
                            if (!route[1]) {
                                wpcomNewdash.router.setRoute("/settings/account/");
                            } else {
                                wpcomMySettings.toggleSection($("a#" + route[1] + "-section").parent());
                                if ("earnings" === route[1]) {
                                    jQuery("#primary-submit").hide();
                                }
                            }
                        });
                    });
                },
                "/account/": function() {
                    if (wpcomNewdashFeatures.me_section) {
                        this.redirectTo("/me/account");
                        return;
                    }
                    var mySettings = wpcomNewdash.routeModuleReferences.mySettings;
                    $(".edit-settings-header h2.title").html(newdashI18n.get([ "page_titles", "My Account" ]));
                    wpcomNewdash.setTitle(newdashI18n.get([ "page_titles", "My Account" ]));
                    if (mySettings) {
                        mySettings.toggleSection($("a#account-section").parent());
                    }
                },
                "/password/": function() {
                    if (wpcomNewdashFeatures.me_section) {
                        this.redirectTo("/me/password");
                        return;
                    }
                    var mySettings = wpcomNewdash.routeModuleReferences.mySettings;
                    $(".edit-settings-header h2.title").html(newdashI18n.get([ "page_titles", "Password" ]));
                    wpcomNewdash.setTitle(newdashI18n.get([ "page_titles", "Password" ]));
                    if (mySettings) {
                        mySettings.toggleSection($("a#password-section").parent());
                    }
                },
                "/security/": function() {
                    if (wpcomNewdashFeatures.me_section) {
                        this.redirectTo("/me/security");
                        return;
                    }
                    var mySettings = wpcomNewdash.routeModuleReferences.mySettings;
                    $(".edit-settings-header h2.title").html(newdashI18n.get([ "page_titles", "Security" ]));
                    wpcomNewdash.setTitle(newdashI18n.get([ "page_titles", "Security" ]));
                    if (mySettings) {
                        mySettings.toggleSection($("a#security-section").parent());
                    }
                },
                "/public-profile/": function() {
                    if (wpcomNewdashFeatures.me_section) {
                        this.redirectTo("/me/public-profile");
                        return;
                    }
                    var mySettings = wpcomNewdash.routeModuleReferences.mySettings;
                    $(".edit-settings-header h2.title").html(newdashI18n.get([ "page_titles", "Public Profile" ]));
                    wpcomNewdash.setTitle(newdashI18n.get([ "page_titles", "Public Profile" ]));
                    if (mySettings) {
                        mySettings.toggleSection($("a#public-profile-section").parent());
                    }
                },
                "/notifications/": function() {
                    if (wpcomNewdashFeatures.me_section) {
                        this.redirectTo("/me/notifications");
                        return;
                    }
                    var mySettings = wpcomNewdash.routeModuleReferences.mySettings;
                    $(".edit-settings-header h2.title").html(newdashI18n.get([ "page_titles", "Notifications" ]));
                    wpcomNewdash.setTitle(newdashI18n.get([ "page_titles", "Notifications" ]));
                    if (mySettings) {
                        mySettings.toggleSection($("a#notifications-section").parent());
                    }
                },
                "/disbursements/": function() {
                    var mySettings = wpcomNewdash.routeModuleReferences.mySettings;
                    $(".edit-settings-header h2.title").html(newdashI18n.get([ "page_titles", "Disbursements" ]));
                    wpcomNewdash.setTitle(newdashI18n.get([ "page_titles", "Disbursements" ]));
                    if (mySettings) {
                        mySettings.toggleSection($("a#disbursements-section").parent());
                    }
                },
                "/earnings/": function() {
                    var mySettings = wpcomNewdash.routeModuleReferences.mySettings;
                    $(".edit-settings-header h2.title").html(newdashI18n.get([ "page_titles", "Earnings" ]));
                    wpcomNewdash.setTitle(newdashI18n.get([ "page_titles", "Earnings" ]));
                    if (mySettings) {
                        mySettings.toggleSection($("a#earnings-section").parent());
                    }
                    $("#primary-submit").hide();
                },
                "/billing-history/": function() {
                    var mySettings = wpcomNewdash.routeModuleReferences.mySettings;
                    $(".edit-settings-header h2.title").html(newdashI18n.get([ "page_titles", "Billing History" ]));
                    if (wpcomNewdashFeatures.masterbar) {
                        wpcomNewdash.highlightMenu("me");
                    }
                    wpcomNewdash.setTitle(newdashI18n.get([ "page_titles", "Billing History" ]));
                    if (mySettings) {
                        mySettings.toggleSection($("a#billing-history-section").parent());
                    }
                },
                "/billing-history-v2/": {
                    on: function() {
                        this.redirectTo("/settings/billing-history/");
                    }
                },
                "/connected-apps/": function() {
                    this.setRoute("/settings/security/");
                },
                after: function() {
                    var route = wpcomNewdash.router ? wpcomNewdash.router.getRoute() : false;
                    if ((!route[0] || "settings" !== route[0]) && (wpcomNewdash.routeModuleReferences && wpcomNewdash.routeModuleReferences.mySettings)) {
                        delete wpcomNewdash.routeModuleReferences.mySettings;
                    }
                }
            },
            "/me/": {
                on: function() {
                    $("#footer").removeClass("show");
                    if (w.location.protocol === "http:") {
                        w.location.href = w.location.href.replace(/^http:/, "https:");
                    }
                    var route = _.compact(this.getRoute());
                    var accountSubroutes = [ "public-profile", "account", "password", "security", "notifications" ];
                    $(document).on("click", ".me-tab .mobile-header", function() {
                        $("#sidebar").toggleClass("focus-sidebar");
                    });
                    if (1 == route.length || 2 == route.length && -1 !== $.inArray(route[1], accountSubroutes)) {
                        if (!$("#public-profile-content").length) {
                            $(".me-sidebar li").removeClass("selected");
                            wpcomNewdash.highlightMenu("me");
                            statUtils.bumpStat("newdash_visits", "me");
                            wpcomNewdash.showLoader();
                            wpcomReader.showLoading("me");
                            wpcomNewdash.loadTemplate({
                                template: "me/account.php"
                            }).done(function() {
                                require([ "mySettings", "tappable" ], function(wpcomMySettings, tappable) {
                                    tappable("#sidebar .sidebar-menu a:not(#me-signout-menu-item)", {
                                        noScroll: false,
                                        onTap: function(e, target) {
                                            $("#sidebar").removeClass("focus-sidebar");
                                        }
                                    });
                                    wpcomReader.hideLoading();
                                    wpcomNewdash.routeModuleReferences.mySettings = wpcomMySettings;
                                    $("div.section").not(".2fa").hide();
                                    wpcomMySettings.init();
                                    $("#me-account-menu-item").addClass("selected");
                                    if (1 == route.length) {
                                        wpcomNewdash.router.setRoute("/me/public-profile/");
                                    } else {
                                        wpcomMySettings.toggleSection($("a#" + route[1] + "-section").parent());
                                    }
                                });
                            });
                        }
                    }
                },
                "/public-profile/": function() {
                    var mySettings = wpcomNewdash.routeModuleReferences.mySettings;
                    wpcomNewdash.setTitle(newdashI18n.get([ "page_titles", "Public Profile" ]));
                    statUtils.recordPageView("/me/public-profile", "Me > Public Profile");
                    if (mySettings) {
                        mySettings.toggleSection($("a#public-profile-section").parent());
                    }
                },
                "/account/": function() {
                    var mySettings = wpcomNewdash.routeModuleReferences.mySettings;
                    wpcomNewdash.setTitle(newdashI18n.get([ "page_titles", "My Account" ]));
                    statUtils.recordPageView("/me/account", "Me > Account");
                    if (mySettings) {
                        mySettings.toggleSection($("a#account-section").parent());
                    }
                },
                "/password/": function() {
                    var mySettings = wpcomNewdash.routeModuleReferences.mySettings;
                    wpcomNewdash.setTitle(newdashI18n.get([ "page_titles", "Password" ]));
                    statUtils.recordPageView("/me/password", "Me > Password");
                    if (mySettings) {
                        mySettings.toggleSection($("a#password-section").parent());
                    }
                },
                "/security/": function() {
                    var mySettings = wpcomNewdash.routeModuleReferences.mySettings;
                    wpcomNewdash.setTitle(newdashI18n.get([ "page_titles", "Security" ]));
                    statUtils.recordPageView("/me/security", "Me > Security");
                    if (mySettings) {
                        mySettings.toggleSection($("a#security-section").parent());
                    }
                },
                "/notifications/": function() {
                    var mySettings = wpcomNewdash.routeModuleReferences.mySettings;
                    wpcomNewdash.setTitle(newdashI18n.get([ "page_titles", "Notifications" ]));
                    statUtils.recordPageView("/me/notifications", "Me > Notifications");
                    if (mySettings) {
                        mySettings.toggleSection($("a#notifications-section").parent());
                    }
                },
                "/billing/": function() {
                    $(".me-sidebar li").removeClass("selected");
                    this.redirectTo("/settings/billing-history/");
                },
                "/help/": {
                    on: function() {
                        $(".me-sidebar li").removeClass("selected");
                        wpcomNewdash.setTitle(newdashI18n.get([ "page_titles", "Help and Support" ]));
                        statUtils.bumpStat("newdash_visits", "me_help");
                        var selected = $(".me-sidebar .sidebar-menu .selected"), route = this.getRoute();
                        if (!selected.length || selected.attr("id") != "me-help-menu-item" || !route[3]) {
                            wpcomNewdash.highlightMenu("me");
                            wpcomNewdash.showLoader();
                            wpcomReader.showLoading("help");
                            wpcomNewdash.loadTemplate({
                                template: "me/help.php"
                            }).done(function() {
                                wpcomReader.hideLoading();
                                $("#me-help-menu-item").addClass("selected");
                            });
                        }
                        var $doc = $(document);
                        $doc.on("focusin", ".search input", function() {
                            $(this).closest(".search").addClass("active");
                        });
                        $doc.on("focusout", ".search input", function() {
                            $(this).closest(".search").removeClass("active");
                        });
                        $doc.on("mousedown", ".noticon-close-alt", function() {
                            $(".search #help-search").val("");
                        });
                        $doc.on("submit", "#search-form", function(e) {
                            e.preventDefault();
                            var query = $("#help-search").val();
                            if ("" === query) {
                                window.wpcomNewdash.router.setRoute("/me/help");
                                return;
                            }
                            query = encodeURIComponent(query);
                            window.wpcomNewdash.router.setRoute("/me/help/search/" + query.replace(/%20/g, "+"));
                        });
                    },
                    "/search/(.+)?": {
                        on: function(query) {
                            var selected = $(".me-sidebar .sidebar-menu .selected");
                            if (!selected.length || selected.attr("id") != "me-help-menu-item") {
                                wpcomNewdash.highlightMenu("me");
                                wpcomNewdash.loadTemplate({
                                    template: "me/help.php"
                                }).done(function() {
                                    wpcomReader.hideLoading();
                                    $("#me-help-menu-item").addClass("selected");
                                    wpcomHelpTab.doSearch(query);
                                });
                            } else {
                                wpcomHelpTab.doSearch(query);
                            }
                        }
                    },
                    after: function() {
                        var $doc = $(document);
                        $doc.off("focusin", ".search input");
                        $doc.off("focusout", ".search input");
                        $doc.off("mousedown", ".noticon-close-alt");
                        $doc.off("submit", "#search-form");
                    }
                },
                "/trophies/": function() {
                    $(".me-sidebar li").removeClass("selected");
                    wpcomNewdash.highlightMenu("me");
                    wpcomNewdash.setTitle(newdashI18n.get([ "page_titles", "Trophy Case" ]));
                    statUtils.bumpStat("newdash_visits", "me_trophies");
                    wpcomNewdash.showLoader();
                    wpcomReader.showLoading("trophies");
                    wpcomNewdash.loadTemplate({
                        template: "me/trophies.php"
                    }).done(function() {
                        wpcomReader.hideLoading();
                        $("#me-trophies-menu-item").addClass("selected");
                    });
                },
                "/trophies/(.+)?": function(page) {
                    $(".me-sidebar li").removeClass("selected");
                    wpcomNewdash.highlightMenu("me");
                    wpcomNewdash.setTitle(newdashI18n.get([ "page_titles", "Trophy Case" ]));
                    statUtils.bumpStat("newdash_visits", "me_trophies");
                    wpcomNewdash.showLoader();
                    wpcomReader.showLoading("trophies");
                    wpcomNewdash.loadTemplate({
                        template: "me/trophies.php",
                        tcpage: page
                    }).done(function() {
                        require([ "trophyCase" ], function(wpcomTrophyCase) {
                            wpcomTrophyCase.init();
                            wpcomReader.hideLoading();
                            $("#me-trophies-menu-item").addClass("selected");
                        });
                    });
                },
                "/find-friends/": function() {
                    $(".me-sidebar li").removeClass("selected");
                    wpcomNewdash.highlightMenu("me");
                    wpcomNewdash.setTitle(newdashI18n.get([ "page_titles", "Find Friends" ]));
                    statUtils.bumpStat("newdash_visits", "me_find_friends");
                    wpcomNewdash.showLoader();
                    wpcomReader.showLoading("find-friends");
                    wpcomNewdash.loadTemplate({
                        template: "me/find-friends.php"
                    }).done(function() {
                        wpcomReader.hideLoading();
                        wpcomFriendFinder.init();
                        $("#me-find-friends-menu-item").addClass("selected");
                    });
                },
                after: function() {
                    var $doc = $(document);
                    $doc.off("click", ".me-tab .mobile-header");
                    $doc.off("click touchend", ".me-tab #sidebar a");
                    $(".me-sidebar li").removeClass("selected");
                    var route = wpcomNewdash.router ? wpcomNewdash.router.getRoute() : false;
                    if ((!route[0] || "me" !== route[0]) && (wpcomNewdash.routeModuleReferences && wpcomNewdash.routeModuleReferences.mySettings)) {
                        wpcomNewdash.routeModuleReferences.mySettings.unload();
                        $("#edit-profile-content").remove();
                    }
                }
            },
            "/tags/": {
                on: function() {
                    wpcomNewdash.setTitle(newdashI18n.get([ "page_titles", "Explore Tags" ]));
                    wpcomReader.loadFrame().then(function() {
                        wpcomReader.renderPage({
                            page: "explore_topics"
                        });
                        statUtils.recordPageView("/tags", "Reader > Tag Cloud");
                    });
                    wpcomNewdashActions.scrollToTop();
                },
                after: function() {
                    wpcomReader.unload();
                }
            },
            "/tag/:slug/": {
                on: function(slug) {
                    slug = decodeURIComponent(slug);
                    wpcomReader.loadFrame().then(function() {
                        wpcomReader.renderPage({
                            page: "topic",
                            slug: slug
                        });
                    });
                },
                after: function() {
                    wpcomReader.unload();
                }
            },
            "/plans/": {
                on: function() {
                    statUtils.bumpStat("newdash_visits", "plans");
                    var self = this, route = this.getRoute(), query = "";
                    if (route[1]) {
                        query = "?blog=" + route[1];
                        if (!wpcomNewdash.isBlogOwner(route)) {
                            window.location.href = "//wordpress.com/sites";
                            return;
                        }
                    }
                    if ("thank-you" === route[2]) {
                        query += "&message=" + route[2];
                        wpcomReader.bindDismissNoticeEvent();
                    }
                    wpcomNewdash.hideEmailVerificationNotice();
                    wpcomNewdash.setTitle(newdashI18n.get([ "page_titles", "Upgrade" ]));
                    wpcomNewdash.loadTemplate({
                        template: "upgrade/plans.php",
                        query: query
                    }).done(function() {
                        require([ "storeSidebar" ], function(storeSidebar) {
                            storeSidebar.select(self.getRoute());
                        });
                    });
                },
                after: function() {
                    wpcomNewdash.showEmailVerificationNotice();
                },
                "/:blog/": {
                    on: function() {},
                    "/thank-you/": function() {}
                }
            },
            "/domains/": {
                on: function() {
                    var section = this.getRoute(1);
                    wpcomNewdash.hideEmailVerificationNotice();
                    if (_.isUndefined(section) || "" === section) {
                        var self = this;
                        statUtils.bumpStat("newdash_visits", "domains");
                        wpcomNewdash.recordEvent("newdash_domains_load");
                        wpcomNewdash.setTitle(newdashI18n.get([ "page_titles", "Domains" ]));
                        wpcomNewdash.loadTemplate({
                            template: "domains/domains.php"
                        }).done(function() {
                            require([ "domains", "storeSidebar" ], function(wpcomDomains, storeSidebar) {
                                wpcomDomains.init();
                                storeSidebar.select(self.getRoute());
                            });
                        });
                    }
                },
                after: function() {
                    wpcomNewdash.showEmailVerificationNotice();
                    require([ "domains" ], function(wpcomDomains) {
                        wpcomDomains.unload();
                    });
                },
                "/map/": {
                    on: function() {
                        var section = this.getRoute(2);
                        wpcomNewdash.setTitle(newdashI18n.get([ "page_titles", "Domain Mapping" ]));
                        if (_.isUndefined(section) || "" === section) {
                            var self = this;
                            statUtils.bumpStat("newdash_visits", "domains_map");
                            wpcomNewdash.recordEvent("newdash_domains_map_load");
                            wpcomNewdash.loadTemplate({
                                template: "domains/domain-mapping.php"
                            }).done(function() {
                                require([ "domain-mapping", "storeSidebar" ], function(wpcomDomainMapping, storeSidebar) {
                                    wpcomDomainMapping.init();
                                    storeSidebar.select(self.getRoute());
                                });
                            });
                        }
                    },
                    after: function() {
                        require([ "domain-mapping" ], function(wpcomDomainMapping) {
                            wpcomDomainMapping.unload();
                        });
                    },
                    "/:domainName/": {
                        on: function(domainName) {
                            var self = this;
                            wpcomNewdash.recordEvent("newdash_domains_map_blog_selection_load");
                            statUtils.bumpStat("newdash_visits", "domains_map_select_blog");
                            wpcomNewdash.loadTemplate({
                                template: "domains/domain-mapping-blog-selection.php"
                            }).done(function() {
                                require([ "domain-mapping-blog-selection", "storeSidebar" ], function(wpcomDomainMappingBlogSelection, storeSidebar) {
                                    wpcomDomainMappingBlogSelection.init({
                                        domainName: domainName
                                    });
                                    storeSidebar.select(self.getRoute());
                                });
                            });
                        },
                        after: function() {
                            require([ "domain-mapping-blog-selection" ], function(wpcomDomainMappingBlogSelection) {
                                wpcomDomainMappingBlogSelection.unload();
                            });
                        }
                    }
                },
                "/register/": {
                    on: function() {
                        var section = this.getRoute(2);
                        wpcomNewdash.setTitle(newdashI18n.get([ "page_titles", "Domain Registration" ]));
                        if (_.isUndefined(section) || "" === section) {
                            var self = this;
                            statUtils.bumpStat("newdash_visits", "domains_register");
                            wpcomNewdash.recordEvent("newdash_domains_register_load");
                            wpcomNewdash.loadTemplate({
                                template: "domains/domain-registration.php"
                            }).done(function() {
                                require([ "domain-registration", "storeSidebar" ], function(wpcomDomainRegistration, storeSidebar) {
                                    wpcomDomainRegistration.init();
                                    storeSidebar.select(self.getRoute());
                                });
                            });
                        }
                    },
                    after: function() {
                        require([ "domain-registration" ], function(wpcomDomainRegistration) {
                            wpcomDomainRegistration.unload();
                        });
                    },
                    "/:domainName/": {
                        on: function(domainName) {
                            var section = this.getRoute(3);
                            if (_.isUndefined(section) || "" === section) {
                                var self = this;
                                wpcomNewdash.recordEvent("newdash_domains_register_blog_selection_load");
                                statUtils.bumpStat("newdash_visits", "domains_register_select_blog");
                                wpcomNewdash.loadTemplate({
                                    template: "domains/domain-registration-blog-selection.php"
                                }).done(function() {
                                    require([ "domain-registration-blog-selection", "storeSidebar" ], function(wpcomDomainRegistrationBlogSelection, storeSidebar) {
                                        wpcomDomainRegistrationBlogSelection.init({
                                            domainName: domainName
                                        });
                                        storeSidebar.select(self.getRoute());
                                    });
                                });
                            }
                        },
                        after: function() {
                            require([ "domain-registration-blog-selection" ], function(wpcomDomainRegistrationBlogSelection) {
                                wpcomDomainRegistrationBlogSelection.unload();
                            });
                        },
                        "/:blogId/": {
                            on: function(domainName, blogId) {
                                var self = this;
                                wpcomNewdash.recordEvent("newdash_domains_register_google_apps_selection_load	");
                                statUtils.bumpStat("newdash_visits", "domains_register_select_google_apps");
                                wpcomNewdash.loadTemplate({
                                    template: "domains/domain-registration-google-apps-selection.php"
                                }).done(function() {
                                    require([ "domain-registration-google-apps-selection", "storeSidebar" ], function(wpcomDomainRegistrationGoogleAppsSelection, storeSidebar) {
                                        wpcomDomainRegistrationGoogleAppsSelection.init({
                                            domainName: domainName,
                                            blogId: blogId
                                        });
                                        storeSidebar.select(self.getRoute());
                                    });
                                });
                            },
                            after: function() {
                                require([ "domain-registration-google-apps-selection" ], function(wpcomDomainRegistrationGoogleAppsSelection) {
                                    wpcomDomainRegistrationGoogleAppsSelection.unload();
                                });
                            }
                        }
                    }
                }
            },
            "/my-domains/": {
                on: function() {
                    statUtils.bumpStat("newdash_visits", "my_domains");
                    var self = this;
                    require([ "domain-management", "storeSidebar" ], function(wpcomDomainManagement, storeSidebar) {
                        if (wpcomDomainManagement.isActive()) {
                            wpcomDomainManagement.init(self);
                        } else {
                            wpcomNewdash.setTitle(newdashI18n.get([ "page_titles", "My Domains" ]));
                            var route = self.getRoute();
                            var query = "";
                            if (route[2]) {
                                query = "notice=" + route[2];
                            }
                            wpcomNewdash.loadTemplate({
                                template: "domains/my-domains.php",
                                query: query
                            }).done(function() {
                                wpcomDomainManagement.init(self);
                                storeSidebar.select(route);
                            });
                        }
                    });
                },
                "/:blog_id/": {
                    on: function() {},
                    "/:notice/": {
                        on: function() {
                            wpcomNewdash.hideEmailVerificationNotice();
                            wpcomReader.bindDismissNoticeEvent();
                        },
                        after: function() {
                            wpcomNewdash.showEmailVerificationNotice();
                        }
                    }
                },
                after: function() {
                    require([ "domain-management" ], function(wpcomDomainManagement) {
                        wpcomDomainManagement.unload();
                    });
                }
            },
            "/domain/:domain/": {
                on: function(domain) {
                    var self = this;
                    wpcomNewdash.setTitle(newdashI18n.get([ "page_titles", "My Domains" ]));
                    wpcomNewdash.loadTemplate({
                        template: "domains/domain-management-edit-domain.php"
                    }).done(function() {
                        require([ "DomainManagementEditDomain", "storeSidebar" ], function(wpcomDomainManagementEditDomain, storeSidebar) {
                            wpcomDomainManagementEditDomain.init({
                                domain: domain
                            });
                            storeSidebar.select(self.getRoute());
                        });
                    });
                }
            },
            "/my-upgrades/": {
                on: function() {
                    statUtils.bumpStat("newdash_visits", "my_upgrades");
                    var self = this;
                    wpcomNewdash.setTitle(newdashI18n.get([ "page_titles", "My Upgrades" ]));
                    wpcomNewdash.loadTemplate({
                        template: "my-upgrades.php"
                    }).done(function() {
                        require([ "myUpgrades", "storeSidebar" ], function(myUpgrades, storeSidebar) {
                            myUpgrades.init();
                            storeSidebar.select(self.getRoute());
                        });
                    });
                },
                after: function() {
                    require([ "myUpgrades" ], function(myUpgrades) {
                        myUpgrades.unload();
                    });
                }
            },
            "/welcome/": {
                "/step/": {
                    on: function() {
                        var self = this, timeout = null;
                        $("ul#homenav, #wpadminbar").hide();
                        $("body").addClass("noadminbar");
                        $(window).off("resize.nux").on("resize.nux", function() {
                            clearTimeout(self.timeout);
                            self.timeout = setTimeout(function() {
                                wpcomNewdash.maximizeViewportHeight();
                            }, 10);
                        });
                        wpcomReader.bindDismissNoticeEvent();
                    },
                    "/first/": {
                        on: function() {
                            var route = this.getRoute(), steps;
                            if (!route[3]) {
                                steps = wpcomNewdashNux.getSteps();
                                this.setRoute("/welcome/step/" + steps[0] + "/");
                            }
                        },
                        "/purchased/": {
                            on: function() {
                                wpcomNewdashNux.showPurchasedNotice = true;
                                var route = this.getRoute(), steps;
                                if (!route[4]) {
                                    steps = wpcomNewdashNux.getSteps();
                                    this.setRoute("/welcome/step/" + steps[0] + "/");
                                }
                            },
                            "/:bundle/": function(bundle) {
                                wpcomNewdashNux.outputGATrackingCode = bundle;
                                var route = this.getRoute(), steps = wpcomNewdashNux.getSteps();
                                this.setRoute("/welcome/step/" + steps[0] + "/");
                            }
                        }
                    },
                    "/next/": function() {
                        if ($(".nux-current").length < 1) {
                            return this.setRoute("/welcome/step/first/");
                        }
                        wpcomNewdashNux.changeStep("next");
                    },
                    "/prev/": function() {
                        if ($(".nux-current").length < 1) {
                            return this.setRoute("/welcome/step/first/");
                        }
                        wpcomNewdashNux.changeStep("prev");
                    },
                    "/name/": function() {
                        wpcomNewdashNux.renderStep({
                            step: "name"
                        });
                    },
                    "/theme/": function() {
                        if ($("body").hasClass("no-theme-picker")) {
                            this.setRoute("/welcome/step/customize/");
                        } else {
                            wpcomNewdashNux.renderStep({
                                step: "theme"
                            });
                        }
                    },
                    "/customize/": {
                        on: function() {
                            var route = this.getRoute();
                            if (!route[3]) {
                                wpcomNewdashNux.renderStep({
                                    step: "customize"
                                });
                            }
                        },
                        after: function() {
                            if (wpcomNewdashFeatures.newdash_c1) {
                                $(".load-customizer").off(".nux");
                            }
                        },
                        "/:action/": function(action) {
                            wpcomNewdashNux.closeCustomizer(action);
                        }
                    },
                    "/purchase/": function() {
                        var themeParam = window.location.href.match(/[?&]theme\=([^&]+)/), steps = wpcomNewdashNux.getSteps();
                        if (wpcomNewdashNux.themePurchaseUrl) {
                            wpcomNewdashNux.renderStep({
                                step: "purchase"
                            });
                        } else if (themeParam && themeParam.length >= 2) {
                            themeParam = decodeURIComponent(themeParam[1]);
                            wpcomNewdashNux.themePurchaseUrl = wpcomNewdashNux.sanitizeUrl(themeParam);
                            wpcomNewdashNux.addStep({
                                name: "purchase",
                                direction: "after",
                                relative: "customize"
                            });
                            wpcomNewdashNux.renderStep({
                                step: "purchase",
                                callback: function() {
                                    var iframe = $("#nux-step-purchase").find("#purchase-frame"), url = wpcomNewdashNux.themePurchaseUrl + "&frame-nonce=" + encodeURIComponent(iframe.data("nonce"));
                                    iframe.addClass("active").attr("src", url);
                                }
                            });
                        } else {
                            this.setRoute("/welcome/step/next/");
                        }
                    },
                    "/share/": function() {
                        wpcomNewdashNux.renderStep({
                            step: "share"
                        });
                    },
                    "/post/": {
                        on: function() {
                            wpcomNewdashNux.renderStep({
                                step: "post"
                            });
                        },
                        after: function() {
                            wpcom.doAction("leaving_newdash_editor_page");
                        }
                    },
                    "/read/": function() {
                        wpcomNewdashNux.renderStep({
                            step: "read"
                        });
                    },
                    "/my-blog/": function() {
                        $(".notice").attr("style", "");
                        window.location.href = "//wordpress.com/sites";
                    },
                    "/after/:step": function(step) {
                        var steps = wpcomNewdashNux.getSteps(), position = $.inArray(step, steps);
                        if (-1 !== position) {
                            this.setRoute("/welcome/step/" + steps[position + 1]);
                            return;
                        }
                        this.setRoute("/");
                    },
                    "/before/:step": function(step) {
                        var steps = wpcomNewdashNux.getSteps(), position = $.inArray(step, steps);
                        if (-1 !== position) {
                            this.setRoute("/welcome/step/" + steps[position - 1]);
                            return;
                        }
                        this.setRoute("/");
                    }
                }
            },
            "/read/": {
                on: function() {
                    wpcomReader.loadFrame();
                    var route = this.getRoute();
                    if (!route[1]) {
                        this.setRoute("/");
                    }
                },
                "/following/": {
                    on: function() {
                        this.redirectTo("/");
                    }
                },
                "/import/": function() {
                    this.redirectTo("/following/import/");
                },
                "/fresh/": {
                    on: function() {
                        this.redirectTo("/fresh/");
                    }
                },
                "/local/(.+)?": {
                    after: function() {
                        var route = this.getRoute();
                        if (!route[1] || "local" !== route[1]) {
                            wpcomReader.unload();
                            delete wpcomNewdash.routeModuleReferences.local;
                        }
                    },
                    on: function(locationData) {
                        var wpcomLocal = wpcomNewdash.routeModuleReferences.local, latLon, locationModelData, googlePlacesReference;
                        locationData = locationData || "";
                        locationData = locationData.split("/");
                        latLon = locationData[0] || "";
                        googlePlacesReference = locationData[1] || "";
                        locationModelData = {
                            lat_lon: latLon,
                            google_places_reference: googlePlacesReference
                        };
                        wpcomNewdash.setTitle(newdashI18n.get([ "page_titles", "Local Posts" ]));
                        if (wpcomLocal && wpcomLocal.currentLocationModel) {
                            wpcomLocal.currentLocationModel.set(locationModelData);
                        } else {
                            wpcomReader.renderPage({
                                page: "local",
                                location: locationModelData
                            });
                        }
                    }
                },
                "/find-friends/": function() {
                    this.redirectTo("/find-friends/");
                },
                "/recommendations/": {
                    on: function() {
                        if (!this.getRoute(2)) {
                            this.redirectTo("/recommendations/");
                        }
                    },
                    "/:topic_slug/": {
                        on: function(topicSlug) {
                            this.redirectTo("/recommendations/" + topicSlug + "/");
                        }
                    }
                },
                "/likes/": function() {
                    this.redirectTo("/activities/likes/");
                },
                "/a8c/": {
                    on: function() {
                        wpcomNewdash.setTitle("Automattic");
                        wpcomReader.renderPage({
                            page: "a8c"
                        });
                    },
                    after: function() {
                        wpcomReader.unload();
                    }
                },
                "/topics/": function() {
                    this.redirectTo("/tags/");
                },
                "/topic/": {
                    "/:slug/": {
                        on: function(slug) {
                            this.redirectTo("/tag/" + slug + "/");
                        }
                    }
                },
                "/fp/": {
                    "/:slug/": {
                        on: function(slug) {
                            wpcomReader.renderPage({
                                page: "fp",
                                slug: slug
                            });
                        },
                        after: function() {
                            wpcomReader.unload();
                        }
                    }
                },
                "/edit/": function() {
                    this.redirectTo("/following/edit/");
                },
                "/blog/": {
                    "/id/": {
                        "/:blog_id/": {
                            on: function(blogId) {
                                wpcomReader.renderPage({
                                    page: "blog",
                                    blogId: blogId
                                });
                                statUtils.recordPageView("/read/:blogid", "Reader > Single Blog Stream");
                            },
                            after: function() {
                                wpcomReader.unload();
                            }
                        }
                    },
                    "/feed/": {
                        "/:feed_id/": {
                            on: function(feedId) {
                                wpcomReader.renderPage({
                                    page: "feed",
                                    feedId: feedId
                                });
                                statUtils.recordPageView("/read/:blogid", "Reader > Single Blog Stream");
                            },
                            after: function() {
                                wpcomReader.unload();
                            }
                        }
                    }
                },
                "/post/": {
                    "/id/": {
                        "/:blog_id/:post_id/": {
                            on: function(blogId, postId) {
                                wpcomReader.renderPage({
                                    page: "post",
                                    blogId: blogId,
                                    postId: postId
                                });
                                statUtils.recordPageView("/read/:blogid/:postid", "Reader > Single Post View");
                            },
                            after: function() {
                                if ("undefined" !== typeof wpcomPost.fullPostView) {
                                    wpcomPost.fullPostView.closePost();
                                    delete wpcomPost.fullPostView;
                                }
                            }
                        }
                    },
                    "/feed/": {
                        "/:feed_id/:feed_item_id/": {
                            on: function(feedId, feedItemId) {
                                wpcomReader.renderPage({
                                    page: "post",
                                    feedId: feedId,
                                    feedItemId: feedItemId
                                });
                                statUtils.recordPageView("/read/:blogid/:postid", "Reader > Single Post View");
                            },
                            after: function() {
                                if ("undefined" !== typeof wpcomPost.fullPostView) {
                                    wpcomPost.fullPostView.closePost();
                                    delete wpcomPost.fullPostView;
                                }
                            }
                        }
                    }
                },
                "/list/": {
                    "/:list_author/:list_slug/": {
                        on: function(list_author, list_slug) {
                            if ("edit" == this.getRoute()[4]) {
                                return;
                            }
                            wpcomReader.renderPage({
                                page: "list",
                                listAuthor: list_author,
                                listSlug: list_slug
                            });
                            wpcomReader.selectMenuItem("list-" + list_author + "-" + list_slug);
                        },
                        after: function() {
                            wpcomReader.unload();
                        },
                        "/edit/": {
                            on: function(list_author, list_slug) {
                                wpcomReader.renderPage({
                                    page: "list_edit",
                                    listAuthor: list_author,
                                    listSlug: list_slug
                                });
                                statUtils.recordPageView("/read/list/edit", "Reader > Edit List");
                                wpcomReader.selectMenuItem("list-" + list_author + "-" + list_slug);
                            },
                            after: function() {
                                wpcomReader.unload();
                            }
                        }
                    }
                }
            },
            "/my-notifications/": function() {
                this.setRoute("/notifications/");
            },
            "/my-settings/": function() {
                this.setRoute("/settings/");
            },
            "/topics/": function() {
                this.setRoute("/read/topics/");
            },
            "/following/": function() {
                var route = this.getRoute();
                if (!route[1]) {
                    this.redirectTo("/");
                }
            },
            "/subs-delivery/": function() {
                this.setRoute("/settings/notifications/");
            },
            "/read/subsettings/": function() {
                this.setRoute("/settings/notifications/");
            },
            "/new-post/": function() {
                window.location.href = "/post/";
            },
            "/my-blogs/": function() {
                window.location.href = "//wordpress.com/sites";
            }
        },
        recordEvent: function(event) {
            if ("undefined" !== typeof wpcom.kissmetrics) {
                wpcom.kissmetrics.recordEvent(event);
            }
        },
        setProperty: function(name, value) {
            if ("undefined" !== typeof wpcom.kissmetrics) {
                var kmProperty = {};
                kmProperty[name] = value;
                wpcom.kissmetrics.setProperty(kmProperty);
            }
        },
        getPathOrHash: function(path) {
            if (typeof path === "undefined") {
                path = wpcomNewdash.router.getRoute().join("/");
            }
            if (true === wpcomNewdash.router.history) {
                return path;
            } else {
                return "#" + path;
            }
        },
        getBasePaths: function() {
            paths = _.filter(_.keys(wpcomNewdash.router.routes), function(path) {
                if (/^[a-z0-9-]+$/.test(path) && path !== "on" && path !== "after") {
                    return true;
                }
                return false;
            });
            return paths;
        },
        highlightMenu: function(menu, loader) {
            var header = $("header"), $content = $("#tab-content"), initialPage = $content.length && $content.data("initial-page") ? true : false;
            $("li", header).removeClass("active");
            if (menu.length) {
                $("li." + menu).addClass("active");
            }
            if (initialPage) {
                return;
            }
            if (typeof loader == "undefined" || false !== loader) {
                this.showLoader();
            }
        },
        getTitle: function() {
            return wpcomNewdash.currentPageTitle;
        },
        setTitle: function(title) {
            this.currentPageTitle = wpcomReaderConstants.initialPageTitle;
            if (title) {
                this.currentPageTitle = title + " — " + this.currentPageTitle;
            }
            document.title = $("<div/>").html(this.currentPageTitle).text();
        },
        loadTemplate: function(args) {
            var dfd = $.Deferred(), $targetEl, loadedHtml, cacheableHtml, cachedHtml, noCache, ajaxUrl = urlUtils.getAjaxUrl(), queryId = Math.random(), defaults = {
                template: false,
                tab: false,
                target: "div#tab-content",
                doInsert: true,
                query: "",
                tcpage: "",
                doAbort: true,
                reloadOnFailure: true,
                skipPageLoadTracking: false
            }, noCacheTemplates = [ "post.php", "fresh.php", "my-stats.php", "notifications.php", "reader/edit-following.php", "reader/edit-list.php", "trophy-case.php", "help.php", "settings.php", "nux/nux-frame.php", "nux/follow.php", "nux/connect.php", "nux/name.php", "nux/theme.php", "nux/customize.php", "nux/purchase.php", "nux/share.php", "nux/post.php", "nux/read.php", "upgrade/upgrade.php", "upgrade/plans.php", "themes/change-theme.php", "manage/posts.php", "me/account.php", "me/trophies.php" ];
            args = typeof args !== "undefined" ? args : {};
            args = _.defaults(args, defaults);
            noCache = -1 !== $.inArray(args.template, noCacheTemplates);
            $targetEl = $(args.target);
            wpcomNewdash.lastQueryId = queryId;
            if (document.location.search) {
                args.query = urlUtils.mergeQueryParams(args.query, document.location.search);
            }
            if (args.doAbort && wpcomNewdash.request && typeof wpcomNewdash.request.abort === "function") {
                wpcomNewdash.request.success = {};
                wpcomNewdash.request.complete = {};
                wpcomNewdash.request.abort();
            }
            if ($targetEl.length && args.template === $targetEl.data("initial-page")) {
                $targetEl.removeData("initial-page");
                $targetEl.removeAttr("data-initial-page");
                loadedHtml = $targetEl.html();
                dfd.resolve(loadedHtml);
                if (args.template && window.pageLoadStart && !args.skipPageLoadTracking) {
                    wpcomNewdash.pageLoadProperties = {
                        Loaded_Page: wpcomNewdash.initialRoute(),
                        Template_Cached: args.cached,
                        Data_Cached: "N/A"
                    };
                    if (args.template !== "read.php") {
                        wpcomNewdash.trackPageLoad();
                    }
                }
                $("#initial-loader").fadeOut(function() {
                    this.remove();
                });
                if (!noCache) {
                    cacheableHtml = $(loadedHtml).clone().wrap("<p>").parent();
                    cacheableHtml.find("[data-no-cache=true]").remove();
                    wpcomLocalStorage.set("wpcom_template_" + args.template + args.query + "_content", cacheableHtml.html());
                }
                if (args.target === "div#tab-content") {
                    $(document).trigger("wpcom_tab_loaded");
                }
            } else {
                cachedHtml = wpcomLocalStorage.get("wpcom_template_" + args.template + args.query + "_content");
                if (null !== cachedHtml && !noCache) {
                    if (args.doInsert) {
                        wpcomNewdash.insertTemplate({
                            content: cachedHtml,
                            target: args.target,
                            template: args.template,
                            cached: true,
                            skipPageLoadTracking: args.skipPageLoadTracking
                        }).done(function(html) {
                            dfd.resolve(html);
                        }).fail(function() {
                            dfd.reject();
                        });
                        return dfd.promise();
                    }
                }
                if (args.query) {
                    ajaxUrl = urlUtils.urlAddParams(urlUtils.getAjaxUrl(), args.query);
                }
                wpcomNewdash.request = $.ajax({
                    url: ajaxUrl,
                    type: "GET",
                    data: {
                        action: "wpcom_load_template",
                        template: args.template,
                        tcpg: args.tcpage
                    },
                    cache: false
                });
                wpcomNewdash.request.done(function(html) {
                    if ("undefined" === typeof html || "0" === html || "-1" === html || _.isObject(html)) {
                        if (_.isObject(html) && html.loggedOut && args.reloadOnFailure) {
                            window.location = "/wp-login.php?redirect_to=" + encodeURIComponent(window.location.href);
                        }
                        dfd.reject();
                        return;
                    }
                    if (!noCache) {
                        wpcomLocalStorage.set("wpcom_template_" + args.template + args.query + "_content", html);
                    }
                    if ("my-stats.php" === args.template && !wpcomNewdash.isLastQuery(queryId)) {
                        dfd.resolve(html);
                        return;
                    }
                    if ((null === cachedHtml || noCache) && args.doInsert) {
                        wpcomNewdash.insertTemplate({
                            content: html,
                            target: args.target,
                            template: args.template,
                            cached: false
                        }).done(function(html) {
                            dfd.resolve(html);
                        }).fail(function() {
                            dfd.reject();
                        });
                    } else {
                        dfd.resolve(cachedHtml);
                    }
                });
                wpcomNewdash.request.fail(function() {
                    dfd.reject();
                });
            }
            return dfd.promise();
        },
        insertTemplate: function(args) {
            var dfd = $.Deferred(), defaults = {
                content: false,
                target: "div#tab-content",
                template: false,
                cached: false,
                skipPageLoadTracking: false
            };
            args = typeof args !== "undefined" ? args : {};
            args = _.defaults(args, defaults);
            if ($(args.target).length < 1) {
                dfd.reject("Error inserting template. Target was not found.");
                return dfd.promise();
            }
            $(args.target).html(args.content).fadeIn(0, function() {
                var contentIframe = this.querySelector(".content-iframe");
                dfd.resolve(this);
                if (args.template && window.pageLoadStart && !args.skipPageLoadTracking) {
                    wpcomNewdash.pageLoadProperties = {
                        Loaded_Page: wpcomNewdash.initialRoute(),
                        Template_Cached: args.cached,
                        Data_Cached: "N/A"
                    };
                    if (args.template === "read.php") {
                        return;
                    }
                    if (contentIframe) {
                        $(contentIframe).on("load.iframeload", function() {
                            $(this).off("load.iframeload");
                            wpcomNewdash.trackPageLoad();
                        });
                        return;
                    }
                    wpcomNewdash.trackPageLoad();
                }
            }).removeClass("loading").addClass("in");
            if (args.target === "div#tab-content") {
                $(document).trigger("wpcom_tab_loaded");
            }
            return dfd.promise();
        },
        trackPageLoad: function(additionalProperties) {
            additionalProperties = additionalProperties || {};
            if (this.pageLoadProperties) {
                var loadTime = new Date().getTime() - window.pageLoadStart;
                this.pageLoadProperties = _.extend(this.pageLoadProperties, additionalProperties);
                this.pageLoadProperties["Load_Time"] = loadTime;
                delete this.pageLoadProperties;
                window.pageLoadStart = undefined;
            }
        },
        isTabLoaded: function(tab) {
            if ($("li." + tab).hasClass("current") || $("ul#homenav").hasClass("current") || $("header li." + tab).hasClass("active")) {
                return true;
            }
            return false;
        },
        isLastQuery: function(queryId) {
            return queryId === this.lastQueryId;
        },
        isLoggedInCheck: function() {
            var _self = this;
            clearInterval(this.isLoggedInCheckInterval);
            this.isLoggedInCheckInterval = setInterval(function() {
                $.when(_self.isLoggedIn()).done(function(r) {
                    $("#logged-out").remove();
                    if ("1" == r) return false;
                    $("body").append('<div id="logged-out">' + r + "</div>");
                });
            }, 1e4);
        },
        isLoggedIn: function() {
            return $.get(urlUtils.getAjaxUrl(), {
                action: "wpcom_newdash_is_logged_in"
            });
        },
        titleize: function(str) {
            str = str.replace("-", " ");
            return (str + "").replace(/^([a-z])|\s+([a-z])/g, function($1) {
                return $1.toUpperCase();
            });
        },
        addSpinner: function(el, type) {
            if (0 === el.width()) {
                setTimeout(function() {
                    wpcomNewdash.addSpinner(el, type);
                }, 50);
            } else {}
        },
        showLoader: function() {
            var $content = $("#tab-content");
            if (!$content.children("#first-loader").length) $("#tab-content").html('<div id="first-loader"></div>');
            $("#first-loader").height($(window).height() - $("header").height()).show();
        },
        addLoader: function() {
            var $content = $("#tab-content");
            $("#tab-content").append('<div class="loader"></div>');
            $(".loader").height($(window).height() - $("header").height()).show();
        },
        removeLoader: function() {
            $(".loader").remove();
        },
        hideEmailVerificationNotice: function() {
            $("#email-verify").hide();
        },
        showEmailVerificationNotice: function() {
            $("#email-verify").show();
        },
        maximizeViewportHeight: function() {
            var offset = $("#tab-content").offset().top;
            offset += $("#wpadminbar").height();
            var h = $(window).height() - offset;
            $("#tab-content").find(".tab").css({
                "min-height": h + "px"
            });
        },
        abortJqxhr: function(xhrObj) {
            if (!xhrObj) xhrObj = jqxhr;
            if (!xhrObj || typeof xhrObj.abort != "function") return false;
            xhrObj.success = {};
            xhrObj.complete = {};
            xhrObj.abort();
            xhrObj = false;
        },
        unload: function() {
            $(document).off("click.wpcom_newdash", "#homenav li a, a.load-page");
        },
        notesMenu: function() {
            $.ajax({
                url: urlUtils.getAjaxUrl(),
                data: {
                    action: "newdash_notes_preload"
                },
                dataType: "json"
            }).done(function(r) {
                if (r.wpn_last_marked_seen_preloaded) {
                    w.wpn_last_marked_seen_preloaded = r.wpn_last_marked_seen_preloaded;
                    w.wpnd_notes_preloaded = JSON.parse(r.wpnd_notes_preloaded);
                }
            });
            var icon = $("#wp-admin-bar-notes"), menu, preventDefault;
            if (wpcomNewdashFeatures.notifications2) {
                menu = $("#wpnt-notes-panel2");
            } else {
                menu = $("#wpnt-notes-panel");
            }
            menu.addClass("newdash");
            $("#wp-admin-bar-notes").append(menu);
            preventDefault = function(e) {
                if (e) e.preventDefault();
                return false;
            };
            if (wpcomNewdashFeatures.notifications2) {
                menu.on("mouseenter", function() {
                    document.body.addEventListener("mousewheel", preventDefault);
                });
                menu.on("mouseleave", function() {
                    document.body.removeEventListener("mousewheel", preventDefault);
                });
            }
            icon.on("click.wpcom_newdash", function(e) {
                e.preventDefault();
                e.stopPropagation();
                if (!wpcomNewdashFeatures.notifications2 && window.innerWidth < 660) {
                    window.location.href = "//wordpress.com/notifications/";
                    return;
                }
                wpcom.events.trigger("notes:togglePanel");
                $(document).on("click.wpcom_newdash", function(e) {
                    if (!$(e.target).hasClass("xcurrent") && !$(e.target).parents().hasClass("xcurrent")) {
                        menu.hide();
                        $(document).off("click.wpcom_newdash");
                    }
                });
            });
        },
        showStatsTab: function(query, t, isSubPage) {
            var target = t || undefined;
            require([ "myStats" ], function(wpcomMyStats) {
                if (!isSubPage) {
                    $(document).on("wpcom_tab_loaded.stats", function() {
                        $(document).off("wpcom_tab_loaded.stats");
                        $(window).trigger("wpcomStatsActivate", [ query, wpcomNewdash ]);
                    });
                }
                wpcomNewdash.loadTemplate({
                    template: "my-stats.php",
                    query: query,
                    target: target
                }).done(function() {
                    if (isSubPage) {
                        $(window).trigger("wpcomStatsActivate", [ query, wpcomNewdash ]);
                    }
                    wpcomMyStats.init();
                    wpcomLocalStorage.remove("wpcom_template_my-blogs/my-blog.php_content");
                });
                if (query && wpcom && wpcom.masterbar) {
                    var blogid;
                    if (query.match(/blog=[0-9]+/)) {
                        blogid = Math.round(query.replace(/(.*blog=)([0-9]+)(.*)/, "$2"));
                    } else if (Math.round(query) == query) {
                        blogid = query;
                    }
                    wpcom.masterbar.setSite({
                        id: blogid
                    });
                }
            });
        },
        initStats: function(options) {
            var target, subpage, query, router;
            options = options || {};
            target = options.target || undefined, subpage = options.isSubPage || false;
            router = options.router || wpcomNewdash.router;
            if (router.history) {
                query = w.location.pathname + w.location.search;
            } else {
                query = w.location.hash;
            }
            if (-1 == query.indexOf("?")) {
                query = query.match(/\d+/) ? "blog=" + query.match(/\d+/)[0] : "";
            } else {
                query = query.replace(/^[^?]*\?/, "");
            }
            if (!wpcomNewdash.statsJsLoaded) {
                var statsJs = [ "/wp-admin/js/postbox.js", "/wp-includes/js/jquery/ui/jquery.ui.sortable.min.js", "/wp-content/admin-plugins/blog-stats/blog-stats-async.js" ];
                var statsFirstLoad = function() {
                    if (++loadedScripts >= statsJs.length) {
                        wpcomNewdash.statsJsLoaded = true;
                        wpcomNewdash.showStatsTab(query, target, subpage);
                    }
                };
                var staticizeUrl = function(url) {
                    var prefix = "https:" == document.location.protocol ? "https://s" : "http://s";
                    return prefix + Math.floor(Math.random() * 3) + ".wp.com" + url;
                };
                var buster = "";
                if ("undefined" != typeof newdashI18n && newdashI18n.get([ "stats", "cache_buster" ])) {
                    buster = "?" + newdashI18n.get([ "stats", "cache_buster" ]);
                }
                var loadedScripts = 0;
                for (var i = 0, l = statsJs.length; i < l; i++) {
                    $.getScript(staticizeUrl(statsJs[i]) + buster, statsFirstLoad);
                }
            } else {
                wpcomNewdash.showStatsTab(query, target, subpage);
            }
        },
        unixTimestamp: function(date) {
            return Math.round(date.getTime() / 1e3);
        },
        readCookie: function(c) {
            var i, chr, num, chunk, pairs, pair, cookieData, nameEQ = c + "=", ca = document.cookie.split(";");
            for (i = 0, l = ca.length; i < l; i++) {
                chr = ca[i];
                while (chr.charAt(0) === " ") {
                    chr = chr.substring(1, chr.length);
                }
                if (chr.indexOf(nameEQ) === 0) {
                    chunk = chr.substring(nameEQ.length, chr.length);
                    pairs = chunk.split("&");
                    cookieData = {};
                    for (num = pairs.length - 1; num >= 0; num--) {
                        pair = pairs[num].split("=");
                        cookieData[pair[0]] = decodeURIComponent(pair[1]);
                    }
                    return cookieData;
                }
            }
            return null;
        },
        writeCookie: function(name, value, days) {
            var expires, domain;
            if (days) {
                var date = new Date();
                date.setTime(date.getTime() + 36e5 * (24 * days));
                expires = "; expires=" + date.toGMTString();
            } else {
                expires = "";
            }
            domain = "; domain=.wordpress.com";
            document.cookie = name + "=" + value + expires + "; path=/" + domain;
        },
        clearCookie: function(service) {
            wpcomNewdash.writeCookie(service, "", -10);
        },
        checkStorage: function() {
            var lastCleared = wpcomLocalStorage.get("ls_last_cleared"), now = new Date().getTime();
            if (!lastCleared) {
                wpcomLocalStorage.clear();
                return wpcomLocalStorage.set("ls_last_cleared", now);
            }
            var timeSinceClear = now - Number(lastCleared), threeDays = 36e5 * (24 * 3);
            if (timeSinceClear > threeDays) {
                wpcomLocalStorage.clear();
                return wpcomLocalStorage.set("ls_last_cleared", now);
            }
        }
    };
    var wpcomNewdashActions = {
        tosTimeout: false,
        blockBlogCompleted: [],
        hideBlogCompleted: [],
        init: function() {
            $("div#tab-content").on("click.wpcomReader", "a.blog.follow", function(e) {
                e.preventDefault();
                statUtils.recordEvent("Reader", "Clicked Follow Blog");
                var data = wpcomNewdashActions.getFollowData($(this));
                wpcomNewdashActions.followBlog(data.blog_id, data.nonce);
                $("a.blog.follow").trigger("followed.wpcomReader", [ data.blog_id ]);
                wpcomLocalStorage.clear();
            });
            $("div#tab-content").on("click.wpcomReader", "a.blog.following", function(e) {
                e.preventDefault();
                statUtils.recordEvent("Reader", "Clicked Unfollow Blog");
                var data = wpcomNewdashActions.getFollowData($(this));
                wpcomNewdashActions.unfollowBlog(data.blog_id, data.nonce);
                $("a.blog.following").trigger("unfollowed.wpcomReader", [ data.blog_id ]);
                wpcomLocalStorage.clear();
            });
            $("div#tab-content").on("click.wpcomReader", "a.feed.follow", function(e) {
                e.preventDefault();
                statUtils.recordEvent("Reader", "Clicked Follow Blog");
                var btn = $(this), data = btn.attr("href").split("/"), feedId = data[5], nonce = data[6];
                btn.replaceWith(templateFactory.fetch("unfollow-feed-button", {
                    feed_id: feedId
                }));
                wpcomNewdashActions.followFeed(feedId, nonce);
                wpcomLocalStorage.clear();
            });
            $("div#tab-content").on("click.wpcomReader", "a.feed.following", function(e) {
                e.preventDefault();
                statUtils.recordEvent("Reader", "Clicked Unfollow Blog");
                var btn = $(this), data = btn.attr("href").split("/"), feedId = data[5], nonce = data[6];
                btn.replaceWith(templateFactory.fetch("follow-feed-button", {
                    feed_id: feedId
                }));
                wpcomNewdashActions.unfollowFeed(feedId, nonce);
                wpcomLocalStorage.clear();
            });
            $("div#tab-content").on("click.wpcomReader", "a.topic.follow", function(e) {
                e.preventDefault();
                statUtils.recordEvent("Reader", "Clicked Follow Topic");
                var btn = $(this), data = btn.attr("href").split("/"), slug = data[5], nonce = data[6];
                btn.replaceWith(templateFactory.fetch("unfollow-topic-button", {
                    slug: slug
                }));
                if (1 == $("div#welcome-nux").length) {
                    $("li#welcome-topic-entry-" + slug).removeClass("follow").addClass("following");
                    statUtils.bumpStat("newdash_nux_topics_follow", slug);
                }
                $.when(wpcomNewdashActions.followTopic(slug, nonce)).then(function(response) {
                    if (response.error) alert(response.error.message); else if (0 < $("ul.sidebar-topics").length) wpcomReader.addTopicToSidebar(response.result);
                });
                wpcomLocalStorage.clear();
            });
            $("div#tab-content").on("click.wpcomReader", "a.topic.following", function(e) {
                e.preventDefault();
                statUtils.recordEvent("Reader", "Clicked Unfollow Topic");
                var btn = $(this), data = btn.attr("href").split("/"), slug = data[5], nonce = data[6];
                btn.replaceWith(templateFactory.fetch("follow-topic-button", {
                    slug: slug
                }));
                if (1 == $("div#welcome-nux").length) {
                    $("li#welcome-topic-entry-" + slug).removeClass("following").addClass("follow");
                    statUtils.bumpStat("newdash_nux_topics_unfollow", slug);
                }
                $.when(wpcomNewdashActions.unfollowTopic(slug, nonce)).then(function() {
                    if (0 < $("ul.sidebar-topics").length) wpcomReader.removeTopicFromSidebar(slug);
                });
                wpcomLocalStorage.clear();
            });
            $("#menu-dash-newpost-tagged").on("click.wpcomReader", "a.new-tagged-post", function(e) {
                if ("undefined" == typeof instapost_text || "undefined" == typeof instapost_text.default_content) return;
                e.preventDefault();
                var data = instapost_text.default_content, path = wpcomNewdash.router.getRoute().join("/"), topicSlug = path.replace(/tag\/([^\/]+)(\/)?$/, "$1");
                data.tags = [ topicSlug ];
                statUtils.bumpStat("reader_actions", "new_post_in_tag");
                window.location.replace(window.location.protocol + "//" + window.location.host + "/post/?tg=" + topicSlug);
            });
            $("div#tab-content").on("mouseenter.wpcomReader", "a.report-and-hide", function(e) {
                clearTimeout(wpcomNewdashActions.tosTimeout);
                wpcomNewdashActions.displayReportAndHide($(this), e);
            });
            $("div#tab-content").on("mouseenter.wpcomReader", "div.report-and-hide-actions", function(e) {
                clearTimeout(wpcomNewdashActions.tosTimeout);
            });
            $("div#tab-content").on("mouseleave.wpcomReader", "div.report-and-hide-actions", function(e) {
                wpcomNewdashActions.hideReportAndHide($(this));
            });
            $("div#tab-content").on("mouseleave.wpcomReader", "a.report-and-hide", function(e) {
                var bubble = $(this).parents(".sub").find(".report-and-hide-actions");
                wpcomNewdashActions.hideReportAndHide(bubble);
            });
            $("div#tab-content").on("click.wpcomReader", "a.report-spam, a.report-mature, a.report-mature-and-block", function(e) {
                e.preventDefault();
                wpcomNewdashActions.reportSpamOrMature($(this));
            });
            $("div#tab-content").on("click.wpcomReader", "a.block-blog", function(e) {
                e.preventDefault();
                wpcomNewdashActions.handleBlockBlog($(this));
            });
            $("div#tab-content").on("click.wpcomReader", "a.unblock-blog", function(e) {
                e.preventDefault();
                wpcomNewdashActions.undoBlockBlog($(this));
            });
            $("div#tab-content").on("click.wpcomReader", ".publicize_checked", function(e) {
                wpcomNewdashActions.publicizeConnect($(this).attr("id").replace("_publicize_checked", ""));
            });
            $("div#tab-content").on("click.wpcomReader", ".publicize-box input[type=submit]", function(e) {
                e.preventDefault();
                wpcomNewdashActions.publicizeConnect($(this).attr("id").replace("_publicize-submit", ""));
            });
            $("header.wpcom-header").on("click.wpcomReader", function(e) {
                if ("HEADER" != e.target.nodeName) return;
                wpcomNewdashActions.scrollToTop();
            });
            $("div#tab-content").on("click.disconnect", ".disconnect-jetpack", function(e) {
                var link = $(e.target), blogId = link.data("blog-id");
                e.preventDefault();
                $.ajax({
                    url: urlUtils.getAjaxUrl(),
                    data: {
                        action: "jetpack_disconnect_logout_wporg_user",
                        blog_id: blogId
                    },
                    dataType: "json"
                }).done(function(r) {
                    wpcomLocalStorage.remove("wpcom_template_connected-blogs.php_content");
                    wpcomNewdash.loadTemplate({
                        template: "connected-blogs.php"
                    });
                });
                $(this).closest("li").hide();
                return false;
            });
            $("html:not(.touch) header.wpcom-header").find("a.wpcom-logo").on("click", wpcomNewdashActions.scrollToTop);
            if (document.location.href.indexOf("theme=") != -1) $("body").addClass("no-theme-picker");
            $("div#tab-content").on("followed.wpcomReader", "a.blog.follow", this.toggleFollowButton);
            $("div#tab-content").on("unfollowed.wpcomReader", "a.blog.following", this.toggleFollowButton);
            $("body").on("click.newdash", "a", function(event) {
                var anchor = this, basePaths, regex, $anchor = $(anchor), href = $anchor.attr("href");
                if ($anchor.closest(".post-content, .wpcom-enhanced-excerpt").length || $anchor.is(".time-since, [target]")) {
                    if (!$anchor.attr("target")) $anchor.attr("target", "_blank");
                    return;
                }
                if (event.metaKey === true) {
                    return;
                }
                if (!href) {
                    return;
                }
                if (w.location.hostname == "wordpress.com" || w.location.hostname == "en.wordpress.com") {
                    if (anchor.hostname && !/^(en\.)?wordpress.com/.test(anchor.hostname)) {
                        return;
                    }
                } else {
                    if (anchor.hostname && w.location.hostname !== anchor.hostname) {
                        return;
                    }
                }
                basePaths = wpcomNewdash.getBasePaths();
                if (typeof tinymce === "undefined") {
                    basePaths = _.difference(wpcomNewdash.getBasePaths(), [ "page", "post", "welcome" ]);
                }
                if (window.wpcomNewdashFeatures.interim_editor) {
                    basePaths = _.difference(wpcomNewdash.getBasePaths(), [ "page", "post" ]);
                }
                if (window.wpcomNewdashFeatures.calypso_sites && /^\/sites\/?/.test(anchor.pathname)) {
                    return;
                }
                regex = new RegExp("^/?(" + basePaths.join("|") + ")");
                if ((/^\/?$/.test(anchor.pathname) || regex.test(anchor.pathname)) && (anchor.protocol === ":" || anchor.protocol === w.location.protocol) && !/^#/.test(href)) {
                    event.preventDefault();
                    wpcomNewdash.router.setRoute(anchor.pathname + anchor.search);
                }
            });
        },
        publicizeConnect: function(service) {
            $("." + service + "_loading").spin("small");
            var blogId = $("#" + service + "_publicize_blog_id").val();
            var nonce = $("#" + service + "_publicize_nonce").val();
            this.request = $.get(urlUtils.getAjaxUrl(), {
                action: "wpcom_load_template",
                template: "reader/publicize-connect.php",
                service: service,
                _wpnonce: nonce,
                blog_id: blogId
            }, function(response) {
                if ("undefined" === typeof response || "0" === response || "-1" === response || _.isObject(response)) {
                    $("#" + service + "_publicize").html(newdashI18n.get([ "notices", "page load error" ]));
                } else {
                    $("#" + service + "_publicize").html(response);
                }
                $("." + service + "_loading").spin(false);
            });
        },
        followBlog: function(blogId, nonce) {
            statUtils.bumpStat("reader_actions", "followed_blog");
            var path = wpcomNewdash.router.getRoute().join("/");
            if (0 === path.search("tag/")) statUtils.bumpStat("reader_follows", "topic_page"); else if (0 === path.search("read/blog")) statUtils.bumpStat("reader_follows", "blog_page");
            jqxhr = $.ajax({
                type: "POST",
                url: urlUtils.getAjaxUrl(),
                data: {
                    action: "ab_subscribe_to_blog",
                    _wpnonce: nonce,
                    blog_id: blogId,
                    email_delivery: "never",
                    source: "newdash"
                }
            });
            return jqxhr;
        },
        unfollowBlog: function(blogId, nonce) {
            statUtils.bumpStat("reader_actions", "unfollowed_blog");
            var path = wpcomNewdash.router.getRoute().join("/");
            if (0 === path.search("read/blog")) statUtils.bumpStat("reader_unfollows", "blog_page");
            jqxhr = $.ajax({
                type: "POST",
                url: urlUtils.getAjaxUrl(),
                data: {
                    action: "ab_unsubscribe_from_blog",
                    _wpnonce: nonce,
                    blog_id: blogId,
                    email_delivery: "never",
                    source: "newdash"
                }
            });
            return jqxhr;
        },
        followFeed: function(feedId, nonce) {
            statUtils.bumpStat("reader_actions", "followed_blog");
            var path = wpcomNewdash.router.getRoute().join("/");
            if (0 === path.search("read/blog")) statUtils.bumpStat("reader_follows", "blog_page");
            jqxhr = $.ajax({
                type: "POST",
                url: urlUtils.getAjaxUrl(),
                data: {
                    action: "ab_subscribe_to_blog",
                    _wpnonce: nonce,
                    feed_id: feedId,
                    email_delivery: "never",
                    source: "newdash"
                }
            });
            return jqxhr;
        },
        unfollowFeed: function(feedId, nonce) {
            statUtils.bumpStat("reader_actions", "unfollowed_blog");
            var path = wpcomNewdash.router.getRoute().join("/");
            if (0 === path.search("read/blog")) statUtils.bumpStat("reader_unfollows", "blog_page");
            jqxhr = $.ajax({
                type: "POST",
                url: urlUtils.getAjaxUrl(),
                data: {
                    action: "ab_unsubscribe_from_blog",
                    _wpnonce: nonce,
                    feed_id: feedId,
                    email_delivery: "never",
                    source: "newdash"
                }
            });
            return jqxhr;
        },
        followTopic: function(slug, nonce) {
            statUtils.bumpStat("reader_actions", "followed_topic");
            jqxhr = $.ajax({
                type: "POST",
                url: urlUtils.getAjaxUrl(),
                data: {
                    action: "add_topic",
                    _wpnonce: nonce,
                    slug: slug
                },
                dataType: "json"
            });
            return jqxhr;
        },
        unfollowTopic: function(slug, nonce) {
            statUtils.bumpStat("reader_actions", "unfollowed_topic");
            jqxhr = $.ajax({
                type: "POST",
                url: urlUtils.getAjaxUrl(),
                data: {
                    action: "remove_topic",
                    _wpnonce: nonce,
                    slug: slug
                }
            });
            return jqxhr;
        },
        unlikeComment: function() {
            statUtils.bumpStat("reader_actions", "unliked_comment");
        },
        likeComment: function() {
            statUtils.bumpStat("reader_actions", "liked_comment");
        },
        likePost: function(blogId, postId) {
            statUtils.bumpStat("reader_actions", "liked_post");
            return $.wpcom_proxy_request({
                method: "POST",
                path: "/sites/" + blogId + "/posts/" + postId + "/likes/new",
                query: {
                    source: "reader"
                }
            });
        },
        unlikePost: function(blogId, postId) {
            statUtils.bumpStat("reader_actions", "unliked_post");
            return $.wpcom_proxy_request({
                method: "POST",
                path: "/sites/" + blogId + "/posts/" + postId + "/likes/mine/delete",
                query: {
                    source: "reader"
                }
            });
        },
        displayReportAndHide: function(icon, e) {
            var $bubble;
            icon.parents(".sub").addClass("noflow");
            $bubble = icon.parent().siblings(".report-and-hide-actions");
            e.stopPropagation();
            var offset = icon.position(), bubbleTop = offset.top + icon.height() + 15, bubbleLeft = offset.left + 4 - ($bubble.width() - icon.width()) / 2, containerPadding = 12, containerWidth = $("#reader-content").width(), rightOverflow = 2, bubbleWidth = $bubble.width();
            if (bubbleLeft < -containerPadding) {
                bubbleLeft = -containerPadding;
                $bubble.addClass("bubble-left");
            }
            if (bubbleLeft + bubbleWidth + rightOverflow > containerWidth) {
                bubbleLeft = containerWidth - bubbleWidth - rightOverflow - containerPadding;
                $bubble.addClass("bubble-right");
            }
            bubbleLeft = bubbleLeft - 1;
            $bubble.css({
                top: bubbleTop,
                left: bubbleLeft
            }).addClass("fadein");
        },
        hideReportAndHide: function(bubble) {
            wpcomNewdashActions.tosTimeout = setTimeout(function() {
                bubble.parents(".sub").removeClass("noflow");
                bubble.removeClass("fadein");
            }, 500);
        },
        reportSpamOrMature: function(button) {
            var parent = button.parentsUntil(".sub-body-content", ".report-and-hide-actions"), type = button.data("report-type"), postId = parent.data("post-id"), reportUrl = parent.data("report-url"), blogId = parent.data("blog-id");
            statUtils.bumpStat("reader_actions", "report_as_" + type);
            if ("spam" == type) {
                statUtils.recordEvent("Reader", "Clicked Report Spam");
            } else {
                statUtils.recordEvent("Reader", "Clicked Report Mature");
            }
            $.post(urlUtils.getAjaxUrl(), {
                action: "tos_form_submit",
                type: type,
                post_id: postId,
                report_url: reportUrl,
                blog_id: blogId,
                reason: "Reported from the newdash reader.",
                _wpnonce: $("#tos-report").val()
            }, function(response) {
                if (type != "spam" && !button.hasClass("report-mature-and-block")) return;
                response = $.parseJSON(response);
                var blockMeta = {
                    tos_report_id: response.tos_report_id
                };
                wpcomNewdashActions.blockBlog(blogId, button, blockMeta);
            });
            if (button.hasClass("report-mature")) {
                parent.find(".report-mature, .report-mature-and-block").fadeOut("fast", function() {
                    parent.find(".reported-mature").fadeIn();
                }).remove();
                return;
            }
            wpcomNewdashActions.hideBlog(blogId, button);
        },
        handleBlockBlog: function(button) {
            var parent = button.parentsUntil(".sub-body-content", ".report-and-hide-actions"), blogId = parent.data("blog-id");
            wpcomNewdashActions.hideBlog(blogId, button);
            wpcomNewdashActions.blockBlog(blogId, button);
        },
        blockBlog: function(blogId, button, blockMeta) {
            statUtils.bumpStat("reader_actions", "blockBlog");
            blockMeta = "undefined" !== typeof blockMeta ? blockMeta : null;
            statUtils.recordEvent("Reader", "Clicked Block Blog");
            $.post(urlUtils.getAjaxUrl(), {
                action: "wpcom_block_blog_from_reader",
                blog_id: blogId,
                block_meta: blockMeta,
                _wpnonce: $("#block_blogs").val()
            }, function(response) {
                if (-1 != $.inArray(blogId, wpcomNewdashActions.hideBlogCompleted)) {
                    wpcomNewdashActions.allowUndo(blogId, button);
                } else {
                    wpcomNewdashActions.blockBlogCompleted.push(blogId);
                }
            });
            wpcomLocalStorage.clear();
        },
        hideBlog: function(blogId, button) {
            var $removalNotice;
            if (button.hasClass("block-blog")) {
                $removalNotice = $("#hidden-notices").find(".blocked-blog-notice").first().clone().removeClass("hidden");
            } else {
                $removalNotice = $("#hidden-notices").find(".tos-removal").first().clone().removeClass("hidden");
            }
            $removalNotice.find("span.blog-title").html(button.parentsUntil(".sub").parent().find("a.blog-url").html());
            $removalNotice.find(".notice-undo").spin("small").show();
            var $blogItems = $("#reader-content").find('[data-blog-id="' + blogId + '"]').parent().parent().children();
            $blogItems.slideUp();
            $blogItems.parent().append($removalNotice);
            $("div.report-and-hide-actions").removeClass("fadein");
            var timer = $.Deferred(function(deferred) {
                setTimeout(deferred.resolve, 1e3);
            }).promise();
            $.when(timer).then(function() {
                if (-1 != $.inArray(blogId, wpcomNewdashActions.blockBlogCompleted)) {
                    wpcomNewdashActions.allowUndo(blogId, button);
                } else {
                    wpcomNewdashActions.hideBlogCompleted.push(blogId);
                }
            });
        },
        allowUndo: function(blogId, button) {
            var $blogItems = $("#reader-content").find('[data-blog-id="' + blogId + '"]').parent().parent();
            $blogItems.find("span.notice-undo").fadeOut("normal", function() {
                $(this).replaceWith('<a data-blog-id="' + blogId + '" class="notice-undo unblock-blog" href="#!/read/actions/blog/unblock/' + blogId + '">Undo</a>').fadeIn();
            });
        },
        undoBlockBlog: function(button) {
            var blogId = button.data("blog-id"), $blogItems = $("#reader-content").find('[data-blog-id="' + blogId + '"]').parent().parent();
            $blogItems.find(".tos-removal, .blocked-blog-notice").slideUp().remove();
            $blogItems.find("*").slideDown();
            $blogItems.find(".wpcom-enhanced-excerpt-content a").css("display", "block");
            statUtils.bumpStat("reader_actions", "unblock_blog");
            $.post(urlUtils.getAjaxUrl(), {
                action: "wpcom_unblock_blog_from_reader",
                blog_id: blogId,
                _wpnonce: $("#block_blogs").val()
            }, function(response) {});
            wpcomLocalStorage.clear();
        },
        scrollToTop: function() {
            $("html, body").animate({
                scrollTop: 0
            }, 300);
        },
        getFollowData: function(btn) {
            var data = btn.attr("href").split("/");
            return {
                blog_id: data[5],
                nonce: data[6]
            };
        },
        toggleFollowButton: function(e, followedBlogId) {
            var data = wpcomNewdashActions.getFollowData($(this)), doFollow = e.type == "followed" ? 1 : 0, template = doFollow ? "unfollow-blog-button" : "follow-blog-button";
            if (data.blog_id == followedBlogId) {
                $(this).replaceWith(templateFactory.fetch(template, {
                    blog_id: data.blog_id,
                    nonce: data.nonce
                }));
                if ("function" !== typeof wpcomReader.activeCollection.where) return;
                var fetchedPost = wpcomReader.activeCollection.where({
                    blog_id: Number(data.blog_id)
                });
                _.each(fetchedPost, function(post) {
                    post.set({
                        is_following: doFollow
                    });
                });
            }
        },
        addList: function(title, nonce) {
            statUtils.bumpStat("reader_actions", "add_list");
            jqxhr = $.ajax({
                type: "POST",
                url: urlUtils.getAjaxUrl(),
                data: {
                    action: "add_list",
                    _wpnonce: nonce,
                    title: title
                },
                dataType: "json"
            });
            return jqxhr;
        },
        deleteList: function(list_id, nonce) {
            statUtils.bumpStat("reader_actions", "delete_list");
            jqxhr = $.ajax({
                type: "POST",
                url: urlUtils.getAjaxUrl(),
                data: {
                    action: "delete_list",
                    _wpnonce: nonce,
                    list_id: list_id
                },
                dataType: "json"
            });
            return jqxhr;
        },
        updateList: function(list_id, list_title, list_description, nonce) {
            statUtils.bumpStat("reader_actions", "update_list");
            jqxhr = $.ajax({
                type: "POST",
                url: urlUtils.getAjaxUrl(),
                data: {
                    action: "update_list",
                    _wpnonce: nonce,
                    list_id: list_id,
                    list_title: list_title,
                    list_description: list_description
                },
                dataType: "json"
            });
            return jqxhr;
        },
        deleteListItem: function(list_id, list_item_id, nonce) {
            statUtils.bumpStat("reader_actions", "delete_list_item");
            jqxhr = $.ajax({
                type: "POST",
                url: urlUtils.getAjaxUrl(),
                data: {
                    action: "delete_list_item",
                    _wpnonce: nonce,
                    list_id: list_id,
                    list_item_id: list_item_id
                },
                dataType: "json"
            });
            return jqxhr;
        },
        addItemToList: function(list_id, slug, nonce) {
            statUtils.bumpStat("reader_actions", "add_list_item");
            jqxhr = $.ajax({
                type: "POST",
                url: urlUtils.getAjaxUrl(),
                data: {
                    action: "add_list_item",
                    _wpnonce: nonce,
                    list_id: list_id,
                    item_slug: slug
                },
                dataType: "json"
            });
            return jqxhr;
        }
    };
    var wpcomNewdashRenderer = {
        markupHeader: function(title) {
            return templateFactory.fetch("post-header", {
                title: title
            });
        },
        markupTopicHeader: function(title, slug, isFollowing) {
            var button = "";
            $("#menu-dash-newpost-tagged").addClass("visible");
            $("#menu-dash-newpost").hide();
            if (isFollowing) button = templateFactory.fetch("unfollow-topic-button", {
                slug: slug
            }); else button = templateFactory.fetch("follow-topic-button", {
                slug: slug
            });
            return templateFactory.fetch("post-header", {
                title: title,
                buttons: [ {
                    follow: button
                } ]
            });
        },
        markupBlogHeader: function(title, blogId, feedId, url, description, avatar, followerCount, isFollowing, headerImage) {
            var button = "";
            if (feedId > 0) {
                if (parseInt(followerCount, 10) < 1) {
                    followerCount = null;
                }
                if (isFollowing) button = templateFactory.fetch("unfollow-feed-button", {
                    feed_id: feedId
                }); else button = templateFactory.fetch("follow-feed-button", {
                    feed_id: feedId
                });
            } else {
                if (isFollowing) button = templateFactory.fetch("unfollow-blog-button", {
                    blog_id: blogId
                }); else button = templateFactory.fetch("follow-blog-button", {
                    blog_id: blogId
                });
            }
            return templateFactory.fetch("single-blog-header", {
                title: title,
                url: url,
                description: description,
                avatar: avatar,
                follower_count: followerCount,
                buttons: [ {
                    follow: button
                } ],
                headerImage: headerImage
            });
        },
        markupActivityHeader: function(title) {
            var all = templateFactory.fetch("activity-all-button", {});
            var comments = templateFactory.fetch("activity-comments-button", {});
            var likes = templateFactory.fetch("activity-likes-button", {});
            return templateFactory.fetch("activity-header", {
                title: title,
                buttons: [ {
                    filter: all
                }, {
                    filter: comments
                }, {
                    filter: likes
                } ]
            });
        },
        markupListHeader: function(title, listAuthor, listSlug, description, followerCount, isFollowing, isListOwner) {
            var button = "";
            if (!isListOwner) {
                if (isFollowing) button = templateFactory.fetch("unfollow-list-button", {
                    list_author: listAuthor,
                    list_slug: listSlug
                }); else button = templateFactory.fetch("follow-list-button", {
                    list_author: listAuthor,
                    list_slug: listSlug
                });
            }
            return templateFactory.fetch("list-header", {
                title: title,
                description: description,
                follower_count: followerCount,
                buttons: {
                    follow: button
                },
                list_owner: isListOwner
            });
        }
    };
    var wpcomReader = {
        unloadRegistry: [],
        activeCollection: {},
        loadingTimeout: false,
        followRecosEnabled: true,
        topicTabSelected: null,
        init: function() {
            moment.lang(newdashI18n.get([ "user_data", "locale" ]), {
                months: newdashI18n.data().months,
                monthsShort: newdashI18n.data().months_abbrev,
                weekdays: newdashI18n.data().weekdays,
                weekdaysShort: newdashI18n.data().weekdays_abbrev,
                weekdaysMin: newdashI18n.data().weekdays_short,
                relativeTime: newdashI18n.data().relative_time
            });
            $("div#tab-content").on("click.wpcomReader", "a.post-title, .featured-media, .read-more a", function(e) {
                statUtils.bumpStat("reader_actions", "visited_post_permalink");
            });
            $("div#tab-content").on("click.wpcomReader", "#reader a.current-group-editable", function(e) {
                e.preventDefault();
                $(".sidebar-group-item").hide();
                $(".group-list-toggle").removeClass("group-list-expanded");
                $(".sidebar-group-setting").toggle();
                $(".sidebar-group-header").toggleClass("current-group-expanded");
            });
            $("div#tab-content").on("click.wpcomReader", "#reader a.group-list-toggle", function(e) {
                e.preventDefault();
                $(".sidebar-group-item").toggle();
                $(".group-list-toggle").toggleClass("group-list-expanded");
                $(".sidebar-group-setting").hide();
                $(".sidebar-group-header").removeClass("current-group-expanded");
            });
            $("div#tab-content").on("click.wpcomReader", "#reader a.sidebar-group-link", function(e) {
                $(".sidebar-group-item").hide();
                $(".group-list-toggle").removeClass("group-list-expanded");
                $(".sidebar-group-setting").hide();
                $(".sidebar-group-header").removeClass("current-group-expanded");
                $(".current-group").removeClass("current-group-editable");
            });
            $("div#tab-content").on("click.wpcomReader", "#reader a.current-group-settings", function(e) {
                $(".sidebar-group-item").hide();
                $(".group-list-toggle").removeClass("group-list-expanded");
                $(".sidebar-group-setting").hide();
                $(".sidebar-group-header").removeClass("current-group-expanded");
            });
            $("div#tab-content").on("click.wpcomReader", "#reader a.add-topic", function(e) {
                e.preventDefault();
                var slug = $("input#add-topic-text").val().toLowerCase().replace(" ", "-", "g");
                statUtils.recordEvent("Reader", "Clicked Add Topic", slug);
                $.when(wpcomNewdashActions.followTopic(slug, $(this).data("nonce"))).then(function(response) {
                    if (response.error) alert(response.error.message); else {
                        wpcomReader.addTopicToSidebar(response.result);
                        $("input#add-topic-text").val("").blur();
                        wpcomNewdash.router.setRoute("/tag/" + slug + "/");
                    }
                });
            });
            $("div#tab-content").on("keyup.wpcomReader", "input#add-topic-text", function(e) {
                $("span.errortipwrap").fadeOut("fast");
                var code = e.keyCode ? e.keyCode : e.which;
                if (e.type == "keyup" && code != 13) return false;
                var slug = $("input#add-topic-text").val().toLowerCase().replace(" ", "-", "g");
                statUtils.recordEvent("Reader", "Clicked Add Topic", slug);
                $.when(wpcomNewdashActions.followTopic(slug, $("a.add-topic").data("nonce"))).then(function(response) {
                    if (response.error) alert(response.error.message); else {
                        wpcomReader.addTopicToSidebar(response.result);
                        $("input#add-topic-text").val("");
                        wpcomNewdash.router.setRoute("/tag/" + slug + "/");
                    }
                });
                return false;
            });
            $("div#tab-content").on("click.wpcomReader", "#reader a.remove-topic", function(e) {
                e.preventDefault();
                var data = $(this).attr("href").split("/"), slug = data[5], nonce = data[6];
                statUtils.recordEvent("Reader", "Clicked Remove Topic", slug);
                $.when(wpcomNewdashActions.unfollowTopic(slug, nonce)).then(function() {
                    wpcomReader.removeTopicFromSidebar(slug);
                });
            });
            $("div#tab-content").on("click.wpcomReader", "#reader a.add-list", function(e) {
                e.preventDefault();
                var title = $("input#add-list-text").val();
                statUtils.recordEvent("Reader", "Clicked Add List", title);
                $.when(wpcomNewdashActions.addList(title, $("a.add-list").data("nonce"))).then(function(response) {
                    if (response.error) {
                        alert(response.error.message);
                    } else {
                        wpcomReader.addListToSidebar(response.result);
                        $("input#add-list-text").val("").blur();
                        wpcomNewdash.router.setRoute("/read/list/" + response.author + "/" + response.slug + "/edit/");
                    }
                });
            });
            $("div#tab-content").on("keyup.wpcomReader", "input#add-list-text", function(e) {
                $("span.errortipwrap").fadeOut("fast");
                var code = e.keyCode ? e.keyCode : e.which;
                if (e.type == "keyup" && code != 13) return false;
                var title = $("input#add-list-text").val();
                statUtils.recordEvent("Reader", "Clicked Add List", title);
                $.when(wpcomNewdashActions.addList(title, $("a.add-list").data("nonce"))).then(function(response) {
                    if (response.error) {
                        alert(response.error.message);
                    } else {
                        wpcomReader.addListToSidebar(response.result);
                        $("input#add-list-text").val("").blur();
                        wpcomNewdash.router.setRoute("/read/list/" + response.author + "/" + response.slug + "/edit/");
                    }
                });
                return false;
            });
            $("div#tab-content").on("click.wpcomReader", "#reader a#delete-list", function(e) {
                e.preventDefault();
                if (!confirm(newdashI18n.get([ "lists", "delete_ays" ]))) {
                    return false;
                }
                statUtils.recordEvent("Reader", "Clicked Delete List");
                var id = $("input#list_id").val();
                var listAuthor = $("input#list_author").val();
                var listSlug = $("input#list_slug").val();
                $.when(wpcomNewdashActions.deleteList(id, $("a#delete-list").data("nonce"))).then(function(response) {
                    if (response.error) {
                        alert(response.error.message);
                    } else {
                        wpcomReader.removeListFromSidebar(listAuthor, listSlug);
                        wpcomNewdash.router.setRoute("/");
                    }
                });
            });
            $("div#tab-content").on("click.wpcomReader", "#reader a#update-list", function(e) {
                e.preventDefault();
                $("#list-loading").fadeIn("fast");
                $("#list-tip").fadeOut("fast");
                $("#item-tip").fadeOut("fast");
                var id = $("input#list_id").val();
                var title = $("input#list_title").val();
                $.when(wpcomNewdashActions.updateList(id, title, $("textarea#list_description").val(), $("a#update-list").data("nonce"))).then(function(response) {
                    $("#list-loading").fadeOut("fast");
                    if (response.error) {
                        $("#list-tip-text").text(response.error.message);
                        $("#list-tip").fadeIn("fast");
                    } else {
                        wpcomReader.updateListInSidebar(response.author, response.slug, title);
                    }
                });
            });
            $("div#tab-content").on("click.wpcomReader", "#reader span.delete-list-item", function(e) {
                e.preventDefault();
                var list_id = $("input#list_id").val();
                var parent = $(this).parents("tr");
                $("#" + parent.attr("id") + "-notifs").remove();
                parent.remove();
                var list_item_id = parent.attr("id").substr(5, parent.attr("id").length);
                statUtils.recordEvent("Reader", "Removed Item from List");
                $.when(wpcomNewdashActions.deleteListItem(list_id, list_item_id, $(this).data("nonce"))).then(function(response) {
                    $("#item-loading").fadeOut("fast");
                    if (response.error) {
                        alert(response.error.message);
                    } else {
                        wpcomReader.removeListItemFromManage(list_id);
                        if ($("#blog-subs tr").length == 4) {
                            $(".empty-list").parent().show();
                        }
                    }
                });
            });
            $("div#tab-content").on("click.wpcomReader", "#reader a#addlistitem_submit", function(e) {
                e.preventDefault();
                $("#item-tip").fadeOut("fast");
                $("#list-tip").fadeOut("fast");
                statUtils.recordEvent("Reader", "Added Item to List");
                var list_id = $("input#list_id").val();
                var slug = $("input#additem").val().toLowerCase().replace(" ", "-");
                if (!slug.length) {
                    $("#item-tip").fadeIn("fast");
                } else {
                    $("#item-loading").fadeIn("fast");
                    $.when(wpcomNewdashActions.addItemToList(list_id, slug, $("#add_list_item").val())).then(function(response) {
                        $("#item-loading").fadeOut("fast");
                        if (response.error) {
                            $("#item-tip-text").text(response.error.message);
                            $("#item-tip").fadeIn("fast");
                        } else {
                            wpcomReader.addItemToListOfItems(response.result);
                            $("input#additem").val("").blur();
                            $(".empty-list").parent().hide();
                        }
                    });
                }
            });
            $("div#tab-content").on("keyup.wpcomReader", "input#additem", function(e) {
                var code = e.keyCode ? e.keyCode : e.which;
                if (e.type == "keyup" && code != 13) return false;
                $("#item-tip").fadeOut("fast");
                $("#list-tip").fadeOut("fast");
                $("#item-loading").fadeIn("fast");
                statUtils.recordEvent("Reader", "Added Item to List");
                var list_id = $("input#list_id").val();
                var slug = $("input#additem").val().toLowerCase().replace(" ", "-");
                $.when(wpcomNewdashActions.addItemToList(list_id, slug, $("#add_list_item").val())).then(function(response) {
                    $("#item-loading").fadeOut("fast");
                    if (response.error) {
                        $("#item-tip-text").text(response.error.message);
                        $("#item-tip").fadeIn("fast");
                    } else {
                        wpcomReader.addItemToListOfItems(response.result);
                        $("input#additem").val("").blur();
                        $(".empty-list").parent().hide();
                    }
                });
                return false;
            });
            $("div#tab-content").on("click.wpcomReader", "#reader .add-suggested-list-item", function(e) {
                e.preventDefault();
                var add_button = $(this);
                var list_id = $("input#list_id").val();
                var blog_url = add_button.data("blog-to-add");
                statUtils.recordEvent("Reader", "Added Suggested Item to List");
                if (!blog_url.length) {
                    return false;
                } else {
                    add_button.parent().fadeOut("fast");
                    $.when(wpcomNewdashActions.addItemToList(list_id, blog_url, $("#add_list_item").val())).then(function(response) {
                        if (response.error) {
                            return false;
                        } else {
                            wpcomReader.addItemToListOfItems(response.result);
                            $("input#additem").val("").blur();
                            $(".empty-list").parent().hide();
                        }
                    });
                }
            });
            $(document).on("click.wpcomReader", "div#reader-content a.list.follow", function(e) {
                e.preventDefault();
                var $a = $(e.target);
                statUtils.recordEvent("Reader", "Clicked Follow List");
                wpcomReader.followList($a.data("author"), $a.data("slug"), true);
            });
            $(document).on("click.wpcomReader", "div#reader-content a.list.following", function(e) {
                e.preventDefault();
                var $a = $(e.target);
                statUtils.recordEvent("Reader", "Clicked Unfollow List");
                wpcomReader.followList($a.data("author"), $a.data("slug"), false);
            });
            $(document).off("wpcom_tab_loaded.follow_recos").on("wpcom_tab_loaded.follow_recos", function() {
                if (wpcomNewdash.activeTab === "read") {
                    wpcomReader.activateFollowRecos();
                }
            });
            $(document).on("wpcom_tab_loaded.keynav", function() {
                if ("undefined" != typeof wpcomReader.keynav && "function" == typeof wpcomReader.keynav.unload) {
                    wpcomReader.keynav.unload();
                    delete wpcomReader.keynav;
                }
                if (wpcomNewdash.activeTab === "read") {
                    if ("undefined" == typeof wpcom.keyNav || "undefined" == typeof wpcom.keyNav.KeyNavView) {
                        return;
                    }
                    wpcomReader.keynav = new wpcom.keyNav.KeyNavView({
                        el: "#reader-content",
                        item: ".sub",
                        currentClass: "selected",
                        rejectIfKey: function(key) {
                            if ($("#wpnt-notes-panel:visible").length) {
                                return true;
                            }
                            var path = wpcomNewdash.router.getRoute().join("/"), content = $("#fpb-content");
                            if (path.match(/read\/post/)) {
                                if (!$(".comment-form textarea").is(":focus")) {
                                    if ("j" === key.toLowerCase()) {
                                        content.animate({
                                            scrollTop: "+=8"
                                        }, 1);
                                    } else if (" " === key) {
                                        content.animate({
                                            scrollTop: "+=60"
                                        }, 1);
                                    } else if ("k" === key.toLowerCase()) {
                                        content.animate({
                                            scrollTop: "-=8"
                                        }, 1);
                                    } else if ("t" === key.toLowerCase()) {
                                        content.animate({
                                            scrollTop: 0
                                        }, 1);
                                    }
                                }
                                if (_.contains([ "esc", "f", "l" ], key.toLowerCase())) {
                                    return false;
                                }
                                return true;
                            }
                            return false;
                        },
                        callbacks: {
                            c: function($el) {
                                var $links;
                                $links = $el.find(".actions a.comment");
                                if (!$links.length) {
                                    return;
                                }
                                $links[0].click();
                            },
                            f: function($el) {
                                var $links, $current, $fullPost = $("#fpb-ui:visible");
                                $current = $fullPost.length ? $fullPost : $el || [];
                                if (!$current.length) {
                                    return;
                                }
                                $links = $current.find(".actions a.follow, .actions a.following, .follow-button a");
                                if (!$links.length || !$links.is(":visible")) {
                                    return;
                                }
                                $links[0].click();
                            },
                            t: function($el) {
                                $("#reader-content").trigger("renderNewPosts");
                            },
                            l: function($el) {
                                var $links, $current, $fullPost = $("#fpb-ui:visible");
                                $current = $fullPost.length ? $fullPost : $el || [];
                                if (!$current.length) {
                                    return;
                                }
                                $links = $current.find(".actions a.like, .actions a.liked");
                                if (!$links.length || !$links.is(":visible")) {
                                    return;
                                }
                                $links[0].click();
                            },
                            "return": function($el) {
                                var $links, $current = $el || [];
                                if (!$current.length) {
                                    return;
                                }
                                $current.trigger("openFullPostView");
                            },
                            esc: function($el) {
                                var $fpbui = $("#fpb-ui:visible");
                                if ($fpbui.length) {
                                    $fpbui.find("#fpb-close").click();
                                }
                            }
                        }
                    });
                }
            });
            $("div#tab-content").on("click.wpcomReader", "#app-promo a", function(e) {
                var $platform = $(e.target).data("platform");
                statUtils.bumpStat("reader_app_promo_click", $platform);
            });
        },
        renderPage: function(args) {
            var $content = $("#reader-content");
            args = typeof args != "undefined" ? args : {};
            args.page = typeof args.page != "undefined" ? args.page : false;
            if (!$content.length) {
                $(document).on("DOMNodeInserted.newdash", function(e) {
                    if ("tab-content" == $(e.target).attr("id")) {
                        $content = $("#reader-content");
                        $(document).off("DOMNodeInserted.newdash");
                        $content.addClass("page-" + args.page);
                        wpcomReader["page_" + args.page](args);
                    }
                });
            } else {
                var pageClass = "page-" + args.page;
                if (args.slug) pageClass += "-s:" + args.slug;
                if (args.blogId) pageClass += "-b:" + args.blogId;
                if (args.feedId) pageClass += "-f:" + args.feedId;
                if (args.postId) pageClass += "-p:" + args.postId;
                if (args.postStatus) pageClass += "-ps:" + args.postStatus;
                if (args.postType) pageClass += "-pt:" + args.postType;
                if (args.feedItemId) pageClass += "-fi:" + args.feedItemId;
                if (args.listAuthor) pageClass += "-1:" + args.listAuthor + ":" + args.listSlug;
                if (args.groupID) pageClass += "-g:" + args.groupID;
                if ($content.hasClass(pageClass)) {
                    return;
                }
                if (!args.postId && !args.feedItemId) $content.attr("class", "right-column-inner transition " + pageClass);
                wpcomReader["page_" + args.page](args);
            }
            if ("function" === typeof $.fn.placeholder) {
                $("#add-topic-text").placeholder().css("border-color", "red");
            }
        },
        loadFrame: function() {
            var dfd = $.Deferred();
            $("#footer").removeClass("show");
            if (wpcomNewdash.isTabLoaded("fresh")) {
                wpcomNewdash.highlightMenu("reader", false);
                dfd.resolve();
                return dfd;
            }
            if (wpcomNewdash.isTabLoaded("reader")) {
                dfd.resolve();
                return dfd;
            }
            wpcomNewdash.highlightMenu("reader");
            statUtils.bumpStat("newdash_visits", "read");
            return wpcomNewdash.loadTemplate({
                template: "read.php"
            });
        },
        page_following: function() {
            require([ "following" ], function(wpcomFollowing) {
                wpcomFollowing.init();
            });
        },
        page_group: function(args) {
            wpcomNewdash.loadTemplate({
                template: "groups/groups.php",
                target: "div#reader-content"
            }).done(function() {
                require([ "groups" ], function(wpcomGroups) {
                    wpcomGroups.init({
                        group: args.groupID
                    });
                    wpcomReader.hideLoading();
                });
            });
        },
        page_group_new: function() {
            wpcomNewdash.loadTemplate({
                template: "groups/groups.php",
                target: "div#reader-content"
            }).done(function() {
                require([ "groupsEdit" ], function(wpcomGroupsEdit) {
                    wpcomGroupsEdit.init();
                    wpcomGroupsEdit.showCreateGroup();
                    wpcomReader.hideLoading();
                });
            });
        },
        page_group_edit: function(args) {
            wpcomNewdash.loadTemplate({
                template: "groups/groups.php",
                target: "div#reader-content"
            }).done(function() {
                require([ "groupsEdit" ], function(wpcomGroupsEdit) {
                    wpcomGroupsEdit.init();
                    wpcomGroupsEdit.showEditGroup(args.groupID);
                    wpcomReader.hideLoading();
                });
            });
        },
        page_fresh: function() {
            require([ "fresh" ], function(wpcomFresh) {
                wpcomFresh.init();
            });
        },
        page_local: function(args) {
            require([ "local" ], function(wpcomLocal) {
                wpcomNewdash.routeModuleReferences.local = wpcomLocal;
                wpcomLocal.init(args);
            });
        },
        page_likes: function() {
            wpcomNewdash.router.setRoute("/activities/likes/");
        },
        pageActivities: function(args) {
            require([ "activities" ], function(wpcomActivities) {
                wpcomActivities.init(args);
            });
        },
        page_a8c: function() {
            require([ "a8c" ], function(wpcomA8c) {
                wpcomA8c.init();
            });
        },
        page_find_friends: function() {
            wpcomReader.selectMenuItem("find-friends");
            wpcomReader.showLoading("find-friends");
            wpcomNewdash.loadTemplate({
                template: "reader/find-friends.php",
                target: "div#reader-content"
            }).done(function() {
                wpcomFriendFinder.init();
                wpcomReader.hideLoading();
                statUtils.bumpStat("reader_views", "find_friends_load");
            });
        },
        page_recommendations: function(args) {
            wpcomReader.selectMenuItem("recommendations");
            wpcomReader.showLoading("recommendations");
            require([ "recommendations" ], function(wpcomReaderRecommendations) {
                wpcomReaderRecommendations.init({
                    beforeInitialRender: function() {
                        wpcomReader.hideLoading();
                    }
                });
                if (args.topic) {
                    wpcomReaderRecommendations.setTopic(args.topic);
                }
                wpcomNewdash.routeModuleReferences.recommendations = wpcomReaderRecommendations;
            });
            statUtils.bumpStat("reader_views", "recommendations_load");
        },
        page_explore_topics: function() {
            wpcomReader.selectMenuItem("topics");
            wpcomReader.showLoading("topics");
            wpcomNewdash.loadTemplate({
                template: "reader/topic-cloud.php",
                target: "div#reader-content"
            }).done(function() {
                require([ "topicCloudAndSearch" ], function(wpcomTopicCloudAndSearch) {
                    wpcomTopicCloudAndSearch.init();
                    wpcomReader.hideLoading();
                });
                statUtils.bumpStat("reader_views", "explore_topics_load");
            });
        },
        page_topic: function(args) {
            require([ "topic" ], function(wpcomTopic) {
                wpcomTopic.init(args);
            });
        },
        page_fp: function(args) {
            require([ "previouslyFresh" ], function(wpcomPreviouslyFresh) {
                wpcomPreviouslyFresh.init(args);
            });
        },
        page_blog: function(args) {
            require([ "blog" ], function(wpcomBlog) {
                wpcomBlog.init(args);
            });
        },
        page_feed: function(args) {
            require([ "feed" ], function(wpcomFeed) {
                wpcomFeed.init(args);
            });
        },
        page_post: function(args) {
            wpcomPost.init(args);
        },
        page_edit: function() {
            wpcomReader.showLoading("following");
            wpcomNewdash.loadTemplate({
                template: "reader/edit-following.php",
                target: "div#reader-content"
            }).done(function() {
                require([ "readerManage" ], function(wpcomReaderManage) {
                    wpcomReaderManage.init();
                    wpcomReader.hideLoading();
                });
            });
        },
        page_import: function() {
            wpcomReader.showLoading("import");
            wpcomNewdash.loadTemplate({
                template: "reader/import.php",
                target: "div#reader-content"
            }).done(function() {
                wpcomReader.hideLoading();
                $("#import-opml-submit").off(".opml-import").on("click.opml-import", function(e) {
                    e.preventDefault();
                    $(this).closest("form").submit();
                });
                if (document.location.search.indexOf("import-queued") != -1) {
                    $("#import-queued").show();
                } else if (document.location.search.indexOf("google-import-queued") != -1) {
                    $("#google-import-queued").show();
                } else if (document.location.search.indexOf("import-error") != -1) {
                    if (document.location.href.indexOf("import-error=zip") != -1) {
                        $("#import-error-zip").show();
                    } else {
                        $("#import-error").show();
                    }
                } else if (document.location.search.indexOf("google-import-error") != -1) {
                    if (document.location.search.indexOf("google-import-error=empty") != -1) {
                        $("#google-import-error-empty").show();
                    } else {
                        $("#google-import-error").show();
                    }
                }
            });
        },
        page_list: function(args) {
            require([ "topicList" ], function(wpcomTopicList) {
                wpcomTopicList.init(args);
                wpcomReader.selectMenuItem("list-" + args.listAuthor + "-" + args.listSlug);
            });
        },
        page_list_edit: function(args) {
            wpcomReader.showLoading("list");
            wpcomNewdash.loadTemplate({
                template: "reader/edit-list.php",
                query: "slug=" + args.listSlug,
                target: "div#reader-content"
            }).done(function() {
                require([ "readerManage" ], function(wpcomReaderManage) {
                    wpcomReader.selectMenuItem("list-" + args.listAuthor + "-" + args.listSlug);
                    wpcomReaderManage.init();
                    wpcomReader.hideLoading();
                });
            });
        },
        page_upgrade: function(args) {
            wpcomReader.selectMenuItem("upgrade");
            wpcomReader.showLoading("find-friends");
            var query = "";
            if (typeof args.blogId !== "undefined") {
                query = "blog_id=" + args.blogId;
            }
            wpcomNewdash.loadTemplate({
                template: "upgrade/plans.php",
                target: "div#reader-content",
                query: query
            }).done(function() {
                wpcomReader.hideLoading();
            });
        },
        renderPageHTML: function(html) {
            var el = $("#reader-content");
            el.html(html).addClass("transition");
            $(document).trigger("page-rendered.wpcom-newdash");
            setTimeout(function() {
                el.addClass("in");
            }, 150);
        },
        activateFollowRecos: function() {
            if (!this.followRecosEnabled) {
                return;
            }
            var $sidebar = $("#sidebar");
            if ($sidebar.filter(":visible").length) {
                var $sidebarRecs = $sidebar.children(".sidebar-recs");
                if ($sidebarRecs.length) {
                    return;
                }
                var $sticky = $sidebar.children(".sticky");
                $sidebarRecs = $('<div class="follow-reco-sidebar" />');
                $sticky.append($sidebarRecs);
                wpcom.events.trigger("followRecos:show", {
                    el: "#sidebar .follow-reco-sidebar",
                    follow_source: "reader_sidebar",
                    maxItems: 4
                });
                $header = $("header");
                var scrollTimeout;
                var $last = $sidebar.children(":visible:not( .sticky ):last");
                var setWidthTimeout, setWidth = function() {
                    clearTimeout(setWidthTimeout);
                    setWidthTimeout = setTimeout(function() {
                        var outerWidth;
                        if (!$sidebar.filter(":visible").length) {
                            return;
                        }
                        outerWidth = $sidebar.outerWidth();
                        if (!outerWidth) {
                            return;
                        }
                        $sticky.css("width", outerWidth);
                    }, 200);
                };
                var setFixedTimeout, setFixed = function() {
                    clearTimeout(setFixedTimeout);
                    setFixedTimeout = setTimeout(function() {
                        var headerHeight, headerTop, lastHeight, lastTop;
                        try {
                            headerHeight = $header.outerHeight();
                            headerTop = $header.offset().top;
                            lastHeight = $last.outerHeight();
                            lastTop = $last.offset().top;
                            if (lastHeight + lastTop - headerHeight - headerTop < 0) {
                                $sticky.addClass("fixed");
                            } else {
                                $sticky.removeClass("fixed");
                            }
                        } catch (e) {
                            if (console && "function" == typeof console.error) {
                                console.error("error activating sidebar recommendations");
                            }
                            $sticky.removeClass("fixed");
                            return;
                        }
                    }, 10);
                };
                $(window).off("resize.followRecos").on("resize.followRecos", function() {
                    setWidth();
                    setFixed();
                });
                $(window).off("scroll.followRecos").on("scroll.followRecos", function() {
                    if (!$sidebar.filter(":visible").length) {
                        $sticky.removeClass("fixed");
                        return;
                    }
                    setWidth();
                    setFixed();
                });
                setWidth();
                setFixed();
            }
        },
        selectMenuItem: function(slug) {
            wpcomReader.topicsTabs();
            $("a", "div#sidebar ul li").removeClass("selected");
            $("a", "div#sidebar ul li." + slug).addClass("selected");
            $(document).trigger("wpcom_selected_sidebar_item");
        },
        isMenuSelected: function(slug) {
            if ($("a.selected", "li.topic-" + slug).length || $("a.selected", "li." + slug).length || $("a.selected", "li.fp-" + slug).length) return true;
            return false;
        },
        showLoading: function(slug) {
            var $readerContent = $("div#reader-content");
            $readerContent.html("");
            if ($readerContent.length < 1) {
                $readerContent = $("#tab-content");
            }
            this.loadingTimeout = setTimeout(function() {
                var title = "Loading";
                if ("blog" === slug) {
                    title += " Blog";
                }
                wpcomNewdashActions.scrollToTop();
                $readerContent.html('<h3 class="loading"><div class="offset">' + title + "</div></h3>").addClass("in").children(".loading").hide().height($(window).height() - $("header").height() - 45).show();
                if ("topics" === slug || "blog" === slug) {
                    return;
                }
                $("div#sidebar ul li." + slug).addClass("loading");
                if ($(document).width() > 480) {
                    $("div#sidebar ul li." + slug).append('<span class="loading"></span>');
                }
            }, 100);
            $("div#subs-loading").remove();
        },
        hideLoading: function() {
            clearTimeout(this.loadingTimeout);
            $("div#subs-content").removeClass("hidden").addClass("fadein");
            $("div#sidebar ul li.loading").removeClass("loading").children("span.loading").remove();
        },
        sortUL: function(selector) {
            var sorted = $(selector).children("li").sort(function(a, b) {
                var upA = $(a).text().toUpperCase().trim();
                var upB = $(b).text().toUpperCase().trim();
                return upA < upB ? -1 : upA > upB ? 1 : 0;
            });
            sorted.appendTo(selector);
        },
        addTopicToSidebar: function(html) {
            var sidebarTopicsList = $("ul#sidebar-topics-list");
            sidebarTopicsList.append(html);
            this.sortUL(sidebarTopicsList);
            wpcomNewdashActions.scrollToTop();
            wpcomNewdash.loadTemplate({
                template: "read.php",
                target: false,
                doInsert: false
            });
        },
        removeTopicFromSidebar: function(slug) {
            $("li.topic-" + slug, "ul.sidebar-topics").remove();
            wpcomNewdash.loadTemplate({
                template: "read.php",
                target: false,
                doInsert: false
            });
        },
        addListToSidebar: function(html, scroll_to_top) {
            var sidebarListsList = $("ul#sidebar-lists-list");
            sidebarListsList.append(html);
            this.sortUL(sidebarListsList);
            if (scroll_to_top || undefined == scroll_to_top) {
                wpcomNewdashActions.scrollToTop();
            }
            wpcomNewdash.loadTemplate({
                template: "read.php",
                target: false,
                doInsert: false
            });
        },
        removeListFromSidebar: function(author, slug) {
            $("li.list-" + author + "-" + slug, "ul#sidebar-lists-list").remove();
            wpcomNewdash.loadTemplate({
                template: "read.php",
                target: false,
                doInsert: false
            });
        },
        updateListInSidebar: function(author, slug, title) {
            var previousUrlPath = wpcomNewdash.router.currentRoute;
            var newUrlPath = "/" + previousUrlPath[0] + "/" + previousUrlPath[1] + "/" + previousUrlPath[2] + "/" + slug + "/";
            var sidebarListsList = $("ul#sidebar-lists-list");
            var sidebarListsListTitle = $("ul#sidebar-lists-list li.list-" + author + "-" + slug + " a.list-title");
            var sidebarListsListEdit = $("ul#sidebar-lists-list li.list-" + author + "-" + slug + " a.sidebar-list-edit");
            sidebarListsListTitle.text(title);
            sidebarListsListTitle.prop("href", newUrlPath);
            sidebarListsListEdit.prop("href", newUrlPath + "edit");
            this.sortUL(sidebarListsList);
            window.history.replaceState("", "Edit Page with New Slug", newUrlPath + "edit");
            wpcomNewdash.loadTemplate({
                template: "read.php",
                target: false,
                doInsert: false
            });
        },
        toggleListFollow: function(listAuthor, listSlug, isFollowing) {
            var $buttoncontainer = $("#reader-content .list-buttons");
            if (isFollowing) button = templateFactory.fetch("unfollow-list-button", {
                list_author: listAuthor,
                list_slug: listSlug
            }); else button = templateFactory.fetch("follow-list-button", {
                list_author: listAuthor,
                list_slug: listSlug
            });
            $buttoncontainer.html(button);
        },
        followList: function(listAuthor, listSlug, follow) {
            wpcomReader.toggleListFollow(listAuthor, listSlug, follow);
            jQuery.wpcom_proxy_request({
                method: "POST",
                path: "/read/list/" + listAuthor + "/" + listSlug + "/" + (follow ? "follow" : "unfollow")
            }, function(response) {
                wpcomReader.toggleListFollow(listAuthor, listSlug, response.following);
                if (follow) {
                    wpcomReader.addListToSidebar('<li class="list-list list-' + listAuthor + "-" + listSlug + '"><a href="' + response.url + '" class="list-title selected">' + jQuery("<div/>").html(response.title).text() + "</a></li>", false);
                } else {
                    wpcomReader.removeListFromSidebar(listAuthor, listSlug);
                }
                wpcomNewdash.loadTemplate({
                    template: "read.php",
                    target: false,
                    doInsert: false
                });
            });
        },
        removeListItemFromManage: function(item_id) {
            $("#item-" + item_id).remove();
            wpcomNewdash.loadTemplate({
                template: "read.php",
                target: false,
                doInsert: false
            });
        },
        addItemToListOfItems: function(html) {
            var ListItemsList = $("tbody");
            ListItemsList.append(html);
            wpcomNewdash.loadTemplate({
                template: "read.php",
                target: false,
                doInsert: false
            });
        },
        topicsTabs: function() {
            var topicsTabs = $("#topics-tabs");
            if (!topicsTabs.length) {
                return;
            }
            $("#topics-widget").addClass("visible");
            if (!this.topicTabSelected) {
                var targetTabId = topicsTabs.find(".tab-body").first().attr("id");
                this.selectTopicTab("#" + targetTabId);
            } else {
                this.selectTopicTab(this.topicTabSelected);
            }
            topicsTabs.find(".tab-headings li a").off("click.topicsTabs");
            topicsTabs.find(".tab-headings li a").on("click.topicsTabs", function(e) {
                e.preventDefault();
                var targetTabId = $(e.target).attr("href");
                wpcomReader.selectTopicTab(targetTabId);
            });
        },
        selectTopicTab: function(tabId) {
            this.topicTabSelected = tabId;
            var topicsTabs = $("#topics-tabs");
            var tabBody = topicsTabs.find(tabId);
            var tabHeader = topicsTabs.find('.tab-headings li a[href="' + tabId + '"]');
            topicsTabs.find(".tab-headings li").removeClass("active");
            topicsTabs.find(".tab-body").removeClass("active");
            tabHeader.parent().addClass("active");
            tabBody.addClass("active");
        },
        bindDismissNoticeEvent: function() {
            $(document).on("click", ".dismiss-notice", function(event) {
                event.preventDefault();
                $(this).closest(".notice").slideUp(300);
            });
        },
        unload: function() {
            if (!wpcomNewdash.router) return;
            var route = wpcomNewdash.router.getRoute(), re = /read\/post\/(feed|id)/;
            if (!re.test(route.join("/"))) {
                while (this.unloadRegistry.length) {
                    this.unloadRegistry.pop()(route);
                }
            }
        }
    };
    var wpcomManage = {
        loadManage: function(route) {
            var skipPageLoadTracking;
            if (!route[1]) {
                return;
            }
            $("#footer").removeClass("show");
            skipPageLoadTracking = "change-theme" === route[0] || "sharing" === route[0] ? true : false;
            if (!$("#main").find(".my-blog").length) {
                wpcomNewdash.highlightMenu("my-sites");
                wpcomNewdash.loadTemplate({
                    template: "my-blogs/my-blog.php",
                    doAbort: false,
                    skipPageLoadTracking: skipPageLoadTracking
                }).done(function() {
                    setTimeout(function() {
                        $(document).trigger("my-blog-rendered.wpcom-newdash");
                    });
                    require([ "myBlog" ], function(wpcomMyBlog) {
                        wpcomMyBlog.init();
                    });
                });
            } else {
                setTimeout(function() {
                    $(document).trigger("my-blog-rendered.wpcom-newdash");
                });
            }
        },
        unload: function() {
            $(document).off("my-blog-rendered.wpcom-newdash");
            $("html").removeClass("iframed");
            $("#reader-content").attr("class", "right-column-inner");
            wpcomReader.unload();
        }
    };
    wpcomNewdash.bump_stat = function(group, statName) {
        statUtils.bumpStat.apply(this, [ group, statName ]);
    };
    window.wpcom_newdash = wpcomNewdash;
    window.wpcomNewdash = wpcomNewdash;
    window.wpcomNewdashActions = wpcomNewdashActions;
    window.wpcomReader = wpcomReader;
    window.wpcomNewdashRenderer = wpcomNewdashRenderer;
    $(document).ready(function() {
        wpcomNewdash.init();
    });
});

(function($) {
    var $event = $.event, $special, resizeTimeout;
    $special = $event.special.debouncedresize = {
        setup: function() {
            $(this).on("resize", $special.handler);
        },
        teardown: function() {
            $(this).off("resize", $special.handler);
        },
        handler: function(event, execAsap) {
            var context = this, args = arguments, dispatch = function() {
                event.type = "debouncedresize";
                $event.dispatch.apply(context, args);
            };
            if (resizeTimeout) {
                clearTimeout(resizeTimeout);
            }
            execAsap ? dispatch() : resizeTimeout = setTimeout(dispatch, $special.threshold);
        },
        threshold: 150
    };
})(jQuery);

define("main", function() {});

define("TemplateElView", [], function() {
    var TemplateElView = Backbone.View.extend({
        initialize: function() {
            this.listenTo(this.model, "remove", this.unload);
            if ("function" === typeof this.template && !(this.template instanceof Hogan.Template)) {
                this.template = this.template(this.model);
            }
            if (!(this.template instanceof Hogan.Template)) {
                this.template = Hogan.compile(this.template);
            }
            this.partials = {};
            this.render();
        },
        preRender: function() {},
        render: function() {
            var $templateEl, $oldEl = this.$el;
            this.preRender();
            $templateEl = jQuery(this.template.render(this.model.toJSON(), this.partials));
            this.setElement($templateEl);
            $oldEl.replaceWith($templateEl);
            this.postRender();
        },
        postRender: function() {},
        unload: function() {
            this.remove();
        }
    });
    return TemplateElView;
});

define("PostView", [ "TemplateElView", "templateFactory", "ActionButtonsView", "FollowPillButtonView", "FullPostModel" ], function(TemplateElView, templateFactory, ActionButtonsView, FollowPillButtonView, FullPostModel) {
    var $ = jQuery, WpcomPostView = TemplateElView.extend({
        initialize: function(options) {
            options = options || {};
            this.showReblogAction = options.showReblogAction;
            var self = this;
            this.listenTo(this.model, "change:post_time_since", function() {
                self.timeSinceUpdated();
            });
            TemplateElView.prototype.initialize.apply(this);
        },
        events: {
            openFullPostView: "viewPostClicked",
            click: "postBodyClicked",
            "click .post-title": "viewPostClicked",
            "click .media-link": "viewPostClicked",
            "click .post-topics a": "viewTopicClicked",
            "click .post-tags a": "viewTagClicked"
        },
        template: function(model) {
            var postFormatTemplates = [ "aside", "image", "link", "p2", "p2-xpost", "quote", "standard", "video", "activity" ], thisPostType = model.get("post_format");
            if (!thisPostType || $.inArray(thisPostType, postFormatTemplates) === -1) {
                this.model.set({
                    post_format: "standard"
                }, {
                    silent: "true"
                });
            }
            return templateFactory.fetch(model.get("post_format") + "-post");
        },
        preRender: function() {
            var comments, tagGroup, i;
            if ("activity" === this.model.get("post_format")) {
                this.partials["comment-list"] = templateFactory.fetch("comment-list");
                comments = this.model.get("comments");
                for (i in comments) {
                    comments[i] = jQuery.extend({
                        comments: []
                    }, comments[i]);
                }
                this.model.set("comments", comments);
            }
            if (!$("body").hasClass("logged-in")) {
                this.model.set("full_post_url", this.model.get("post_permalink"));
            }
            tagGroup = this.model.get("primary_tag");
            if (tagGroup) {
                tagGroup.name = _.unescape(tagGroup.name);
                this.model.set("primary_tag", tagGroup);
            }
            tagGroup = this.model.get("topics");
            if (tagGroup) {
                _.each(tagGroup, function(title, slug) {
                    tagGroup[slug] = _.unescape(title);
                });
                this.model.set("topics", tagGroup);
            }
        },
        postRender: function() {
            var showFollowAction = -1 !== $.inArray(this.model.collection.settings.stream_type, [ "topic", "fresh", "activities", "activities_comments", "postlike", "local" ]);
            if (FollowPillButtonView) {
                this.followPillButton = new FollowPillButtonView({
                    el: this.$el.find(".follow-button"),
                    model: this.model
                });
            }
            if (ActionButtonsView) {
                if (this.model.get("discover_post")) {
                    model = new FullPostModel(this.model.get("discover_post"));
                } else {
                    model = this.model;
                }
                this.actionButtons = new ActionButtonsView({
                    el: this.$el.find(".actions"),
                    model: model,
                    showFollowAction: showFollowAction,
                    showReblogAction: this.showReblogAction
                });
            }
        },
        postBodyClicked: function(ev) {
            if (!window.wpcomNewdashFeatures.reader_shorten_a8c) {
                return true;
            }
            if (ev && "undefined" !== ev.target.href && ev.target.href) {
                return true;
            }
            this.viewPostClicked();
        },
        viewPostClicked: function(ev) {
            this.model.trigger("viewPostClicked");
            if (ev) {
                if (ev.which > 1 || ev.shiftKey || ev.altKey || ev.metaKey || ev.ctrlKey) {
                    return;
                }
                ev.preventDefault();
                ev.stopPropagation();
            }
            var url = this.model.get("full_post_url");
            if (window.wpcomNewdash && window.wpcomNewdash.router) {
                window.wpcomNewdash.router.setRoute(url);
            } else {
                window.location = url;
            }
        },
        viewTopicClicked: function() {
            this.model.trigger("viewTopicClicked");
        },
        viewTagClicked: function() {
            this.model.trigger("viewTagClicked");
        },
        timeSinceUpdated: function() {
            this.$el.find(".time-since").text(this.model.get("post_time_since"));
        }
    });
    return WpcomPostView;
});

define("StreamPostView", [ "PostView", "templateFactory" ], function(PostView, templateFactory) {
    var WpcomStreamPostView = PostView.extend({
        preRender: function() {
            PostView.prototype.preRender.apply(this);
            this.partials["post-meta"] = templateFactory.fetch("post-meta");
        }
    });
    return WpcomStreamPostView;
});

define("Post", [], function() {
    return Backbone.Model.extend({});
});

define("PostCollection", [ "Post" ], function(Post) {
    var PostCollection = Backbone.Collection.extend({
        model: Post,
        initialize: function(models, options) {
            this.settings = {
                per_page: options.per_page || 7,
                stream_type: options.stream_type || "following",
                location: options.location || "",
                location_name: options.location_name || "",
                google_places_reference: options.google_places_reference || "",
                action: options.action || null,
                offset: options.offset || "",
                filter: options.filter || "",
                slug: options.slug || "",
                blog_id: options.blog_id || "",
                feed_id: options.feed_id || "",
                list_author: options.list_author || "",
                list_slug: options.list_slug || "",
                post_status: options.post_status || "",
                post_type: options.post_type || ""
            };
            if (!options.useServerOrdering) {
                this.comparator = function(post) {
                    return -post.get("post_timestamp");
                };
            }
            this.metadata = options.metadata || {};
        },
        url: function() {
            var lastModel = this.at(this.length - 1), before = lastModel ? lastModel.get("post_timestamp") : "";
            return "/wp-admin/admin-ajax.php?action=get_" + this.settings.stream_type + "_posts&before=" + before;
        }
    });
    return PostCollection;
});

define("ReaderPostCollection", [ "PostCollection", "localStorage", "urlUtils" ], function(PostCollection, localStorage, urlUtils) {
    var $ = jQuery, WpcomReaderPostCollection = PostCollection.extend({
        initialize: function(models, options) {
            this.isDestroying = false;
            if (options.cachingEnabled) {
                this.cachingEnabled = true;
                this.on("change", this.syncCache, this);
                this.on("sync", this.syncCache, this);
                this.on("new_posts_added", this.syncCache, this);
                this.on("cache_bootstrap", this.syncCache, this);
                this.on("change:is_following", this.updateIsFollowing, this);
            }
            this.baseUrl = options.baseUrl || function() {
                return "";
            };
            var self = this;
            clearInterval(this.timeSinceUpdater);
            this.timeSinceUpdater = setInterval(function() {
                self.updateTimeSince();
            }, 6e4);
            PostCollection.prototype.initialize.apply(this, [ models, options ]);
        },
        url: function(options) {
            options = options || {
                getPostsSinceCurrentLatest: false
            };
            var lastModel = this.at(this.length - 1), firstModel = this.at(0), before = false === options.getPostsSinceCurrentLatest && lastModel ? lastModel.get("post_timestamp") : "", after = options.getPostsSinceCurrentLatest && firstModel ? firstModel.get("post_timestamp") : "", perPage = options.getPostsSinceCurrentLatest ? "" : this.settings.per_page, voyeurRegex = new RegExp("[\\?&]voyeur=([^&#]*)"), voyeurResults = voyeurRegex.exec(window.location.href), voyeur = voyeurResults !== null ? voyeurResults[1] : "", action = this.settings.action ? this.settings.action : "get_" + this.settings.stream_type + "_posts", args = {
                action: action,
                per_page: perPage,
                before: before,
                after: after,
                slug: this.settings.slug,
                blog_id: this.settings.blog_id,
                feed_id: this.settings.feed_id,
                list_author: this.settings.list_author,
                list_slug: this.settings.list_slug,
                location: this.settings.location,
                location_name: this.settings.location_name,
                google_places_reference: this.settings.google_places_reference,
                offset: this.settings.offset,
                filter: this.settings.filter,
                post_status: this.settings.post_status,
                post_type: this.settings.post_type,
                voyeur: voyeur
            };
            return urlUtils.urlAddParams(this.baseUrl(), $.param(args));
        },
        latestPostsStorageKey: function() {
            return this.settings.stream_type + this.settings.slug + "_b_" + this.settings.blog_id + "_f_" + this.settings.feed_id + "_list_" + this.settings.list_author + "_" + this.settings.list_slug + "_l_" + this.settings.location + "_posts.latest";
        },
        syncCache: function() {
            var cache = {
                posts: []
            }, existingCache = this.getCache() || cache, existingMetadata = _.omit(existingCache, "posts"), newPosts = this.toJSON(), newMetadata = this.metadata, updateCache = false;
            if (newPosts.length > 0) {
                cache.posts = _.uniq(newPosts.concat(existingCache.posts), false, function(post) {
                    if (post.feed_id) {
                        return post.feed_id + ":" + post.feed_item_id;
                    }
                    return post.blog_id + ":" + post.ID;
                });
                if (cache.posts.length > this.settings.per_page) {
                    cache.posts.length = this.settings.per_page;
                }
                updateCache = true;
            } else {
                cache.posts = existingCache.posts;
            }
            if (JSON.stringify(existingMetadata) !== JSON.stringify(newMetadata)) {
                _.extend(cache, newMetadata);
                updateCache = true;
            } else {
                _.extend(cache, existingMetadata);
            }
            if (updateCache) {
                this.setCache(cache);
            }
        },
        hasCache: function() {
            return false !== this.getCache();
        },
        getCache: function() {
            var cache = localStorage.get(this.latestPostsStorageKey());
            if (null !== cache && (cache = JSON.parse(cache)) && cache.posts) {
                return cache;
            }
            return false;
        },
        setCache: function(data) {
            localStorage.set(this.latestPostsStorageKey(), JSON.stringify(data));
        },
        sync: function(method, model, options) {
            var cache, useCache = false, isNewerPostsRequest = options.getPostsSinceCurrentLatest || false, isLatestPostsRequest = !isNewerPostsRequest && this.length === 0, isOlderPostsRequest = !isNewerPostsRequest && !isLatestPostsRequest, thisCollection = this, dfd = $.Deferred();
            if (this.isDestroying) {
                return;
            }
            if (false === isNewerPostsRequest) {
                this.trigger("request");
                if (isLatestPostsRequest && thisCollection.cachingEnabled) {
                    cache = this.getCache();
                    if (cache && cache.posts && cache.posts.length) {
                        useCache = true;
                    }
                }
            }
            if (useCache) {
                options.success(cache);
                dfd.resolve();
                return dfd;
            } else {
                return $.getJSON(this.url({
                    getPostsSinceCurrentLatest: isNewerPostsRequest
                }), this.apiParams, function(data, textStatus) {
                    var postsFound;
                    if (textStatus !== "success" && textStatus !== 200 || !data) {
                        options.error();
                    } else {
                        postsFound = data.posts ? 0 < data.posts.length : false;
                        if (!postsFound && isLatestPostsRequest) {
                            thisCollection.trigger("noLatestItemsAvailable");
                        } else if (!postsFound && isOlderPostsRequest) {
                            thisCollection.trigger("noOlderItemsAvailable");
                        }
                        if (isNewerPostsRequest) {
                            thisCollection.trigger("finishedCheckingForNewPosts");
                            if (postsFound) {
                                thisCollection.add(thisCollection.parse(data));
                                thisCollection.trigger("new_posts_added");
                            }
                        } else {
                            options.success(data);
                        }
                    }
                });
            }
        },
        parse: function(response) {
            var posts = response.posts;
            this.metadata = _.omit(response, "posts");
            _.each(posts, function(post) {
                if (!post.post_id && post.ID) {
                    post.post_id = post.ID;
                }
            });
            return posts;
        },
        checkForNewPosts: function() {
            this.trigger("checking_for_new_posts");
            this.fetch({
                remove: false,
                getPostsSinceCurrentLatest: true
            });
            this.checkForNewPostsPoller = setTimeout(jQuery.proxy(this.checkForNewPosts, this), 15e3);
        },
        updateIsFollowing: function(model, value) {
            var models;
            if (model.get("blog_id")) {
                models = this.where({
                    blog_id: model.get("blog_id")
                });
            } else {
                models = this.where({
                    feed_id: model.get("feed_id")
                });
            }
            _.each(models, function(model) {
                model.set("is_following", value);
            });
        },
        unload: function() {
            this.isDestroying = true;
            clearTimeout(this.checkForNewPostsPoller);
            clearInterval(this.timeSinceUpdater);
            this.remove(this.models);
            this.trigger("unload");
        },
        updateTimeSince: function() {
            this.invoke("updateTimeSince");
        }
    });
    return WpcomReaderPostCollection;
});

define("InfiniteScrollView", [ "statUtils" ], function(statUtils) {
    return Backbone.View.extend({
        initialize: function(options) {
            this.infiniteScrollEnabled = options.infiniteScrollEnabled === false ? false : true;
            this.itemView = options.itemView;
            this.listenTo(this.collection, "add", this.addItem);
            this.listenTo(this.collection, "remove", this.removeItem);
            this.listenTo(this.collection, "request", this.showSpinner);
            this.listenTo(this.collection, "sync", this.hideSpinner);
            this.listenTo(this.collection, "unload", this.unload);
            this.listenTo(this.collection, "noOlderItemsAvailable", this.noOlderItemsAvailable);
            this.listenTo(this.collection, "noLatestItemsAvailable", this.noLatestItemsAvailable);
            this.renderedItems = [];
            this.unrenderedItems = [];
            this.bootstrap();
            this.startScrollObserver();
        },
        bootstrap: function() {
            this.$el.empty();
            this.collection.each(this.addItem, this);
        },
        removeItem: function(model) {
            var target = _.find(this.renderedItems, function(item) {
                return item.model.cid === model.cid;
            });
            this.renderedItems = _.without(this.renderedItems, target);
        },
        addItem: function(model) {
            this.trigger("addingItem", model);
            var item, newItemIndex = this.collection.indexOf(model), firstRenderedItemIndex = this.renderedItems[0] ? this.collection.indexOf(this.renderedItems[0].model) : -1, doPrepend = newItemIndex < firstRenderedItemIndex;
            if (doPrepend) {
                this.unrenderedItems.push(model);
                this.trigger("newerViewsAvailable", this.unrenderedItems.length);
            } else {
                item = new this.itemView({
                    model: model
                });
                this.$el.append(item.$el);
                this.registerRenderedItem(item, model, false);
                this.trigger("itemRendered", item);
            }
        },
        registerRenderedItem: function(view, model, is_prepend) {
            var attachMethod = is_prepend ? "unshift" : "push";
            this.renderedItems[attachMethod]({
                model: model,
                view: view
            });
        },
        removeAllRenderedItems: function() {
            _.each(this.renderedItems, function(item) {
                item.model.destroy();
            });
        },
        renderNewerItems: function() {
            var sortedItems = _.sortBy(this.unrenderedItems, this.collection.comparator);
            this.unrenderedItems = sortedItems;
            var newItemModel, newItemView, firstItem = this.renderedItems[0] ? this.renderedItems[0].view.$el : [];
            while (this.unrenderedItems.length) {
                newItemModel = this.unrenderedItems.pop();
                newItemView = new this.itemView({
                    model: newItemModel
                });
                if (firstItem.length) {
                    newItemView.$el.insertBefore(firstItem);
                } else {
                    this.$el.append(newItemView.$el);
                }
                firstItem = newItemView.$el;
                this.registerRenderedItem(newItemView, newItemModel, true);
            }
        },
        startScrollObserver: function() {
            if (this.infiniteScrollEnabled) {
                this.interval = setInterval(jQuery.proxy(this.scrollHandler, this), 50);
            } else {
                this.trigger(this.noItemsType);
            }
        },
        stopScrollObserver: function() {
            clearInterval(this.interval);
        },
        shouldLoadMore: function() {
            return jQuery(window).scrollTop() >= jQuery(document).height() - jQuery(window).height() - (jQuery(document).height() - jQuery(window).height()) * .2;
        },
        noOlderItemsAvailable: function() {
            this.noItemsType = "noOlderItemsAvailable";
            this.infiniteScrollEnabled = false;
        },
        noLatestItemsAvailable: function() {
            this.noItemsType = "noLatestItemsAvailable";
            this.infiniteScrollEnabled = false;
        },
        scrollHandler: function() {
            if (this.shouldLoadMore()) {
                this.collection.fetch({
                    remove: false,
                    success: _.bind(this.trigger, this, "finishedCheckingForOlderItems")
                });
            }
        },
        showSpinner: function() {
            this.stopScrollObserver();
            this.trigger("checkingForOlderItems");
        },
        hideSpinner: function() {
            this.startScrollObserver();
            if (this.collection.length > this.collection.settings.per_page) {
                statUtils.bumpStat("newdash_pageviews", "scroll");
            }
        },
        unload: function() {
            this.stopScrollObserver();
            delete this.interval;
            delete this.renderedItems;
            delete this.unrenderedItems;
            this.stopListening();
        }
    });
});

define("NoPostsView", [ "TemplateElView", "templateFactory" ], function(TemplateElView, templateFactory) {
    var WpcomNoPostsView = TemplateElView.extend({
        initialize: function(options) {
            options = options || {};
            this.noPostTemplate = options.noPostTemplate;
            this.model = new Backbone.Model();
            TemplateElView.prototype.initialize.apply(this);
        },
        template: function() {
            return templateFactory.fetch(this.noPostTemplate, "no-data");
        }
    });
    return WpcomNoPostsView;
});

define("PostStream", [ "StreamPostView", "ReaderPostCollection", "FullPostModel", "InfiniteScrollView", "NoPostsView", "wpcomReaderConstants", "newdashI18n" ], function(WpcomStreamPostView, WpcomReaderPostCollection, WpcomReaderFullPostModel, InfiniteScrollView, WpcomNoPostsView, wpcomReaderConstants, newdashI18n) {
    var $ = jQuery, WpcomPostStream = Backbone.View.extend({
        events: {
            "click .new-post-notify": "renderNewPosts",
            renderNewPosts: "renderNewPosts"
        },
        initialize: function(models, options) {
            var container = options.container || $("#reader-content"), infiniteScrollEnabled = options.infiniteScrollEnabled === false ? false : true, cachingEnabled = options.cachingEnabled === false ? false : true, collectionType = options.collectionType || WpcomReaderPostCollection, itemView = options.itemView || WpcomStreamPostView, metadata = options.metadata || {};
            this.setElement(container);
            this.bootstrap = options.bootstrap || [];
            this.pollForNewPostsEnabled = options.pollForNewPostsEnabled === false ? false : true;
            this.noPostTemplate = options.noPostTemplate || false;
            this.pageTitle = options.pageTitle || wpcomReaderConstants.initialPageTitle;
            this.collection = new collectionType(this.bootstrap, {
                model: WpcomReaderFullPostModel,
                per_page: options.per_page || 7,
                stream_type: options.stream_type || "following",
                location: options.location || "",
                location_name: options.location_name || "",
                google_places_reference: options.google_places_reference || "",
                action: options.action || "",
                offset: options.offset || "",
                filter: options.filter || "",
                slug: options.slug || "",
                blog_id: options.blog_id || "",
                feed_id: options.feed_id || "",
                list_author: options.list_author || "",
                list_slug: options.list_slug || "",
                group: options.group || "",
                post_status: options.post_status || "",
                post_type: options.post_type || "",
                useServerOrdering: options.useServerOrdering || false,
                cachingEnabled: cachingEnabled,
                baseUrl: options.baseUrl,
                metadata: metadata
            });
            this.view = new InfiniteScrollView({
                el: container,
                collection: this.collection,
                itemView: itemView,
                infiniteScrollEnabled: infiniteScrollEnabled
            });
            this.listenTo(this.view, "noOlderItemsAvailable", this.noOlderItems);
            this.listenTo(this.view, "noLatestItemsAvailable", this.noLatestItems);
            this.listenTo(this.view, "finishedCheckingForOlderItems", this.finishedCheckingForOlderItems);
            this.listenTo(this.view, "newerViewsAvailable", this.newerPostsAvailable);
            this.listenTo(this.view, "checkingForOlderItems", this.checkingForOlderItems);
            this.listenTo(this.view, "itemRendered", this.removeNoLatestItems);
            _.bindAll(this, "firstRender");
        },
        start: function() {
            if (0 === this.bootstrap.length) {
                this.collection.fetch({
                    success: this.firstRender
                });
            } else {
                this.collection.trigger("cache_bootstrap");
                this.firstRender();
            }
        },
        firstRender: function() {
            this.trigger("beforeFirstRender");
            var loading = this.$el.find(".loading");
            loading.remove();
            this.$el.append(this.view.render().$el);
            if (!this.collection.isDestroying) {
                this.trigger("afterFirstRender");
            }
            if (this.pollForNewPostsEnabled) {
                this.collection.checkForNewPosts();
            }
        },
        resetNewPostsIndicator: function() {
            this.$el.find("div.page-activity").html("");
        },
        checkingForOlderItems: function() {
            if (!this.$el.find("#subs-loading").length && (this.$el.find("div.sub:first div:first").hasClass("sub-avatar") || this.$el.find("div.sub:first div.sub-body-content").length > 0)) {
                this.$el.children(":last").after('<div id="subs-loading"><span></span>' + newdashI18n.get([ "post_stream", "Wait, there's more!" ]) + "</div>");
                this.$el.find("#subs-loading").hide().fadeIn("fast");
            }
            this.trigger("checkingForOlderItems");
        },
        finishedCheckingForOlderItems: function() {
            this.$el.find("#subs-loading").remove();
            this.trigger("finishedCheckingForOlderItems");
        },
        newerPostsAvailable: function(postCount) {
            var countText = newdashI18n.get([ "post_stream", "new posts" ]);
            this.removeNoLatestItems();
            if (postCount > 20) {
                this.renderNewPosts();
                return;
            }
            if (1 === postCount) {
                countText = newdashI18n.get([ "post_stream", "new post" ]);
            }
            if (!this.$el.find("div.new-post-notify").length) {
                this.$el.find("div.page-activity").html('<div class="new-post-notify"><span class="count">' + postCount + '</span> <span class="count-text">' + countText + "</span></div>");
                this.$el.find("div.new-post-notify").fadeIn("fast");
            } else {
                this.$el.find("div.new-post-notify span.count").html(postCount);
                this.$el.find("div.new-post-notify span.count-text").html(countText);
            }
            this.setTitle("(" + postCount + ")");
        },
        noOlderItems: function() {},
        setTitle: function(title) {
            var pageTitle = this.pageTitle;
            if ("function" === typeof this.pageTitle) {
                pageTitle = this.pageTitle();
            }
            if (title) {
                pageTitle = title + " " + pageTitle;
            }
            document.title = pageTitle;
        },
        noLatestItems: function() {
            if (this.noPostTemplate) {
                this.noPostsView = new WpcomNoPostsView({
                    noPostTemplate: this.noPostTemplate
                });
                this.$el.append(this.noPostsView.$el);
            }
        },
        removeNoLatestItems: function() {
            if (this.noPostsView) {
                this.noPostsView.remove();
            }
        },
        renderNewPosts: function() {
            if (this.view.unrenderedItems.length >= this.collection.settings.per_page) {
                this.view.removeAllRenderedItems();
            }
            this.view.renderNewerItems();
            this.resetNewPostsIndicator();
            this.setTitle();
            this.trigger("newPostsRendered");
        },
        unload: function() {
            this.resetNewPostsIndicator();
            this.undelegateEvents();
            this.collection.unload();
        }
    });
    return WpcomPostStream;
});

define("ReaderPostStreamBase", [ "PostStream", "urlUtils", "statUtils" ], function(WpcomPostStream, urlUtils, statUtils) {
    var WpcomPostStreamBase = WpcomPostStream.extend({
        initialize: function(models, options) {
            options.baseUrl = urlUtils.getAjaxUrl;
            options.pageTitle = wpcomNewdash.getTitle;
            this.on("afterFirstRender", this.recordStreamView, this);
            this.on("beforeFirstRender", this.canManagePages, this);
            this.on("finishedCheckingForOlderItems", this.recordInfiniteScrollEvent, this);
            this.on("newPostsRendered", this.recordNewPostsRendered, this);
            WpcomPostStream.prototype.initialize.apply(this, [ models, options ]);
        },
        recordInfiniteScrollEvent: function() {
            statUtils.bumpStat("reader_views", this.collection.settings.stream_type + "_scroll");
            this.recordInGA(this.collection.settings.stream_type);
            statUtils.recordEvent("Reader", "Loaded Next Page", this.collection.settings.stream_type);
        },
        recordStreamView: function() {
            statUtils.bumpStat("reader_views", this.collection.settings.stream_type + "_load");
            this.recordInGA(this.collection.settings.stream_type);
            if (wpcomNewdash.trackPageLoad) {
                wpcomNewdash.trackPageLoad({
                    Data_Cached: this.collection.hasCache()
                });
            }
        },
        recordNewPostsRendered: function() {
            statUtils.bumpStat("reader_views", this.collection.settings.stream_type + "_load_new");
            this.recordInGA(this.collection.settings.stream_type);
            statUtils.recordEvent("Reader", "Clicked Load New Posts", this.collection.settings.stream_type);
        },
        canManagePages: function() {},
        recordInGA: function(stream_type) {
            switch (stream_type) {
              case "following":
                statUtils.recordPageView("/", "Reader > Following");
                break;

              case "postlike":
                statUtils.recordPageView("/activities/likes", "Reader > Posts I Like");
                break;

              case "fresh":
                statUtils.recordPageView("/fresh", "Reader > Freshly Pressed");
                break;

              case "local":
                statUtils.recordPageView("/read/local", "Reader > Local");
                break;

              case "list":
                statUtils.recordPageView("/read/list/:slug", "Reader > List");
                break;

              case "topic":
                statUtils.recordPageView("/tag/:slug", "Reader > Single Tag Stream");
                break;

              case "fp":
                statUtils.recordPageView("/read/fp", "Reader > Freshly Pressed Admin Stream");
                break;
            }
        }
    });
    return WpcomPostStreamBase;
});

define("ReaderPostStream", [ "ReaderPostStreamBase", "templateFactory" ], function(ReaderPostStreamBase, templateFactory) {
    var WpcomReaderPostStream = ReaderPostStreamBase.extend({
        noOlderItems: function() {
            var html = templateFactory.fetch("no-more-results", "no-data");
            this.$el.children(":last").after(html);
        }
    });
    return WpcomReaderPostStream;
});

define("following", [ "ReaderPostStream" ], function(ReaderPostStream) {
    var init = function() {
        var streamType = "following", following, bootstrap = window.wpcom.bootstrap && window.wpcom.bootstrap.following && window.wpcom.bootstrap.following.posts ? window.wpcom.bootstrap.following.posts : [], metadata = window.wpcom.bootstrap && window.wpcom.bootstrap.following ? _.omit(window.wpcom.bootstrap.following, "posts") : {};
        wpcomReader.selectMenuItem(streamType);
        wpcomReader.showLoading(streamType);
        following = new ReaderPostStream({}, {
            stream_type: streamType,
            noPostTemplate: "no-post-following",
            bootstrap: bootstrap,
            metadata: metadata
        });
        following.on("afterFirstRender", function() {
            if (window.wpcom.bootstrap && window.wpcom.bootstrap.following) {
                delete window.wpcom.bootstrap.following;
            }
            var pageTitle = window.wpcomNewdashRenderer.markupHeader(following.collection.metadata.title);
            following.$el.prepend(pageTitle);
            wpcomReader.hideLoading();
        }, this);
        following.start();
        wpcomReader.activeCollection = following.collection;
        wpcomReader.unloadRegistry.push(function() {
            following.unload();
        });
    };
    return {
        init: init
    };
});

define("fresh", [ "ReaderPostStream", "templateFactory", "statUtils" ], function(ReaderPostStream, templateFactory, statUtils) {
    var $ = jQuery, init = function() {
        var $readerContent = $("#reader-content"), isListView = window.wpcomNewdash.readCookie("newdash-fp-list"), perPage = 9, streamType = "fresh", freshlyPressed, bootstrap = window.wpcom.bootstrap && window.wpcom.bootstrap.fresh && window.wpcom.bootstrap.fresh.posts ? window.wpcom.bootstrap.fresh.posts : [], metadata = window.wpcom.bootstrap && window.wpcom.bootstrap.fresh ? _.omit(window.wpcom.bootstrap.fresh, "posts") : {};
        window.wpcomReader.selectMenuItem(streamType);
        window.wpcomReader.showLoading(streamType);
        if (!isListView) {
            $readerContent.addClass("grid");
        }
        freshlyPressed = new ReaderPostStream({}, {
            per_page: perPage,
            stream_type: streamType,
            bootstrap: bootstrap,
            metadata: metadata
        });
        freshlyPressed.on("afterFirstRender", function() {
            var pageTitle = window.wpcomNewdashRenderer.markupHeader(freshlyPressed.collection.metadata.title), toggleUI;
            if (window.wpcom.bootstrap && window.wpcom.bootstrap.fresh) {
                delete window.wpcom.bootstrap.fresh;
            }
            freshlyPressed.$el.prepend(pageTitle);
            window.wpcomReader.hideLoading();
            $(templateFactory.fetch("post-view-toggle", {})).insertBefore(freshlyPressed.$el.find(".reader-header .page-activity"));
            toggleUI = freshlyPressed.$el.find("#view-toggle");
            if (isListView) toggleUI.children("a#list-full").addClass("current"); else toggleUI.children("a#grid-full").addClass("current");
            toggleUI.off("click.view-toggle").on("click.view-toggle", "a", function(e) {
                e.preventDefault();
                toggleUI.find("a").removeClass("current");
                var view = $(this).addClass("current").attr("id").replace("-full", "");
                if ("grid" == view) {
                    $readerContent.addClass("grid");
                    window.wpcomNewdash.clearCookie("newdash-fp-list");
                    statUtils.bumpStat("reader_actions", "selected_grid_view");
                } else {
                    $readerContent.removeClass("grid");
                    window.wpcomNewdash.writeCookie("newdash-fp-list", "grid", 21);
                    statUtils.bumpStat("reader_actions", "selected_list_view");
                }
            });
        }, this);
        freshlyPressed.collection.on("viewPostClicked viewTagClicked", function() {
            statUtils.bumpStat("freshly_pressed_clicks", "view_post");
        });
        freshlyPressed.collection.on("viewTopicClicked", function() {
            statUtils.bumpStat("freshly_pressed_clicks", "view_topic");
        });
        window.wpcomReader.activeCollection = freshlyPressed.collection;
        freshlyPressed.start();
        window.wpcomReader.unloadRegistry.push(function() {
            freshlyPressed.unload();
        });
    };
    return {
        init: init
    };
});

define("NoticeModel", [], function() {
    var NoticeModel = Backbone.Model.extend({});
    return NoticeModel;
});

define("NoticeView", [ "templateFactory", "NoticeModel" ], function(templateFactory, NoticeModel) {
    var $ = jQuery, NoticeView = Backbone.View.extend({
        model: NoticeModel,
        events: {
            "click .close": "hide"
        },
        initialize: function() {
            this.render();
        },
        hide: function() {
            this.remove();
            this.model.destroy();
        },
        render: function() {
            var pageContainer = $("#tab-content"), pageHeader = $(".reader-header"), noticesArea = $(".newdash-notices-area"), templateHtml;
            if (noticesArea.length < 1) {
                if (pageContainer.length < 1) {
                    return;
                }
                templateHtml = templateFactory.fetch("newdash-notices-area", {});
                if (pageHeader.length > 0) {
                    pageHeader.append(templateHtml);
                } else {
                    pageContainer.prepend(templateHtml);
                }
                noticesArea = $(".newdash-notices-area");
                if (noticesArea.length < 1) {
                    return;
                }
            }
            templateHtml = templateFactory.fetch("newdash-notice", this.model.attributes);
            this.setElement(templateHtml);
            noticesArea.append(this.$el);
        }
    });
    return NoticeView;
});

define("noticeUtils", [ "NoticeView", "NoticeModel" ], function(NoticeView, NoticeModel) {
    var noticeUtils = {
        _views: {},
        notice: function(message, options) {
            this._create("info", message, options);
        },
        success: function(message, options) {
            this._create("success", message, options);
        },
        error: function(message, options) {
            this._create("error", message, options);
        },
        _create: function(type, message, options) {
            var key, view = new NoticeView({
                model: new NoticeModel({
                    message: message,
                    type: type
                })
            });
            if (!_.isUndefined(options)) {
                key = options.key;
            }
            if (key) {
                this._views[key] = view;
            }
            window.scrollTo(0, 0);
        },
        hideKey: function(key) {
            if (!this._views[key]) {
                return;
            }
            this._views[key].hide();
            delete this._views[key];
        }
    };
    return noticeUtils;
});

define("readerManage", [ "localStorage", "urlUtils", "statUtils", "remoteAvatarFetch", "noticeUtils", "newdashI18n" ], function(localStorage, urlUtils, statUtils, remoteAvatarFetch, noticeUtils, newdashI18n) {
    var $ = jQuery, wpcomReaderManage = {
        request: false,
        init: function() {
            this.unload();
            $("#reader").on("click.wpcomReaderManage", "a#addblog_submit", function(e) {
                e.preventDefault();
                wpcomReaderManage.follow($(this));
            });
            $("#reader").on("click.wpcomReaderManage", "span.unsub", function(e) {
                e.preventDefault();
                wpcomReaderManage.unfollow($(this));
            });
            $("#reader").on("click.wpcomReaderManage", "a.delivery, .close-row a", function(e) {
                e.preventDefault();
                wpcomReaderManage.showDeliveryUI($(this));
            });
            $("#reader").on("keyup.wpcomReaderManage", "input#addblog", function(e) {
                var url = $("#addblog").val(), code;
                if (url.match(/http\:\/\/https?\:\/\//)) {
                    $("#addblog").val(url.replace("http://", ""));
                }
                code = e.keyCode ? e.keyCode : e.which;
                if (e.type == "keyup" && code != 13) {
                    return false;
                }
                wpcomReaderManage.follow();
                return false;
            });
            $("#reader").on("click.wpcomReaderManage", "ul.e-post", function(e) {
                wpcomReaderManage.changeEmailDelivery($(this), e);
            });
            $("#reader").on("click.wpcomReaderManage", "ul.e-comment", function(e) {
                wpcomReaderManage.changeCommentDelivery($(this), e);
            });
            $("#reader").on("submit.wpcomReaderManage", "form#manage-subs", function(e) {
                e.preventDefault();
            });
            $("#reader").on("click.wpcomReaderManage", "div#ordering a", function(e) {
                e.preventDefault();
                wpcomReaderManage.changeOrdering($(e.target));
            });
            localStorage.clear();
        },
        follow: function(link) {
            this.abortRequest();
            statUtils.recordEvent("Reader", "Clicked Follow Blog");
            $("span#subscribe-loading").removeClass("hide").spin("small");
            $("span.errortipwrap").hide();
            this.request = $.get(urlUtils.getAjaxUrl(), {
                action: "subscribe_to_blog",
                blog_url: $("input#addblog").val(),
                _wpnonce: $("input#subs").val(),
                source: "newdash"
            }, function(response) {
                $("tr#nosubs").remove();
                if (response.substr(0, 2) != "-1") {
                    $("table#blog-subs").find("tbody").prepend(response);
                    $("tr.new").hide();
                    $("tr.new").fadeIn(function() {
                        remoteAvatarFetch();
                    });
                    $("input#addblog").val("").focus();
                    var count = parseInt($("div#count").find("span").html(), 10) + 1;
                    $("div#count").find("span").html(count);
                    statUtils.bumpStat("reader_actions", "followed_blog");
                    statUtils.bumpStat("reader_follows", "following_edit");
                } else {
                    $("span.errortiptext").html(response.substr(2, response.length));
                    $("span.errortipwrap").fadeIn(150);
                }
                $("input#addblog").focus();
                $("span#subscribe-loading").addClass("hide");
            });
        },
        unfollow: function(link) {
            var followedBlogElement, blogId, feedId, blogUrl, feedUrl, nonce, _this = this;
            this.abortRequest();
            followedBlogElement = link.parents("tr");
            this.hideFollowedBlogElement(followedBlogElement);
            blogId = followedBlogElement.data("blog-id");
            feedId = followedBlogElement.data("feed-id");
            blogUrl = followedBlogElement.data("blog-url");
            feedUrl = followedBlogElement.data("feed-url");
            if (!blogUrl && feedUrl) {
                blogUrl = feedUrl;
            }
            nonce = $("input#subs").val();
            statUtils.recordEvent("Reader", "Clicked Unfollow Blog");
            if (!blogId && !feedId && !blogUrl) {
                console.error("Error: cannot find ID or URL to unsubscribe.");
                noticeUtils.error(newdashI18n.get([ "notices", "unfollow error" ]));
                this.showFollowedBlogElement(followedBlogElement);
                return;
            }
            this.request = $.get(urlUtils.getAjaxUrl(), {
                action: "ab_unsubscribe_from_blog",
                blog_id: blogId,
                feed_id: feedId,
                blog_url: feedUrl,
                _wpnonce: nonce
            });
            this.request.done(function(response) {
                if ("true" !== response) {
                    noticeUtils.error(newdashI18n.get([ "notices", "unfollow error" ]));
                    _this.showFollowedBlogElement(followedBlogElement);
                }
            }).fail(function() {
                noticeUtils.error(newdashI18n.get([ "notices", "unfollow error" ]));
                _this.showFollowedBlogElement(followedBlogElement);
            });
            window.wpcomNewdash.loadTemplate({
                template: "reader/edit-following.php",
                target: false,
                doInsert: false
            });
            statUtils.bumpStat("reader_actions", "unfollowed_blog");
            statUtils.bumpStat("reader_unfollows", "following_edit");
        },
        showFollowedBlogElement: function(element) {
            element.fadeIn(200, function() {
                var count = parseInt($("div#count").find("span").html(), 10);
                $("div#count").find("span").html(count);
            });
        },
        hideFollowedBlogElement: function(element) {
            $("#" + element.attr("id") + "-notifs").fadeOut(200);
            element.fadeOut(200, function() {
                var count = parseInt($("div#count").find("span").html(), 10) - 1;
                $("div#count").find("span").html(count);
            });
        },
        changeEmailDelivery: function(selector, e) {
            this.abortRequest();
            var parentTd = selector.parents("td"), id = parentTd.parents("tr").attr("id").replace("-notifs", ""), li = $(e.target), val, settingReq, sentenceReq;
            if (li.hasClass("selected")) {
                return;
            }
            val = li.attr("class");
            selector.children("li").removeClass("selected");
            li.addClass("selected");
            settingReq = $.get(urlUtils.getAjaxUrl(), {
                action: "email_delivery_change",
                subscription_source: "reader-edit",
                blog_id: id,
                setting: val,
                _wpnonce: $("input#delivery").val()
            }), sentenceReq = wpcomReaderManage.getSentenceText(parentTd);
            $.when(settingReq, sentenceReq).then(function(setting, sentence) {
                $("#" + id).find("em").html(sentence[0]);
            });
        },
        changeCommentDelivery: function(selector, e) {
            this.abortRequest();
            var parentTd = selector.parents("td"), id = parentTd.parents("tr").attr("id").replace("-notifs", ""), li = $(e.target), val, settingReq, sentenceReq;
            if (li.hasClass("selected")) {
                return;
            }
            val = li.attr("class");
            selector.children("li").removeClass("selected");
            li.addClass("selected");
            settingReq = $.get(urlUtils.getAjaxUrl(), {
                action: "comment_delivery_change",
                blog_id: id,
                setting: val,
                _wpnonce: $("input#delivery").val()
            }), sentenceReq = wpcomReaderManage.getSentenceText(parentTd);
            $.when(settingReq, sentenceReq).then(function(setting, sentence) {
                $("#" + id).find("em").html(sentence[0]);
            });
        },
        getSentenceText: function(parentTd) {
            var postSetting = parentTd.find("ul.e-post li.selected").attr("class").replace("selected", ""), commentSetting = parentTd.find("ul.e-comment li.selected").attr("class").replace("selected", "");
            return $.get(urlUtils.getAjaxUrl(), {
                action: "get_delivery_sentence",
                post_setting: postSetting,
                comment_setting: commentSetting
            });
        },
        showDeliveryUI: function(button) {
            var parentTr = button.parents("tr"), id = parentTr.attr("id") + "-notifs";
            $(".unsub").toggle();
            $("#blog-subs").find("tr.delivery").not("#" + id).hide();
            $("#" + id).toggle();
        },
        changeOrdering: function($target) {
            $("table#blog-subs").find("tr.meta li").removeClass("selected");
            $target.parent("li").addClass("selected");
            $("table#blog-subs").find("tbody").css("opacity", .4);
            var req = $.get(urlUtils.getAjaxUrl(), {
                action: "change_blog_ordering",
                order: $target.attr("id").replace("o-", ""),
                nonce: $("input#newdash_nonce").val()
            });
            req.success(function(result) {
                $("table#blog-subs").find("tbody").html(result);
                $("table#blog-subs").find("tbody").css("opacity", 1);
            });
        },
        abortRequest: function() {
            if ("object" === typeof wpcomReaderManage.request) {
                wpcomReaderManage.request.success = {};
                wpcomReaderManage.request.complete = {};
                wpcomReaderManage.request.abort();
            }
        },
        unload: function() {
            $("#reader").off(".wpcomReaderManage");
        }
    };
    return wpcomReaderManage;
});

define("ThemeOption", [ "urlUtils" ], function(urlUtils) {
    var $ = jQuery, ThemeOption = Backbone.Model.extend({
        url: function() {
            return "//public-api.wordpress.com/rest/v1.1/themes/" + this.id + "?extended=true";
        },
        matches: function(string) {
            var pattern, haystack, taxonomies = this.get("taxonomies");
            string = string.replace(" ", ")(?=.*");
            pattern = new RegExp("^(?=.*" + string + ").+", "i");
            haystack = [ this.get("name"), this.get("description"), this.get("author"), _.pick(taxonomies.picks, "name"), _.pick(taxonomies.subjects, "name"), _.pick(taxonomies.styles, "name"), _.pick(taxonomies.colors, "name"), _.pick(taxonomies.columns, "name"), _.pick(taxonomies.layouts, "name"), _.pick(taxonomies.features, "name") ].join(" ");
            return pattern.test(haystack);
        }
    });
    return ThemeOption;
});

define("ThemeCollection", [ "ThemeOption" ], function(ThemeOption) {
    var ThemeCollection = Backbone.Collection.extend({
        model: ThemeOption,
        initialize: function(models) {
            this.themesPerPage = 15, this.currentPage = 0;
            this.filters = {};
            this.availableFilters = {};
            this.defaultFilters = [];
            this.originalData = models;
            this.initializeFilters();
            this.doSort("trending");
        },
        unload: function() {
            this.remove(this.models);
            this.originalData = null;
        },
        paginated: function() {
            var tail = this.rest(this.currentPage * this.themesPerPage);
            return _.first(tail, this.themesPerPage);
        },
        incrementCurrentPage: function() {
            this.currentPage += 1;
        },
        checkVisible: function() {
            this.trigger("checkVisible");
        },
        findByName: function(name) {
            if (!name) {
                return;
            }
            var theme = this.find(function(aTheme) {
                if (aTheme.get("id").toLowerCase() === name.toLowerCase()) {
                    return true;
                }
                if (aTheme.get("slug").toLowerCase() === name.toLowerCase()) {
                    return true;
                }
                if (aTheme.get("name").toLowerCase() === name.toLowerCase()) {
                    return true;
                }
            });
            return theme;
        },
        isBlogSelected: function() {
            return !!this.selectedBlog;
        },
        resetData: function() {
            this.reset(this.originalData, {
                silent: true
            });
        },
        initializeFilters: function() {
            this.registerFilter("staff-picks", "filter", function(theme) {
                return !!_.findWhere(theme.attributes.taxonomies.picks, {
                    slug: "staff-picks"
                });
            });
            this.registerFilter("trending", "filter", function(theme) {
                return theme.attributes.rank_trending <= 50;
            });
            this.registerFilter("photography", "filter", function(theme) {
                return !!_.findWhere(theme.attributes.taxonomies.subjects, {
                    slug: "photography"
                });
            });
            this.registerFilter("portfolio", "filter", function(theme) {
                return !!_.findWhere(theme.attributes.taxonomies.subjects, {
                    slug: "portfolio"
                });
            });
            this.registerFilter("magazine", "filter", function(theme) {
                return !!_.findWhere(theme.attributes.taxonomies.subjects, {
                    slug: "magazine"
                });
            });
            this.registerFilter("blog", "filter", function(theme) {
                return !!_.findWhere(theme.attributes.taxonomies.subjects, {
                    slug: "blog"
                });
            });
            this.registerFilter("all", "filter", function() {
                return true;
            });
            this.registerFilter("all-filters", "filter", function() {
                return true;
            });
            this.hideFilter("all-filters");
            this.registerFilter("business", "filter", function(theme) {
                return !!_.findWhere(theme.attributes.taxonomies.subjects, {
                    slug: "business"
                });
            });
            this.registerFilter("e-commerce", "filter", function(theme) {
                return !!_.findWhere(theme.attributes.taxonomies.subjects, {
                    slug: "e-commerce"
                });
            });
            this.registerFilter("wedding", "filter", function(theme) {
                return !!_.findWhere(theme.attributes.taxonomies.subjects, {
                    slug: "wedding"
                });
            });
            this.registerFilter("minimal", "filter", function(theme) {
                return !!_.findWhere(theme.attributes.taxonomies.styles, {
                    slug: "minimal"
                });
            });
            this.registerFilter("travel", "filter", function(theme) {
                return !!_.findWhere(theme.attributes.taxonomies.subjects, {
                    slug: "travel"
                });
            });
            this.registerFilter("food", "filter", function(theme) {
                return !!_.findWhere(theme.attributes.taxonomies.subjects, {
                    slug: "food"
                });
            });
            this.registerFilter("music", "filter", function(theme) {
                return !!_.findWhere(theme.attributes.taxonomies.subjects, {
                    slug: "music"
                });
            });
            this.registerFilter("accessibility-ready", "accessibility-ready", function(theme) {
                return !!_.findWhere(theme.attributes.taxonomies.features, {
                    slug: "accessibility-ready"
                });
            });
            this.registerFilter("custom-background", "custom-background", function(theme) {
                return !!_.findWhere(theme.attributes.taxonomies.features, {
                    slug: "custom-background"
                });
            });
            this.registerFilter("custom-colors", "custom-colors", function(theme) {
                return !!_.findWhere(theme.attributes.taxonomies.features, {
                    slug: "custom-colors"
                });
            });
            this.registerFilter("custom-header", "custom-header", function(theme) {
                return !!_.findWhere(theme.attributes.taxonomies.features, {
                    slug: "custom-header"
                });
            });
            this.registerFilter("custom-menu", "custom-menu", function(theme) {
                return !!_.findWhere(theme.attributes.taxonomies.features, {
                    slug: "custom-menu"
                });
            });
            this.registerFilter("editor-style", "editor-style", function(theme) {
                return !!_.findWhere(theme.attributes.taxonomies.features, {
                    slug: "editor-style"
                });
            });
            this.registerFilter("featured-image-header", "featured-image-header", function(theme) {
                return !!_.findWhere(theme.attributes.taxonomies.features, {
                    slug: "featured-image-header"
                });
            });
            this.registerFilter("featured-images", "featured-images", function(theme) {
                return !!_.findWhere(theme.attributes.taxonomies.features, {
                    slug: "featured-images"
                });
            });
            this.registerFilter("flexible-header", "flexible-header", function(theme) {
                return !!_.findWhere(theme.attributes.taxonomies.features, {
                    slug: "flexible-header"
                });
            });
            this.registerFilter("front-page-post-form", "front-page-post-form", function(theme) {
                return !!_.findWhere(theme.attributes.taxonomies.features, {
                    slug: "front-page-post-form"
                });
            });
            this.registerFilter("full-width-template", "full-width-template", function(theme) {
                return !!_.findWhere(theme.attributes.taxonomies.features, {
                    slug: "full-width-template"
                });
            });
            this.registerFilter("infinite-scroll", "infinite-scroll", function(theme) {
                return !!_.findWhere(theme.attributes.taxonomies.features, {
                    slug: "infinite-scroll"
                });
            });
            this.registerFilter("microformats", "microformats", function(theme) {
                return !!_.findWhere(theme.attributes.taxonomies.features, {
                    slug: "microformats"
                });
            });
            this.registerFilter("post-formats", "post-formats", function(theme) {
                return !!_.findWhere(theme.attributes.taxonomies.features, {
                    slug: "post-formats"
                });
            });
            this.registerFilter("post-slider", "post-slider", function(theme) {
                return !!_.findWhere(theme.attributes.taxonomies.features, {
                    slug: "post-slider"
                });
            });
            this.registerFilter("rtl-language-support", "rtl-language-support", function(theme) {
                return !!_.findWhere(theme.attributes.taxonomies.features, {
                    slug: "rtl-language-support"
                });
            });
            this.registerFilter("site-logo", "site-logo", function(theme) {
                return !!_.findWhere(theme.attributes.taxonomies.features, {
                    slug: "site-logo"
                });
            });
            this.registerFilter("sticky-post", "sticky-post", function(theme) {
                return !!_.findWhere(theme.attributes.taxonomies.features, {
                    slug: "sticky-post"
                });
            });
            this.registerFilter("theme-options", "theme-options", function(theme) {
                return !!_.findWhere(theme.attributes.taxonomies.features, {
                    slug: "theme-options"
                });
            });
            this.registerFilter("threaded-comments", "threaded-comments", function(theme) {
                return !!_.findWhere(theme.attributes.taxonomies.features, {
                    slug: "threaded-comments"
                });
            });
            this.registerFilter("translation-ready", "translation-ready", function(theme) {
                return !!_.findWhere(theme.attributes.taxonomies.features, {
                    slug: "translation-ready"
                });
            });
            this.registerFilter("all-columns", "columns", function() {
                return true;
            });
            this.hideFilter("all-columns");
            this.registerFilter("one-column", "columns", function(theme) {
                return !!_.findWhere(theme.attributes.taxonomies.columns, {
                    slug: "one-column"
                });
            });
            this.registerFilter("two-columns", "columns", function(theme) {
                return !!_.findWhere(theme.attributes.taxonomies.columns, {
                    slug: "two-columns"
                });
            });
            this.registerFilter("many-columns", "columns", function(theme) {
                return _.findWhere(theme.attributes.taxonomies.columns, {
                    slug: "three-columns"
                }) || _.findWhere(theme.attributes.taxonomies.columns, {
                    slug: "four-columns"
                });
            });
            this.registerFilter("responsive-layout", function(theme) {
                return !!_.findWhere(theme.attributes.taxonomies.layouts, {
                    slug: "responsive-layout"
                });
            });
            this.registerFilter("all-colors", "colors", function() {
                return true;
            });
            this.hideFilter("all-colors");
            this.registerFilter("dark", "colors", function(theme) {
                return !!_.findWhere(theme.attributes.taxonomies.colors, {
                    slug: "dark"
                });
            });
            this.registerFilter("light", "colors", function(theme) {
                return !!_.findWhere(theme.attributes.taxonomies.colors, {
                    slug: "light"
                });
            });
            this.registerFilter("blue", "colors", function(theme) {
                return !!_.findWhere(theme.attributes.taxonomies.colors, {
                    slug: "blue"
                });
            });
            this.registerFilter("green", "colors", function(theme) {
                return !!_.findWhere(theme.attributes.taxonomies.colors, {
                    slug: "green"
                });
            });
            this.registerFilter("pink", "colors", function(theme) {
                return !!_.findWhere(theme.attributes.taxonomies.colors, {
                    slug: "pink"
                });
            });
            this.registerFilter("red", "colors", function(theme) {
                return !!_.findWhere(theme.attributes.taxonomies.colors, {
                    slug: "red"
                });
            });
            this.registerFilter("orange", "colors", function(theme) {
                return !!_.findWhere(theme.attributes.taxonomies.colors, {
                    slug: "orange"
                });
            });
            this.registerFilter("all-prices", "type", function() {
                return true;
            });
            this.hideFilter("all-prices");
            this.registerFilter("premium", "type", function(theme) {
                return theme.get("price").value > 0;
            });
            this.registerFilter("free", "type", function(theme) {
                return theme.get("price").value === 0;
            });
        },
        setDefaultFilter: function(keys) {
            if (!_.isArray(keys)) {
                keys = [ keys ];
            }
            this.defaultFilters = keys;
            this.addFilter(keys);
        },
        addDefaultFilter: function(keys) {
            this.defaultFilters = this.defaultFilters || [];
            if (!_.isArray(keys)) {
                keys = [ keys ];
            }
            this.defaultFilters = this.defaultFilters.concat(keys);
            this.addFilter(keys);
        },
        addFilter: function(keys, options) {
            var _this = this;
            options = options || {};
            if (!_.isArray(keys)) {
                keys = [ keys ];
            }
            _.each(keys, function(key) {
                var filterObj = _this.getAvailableFilter(key), previousFilter = _this.getFilter(key);
                if (!filterObj) {
                    return;
                }
                if (previousFilter) {
                    delete _this.filters[previousFilter.group];
                }
                _this.filters[filterObj.group] = filterObj;
            });
            if (false === options.apply) {
                return;
            }
            this.applyFilters();
        },
        getFilterKeys: function(options) {
            var _this = this;
            options = options || {};
            return _.chain(this.filters).filter(function(filter) {
                if (options.defaults === false && _.contains(_this.defaultFilters, filter.key)) {
                    return false;
                }
                if (options.excludeGroup && filter.group === options.excludeGroup) {
                    return false;
                }
                return options.hidden || filter.hidden !== true;
            }).pluck("key").value();
        },
        getFilterKey: function(group) {
            if (this.filters[group] && this.filters[group].hidden !== true) {
                return this.filters[group].key;
            }
            return false;
        },
        getFilter: function(key) {
            return _.findWhere(this.filters, {
                key: key
            });
        },
        getAvailableFilter: function(key, group) {
            var filter = {
                key: key
            };
            if (group) {
                filter.group = group;
            }
            return _.findWhere(this.availableFilters, filter);
        },
        registerFilter: function(key, group, filterFunction) {
            if (!filterFunction) {
                filterFunction = group;
                group = null;
            }
            group = group || key;
            this.availableFilters[key] = {
                filter: filterFunction,
                group: group,
                key: key
            };
        },
        hideFilter: function(key) {
            var filter = this.availableFilters[key];
            if (!filter) {
                return false;
            }
            filter.hidden = true;
        },
        resetFilters: function(group) {
            if (group) {
                delete this.filters[group];
                this.addFilter(this.defaultFilters, {
                    apply: false
                });
                this.addFilter(this.filters, {
                    apply: false
                });
            } else {
                this.filters = {};
                this.addFilter(this.defaultFilters, {
                    apply: false
                });
            }
            this.applyFilters();
        },
        removeFilter: function(key) {
            var filter = this.getFilter(key);
            if (filter) {
                delete this.filters[filter.group];
                this.applyFilters();
            }
        },
        applyFilters: function() {
            this.resetData();
            var results = this.models;
            this.currentPage = 0;
            if (_.isEmpty(this.models)) {
                this.trigger("update");
                return;
            }
            _.each(this.filters, function(filterObj) {
                results = _.filter(results, filterObj.filter);
            });
            if (!_.isEmpty(this.filters)) {
                this.reset(results, {
                    silent: true
                });
                this.currentPage = 0;
            }
            this.trigger("update");
        },
        doSearch: function(searchText) {
            if (searchText === this.searchText) {
                return;
            }
            var type = this.getFilterKey("type");
            if (_.isEmpty(searchText)) {
                this.resetFilters();
            } else {
                this.filters = {};
                this.setDefaultFilter([ "all-filters", "all-columns", "all-colors", "all-prices" ]);
            }
            this.searchText = searchText;
            this.addFilter(type);
            this.registerFilter("_search", function(theme) {
                return theme.matches(searchText);
            });
            this.hideFilter("_search");
            this.addFilter("_search");
        },
        doSort: function(sortString) {
            var sortFunction;
            switch (sortString) {
              case "newest":
                sortFunction = function(theme1, theme2) {
                    if (theme1.get("date_launched") > theme2.get("date_launched")) {
                        return -1;
                    }
                    if (theme2.get("date_launched") > theme1.get("date_launched")) {
                        return 1;
                    }
                    return 0;
                };
                break;

              case "popular":
                sortFunction = function(theme) {
                    return theme.get("rank_popularity");
                };
                break;

              default:
                sortFunction = function(theme) {
                    return theme.get("rank_trending");
                };
                break;
            }
            this.comparator = sortFunction;
            this.sortString = sortString;
            this.sort();
            this.currentPage = 0;
            this.trigger("update");
        }
    });
    return ThemeCollection;
});

define("BlogModel", [ "ThemeOption" ], function(ThemeOption) {
    var $ = jQuery, _changeActiveTheme = function(blog, newActiveTheme) {
        var params = {}, deferred = $.Deferred(), blogId = blog.get("blogId");
        if (!blogId || blogId.length < 1) {
            return deferred.reject("cannot set active theme: no blog ID found");
        }
        params.path = "/sites/" + blogId + "/themes/mine";
        params.cache = false;
        params.dataType = "json";
        params.method = "POST";
        params.body = {
            theme: blog.get("activeTheme").get("id")
        };
        $.wpcom_proxy_request(params).done(function(response, code) {
            if (code.toString().substr(0, 1) === "2") {
                deferred.resolve(response, code);
            } else {
                deferred.reject(response, code);
            }
        }).fail(function() {
            deferred.reject(arguments);
        });
        return deferred;
    }, _getActiveTheme = function(blog) {
        var params = {}, deferred = $.Deferred(), blogId = blog.get("blogId");
        if (!blogId || blogId.length < 1) {
            return deferred.reject("cannot get active theme: no blog ID found");
        }
        if (blog.has("previousActiveTheme")) {
            return $.when(blog.get("previousActiveTheme").attributes);
        }
        params.path = "/sites/" + blogId + "/themes/mine";
        params.cache = false;
        params.dataType = "json";
        params.method = "GET";
        params.body = {};
        $.wpcom_proxy_request(params).done(function(response, code) {
            if (code.toString().substr(0, 1) === "2") {
                deferred.resolve(response, code);
            } else {
                deferred.reject(response, code);
            }
        }).fail(function() {
            deferred.reject(arguments);
        });
        return deferred;
    }, _getPurchasedThemes = function(blog) {
        var params = {}, deferred = $.Deferred(), blogId = blog.get("blogId");
        if (!blogId || blogId.length < 1) {
            return deferred.reject("cannot get purchased themes: no blog ID found");
        }
        if (blog.has("purchasedThemes")) {
            return $.when(blog.get("purchasedThemes"));
        }
        params.path = ".1/sites/" + blogId + "/themes/purchased";
        params.cache = false;
        params.dataType = "json";
        params.method = "GET";
        params.body = {};
        $.wpcom_proxy_request(params).done(function(response, code) {
            if (code.toString().substr(0, 1) === "2") {
                deferred.resolve(response, code);
            } else {
                deferred.reject(response, code);
            }
        }).fail(function() {
            deferred.reject(arguments);
        });
        return deferred;
    }, _getAPIToken = function(blog) {
        if (blog.hasAPIToken) {
            return $.when("complete");
        }
        return $.wpcom_proxy_request({
            metaAPI: {
                accessAllUsersBlogs: true
            }
        }).done(function() {
            blog.hasAPIToken = true;
        });
    }, BlogModel = Backbone.Model.extend({
        idAttribute: "ID",
        getBlogUrl: function() {
            var blogUrl = this.get("blogUrl");
            if (!/^https?:\/\/.*/.test(blogUrl)) {
                blogUrl = "http://" + blogUrl;
            }
            return blogUrl;
        },
        getPurchasedThemes: function() {
            var _this = this, deferred = $.Deferred();
            _getPurchasedThemes(_this).done(function(response, code) {
                deferred.resolve(response, code);
                _this.set("purchasedThemes", response);
            }).fail(function(response) {
                deferred.reject(response);
            });
            return deferred;
        },
        setActiveTheme: function(newActiveTheme) {
            var _this = this, deferred = $.Deferred();
            if (this.has("activeTheme")) {
                this.set("previousActiveTheme", this.get("activeTheme"));
            }
            this.set("activeTheme", newActiveTheme);
            _getAPIToken(this).done(function() {
                _getActiveTheme(_this).done(function(theme) {
                    theme = new ThemeOption(theme);
                    _this.set("previousActiveTheme", theme);
                    _changeActiveTheme(_this, newActiveTheme).done(function(response, code) {
                        deferred.resolve(response, code);
                    }).fail(function(response) {
                        deferred.reject(response);
                    });
                }).fail(function(response) {
                    deferred.reject(response);
                });
            }).fail(function(response) {
                deferred.reject(response);
            });
            return deferred;
        },
        undoActivateTheme: function() {
            if (!this.has("previousActiveTheme")) {
                return $.Deferred().reject("cannot undo theme change: no previous theme found");
            }
            return this.setActiveTheme(this.get("previousActiveTheme"));
        }
    });
    return BlogModel;
});

define("ModalDialogView", [ "templateFactory" ], function(templateFactory) {
    var $ = jQuery, ModalDialogView = Backbone.View.extend({
        events: {
            "click .atlas-modal-mask,.atlas-modal-close": "close"
        },
        initialize: function() {
            var _this = this;
            $(window).on("keyup.closeModal", function(e) {
                if (27 === e.keyCode) {
                    _this.close();
                }
            });
        },
        unload: function() {
            this.remove();
        },
        close: function(ev) {
            var _this = this;
            if (ev) {
                ev.preventDefault();
            }
            $(document.body).removeClass("show-modal");
            $(window).off("keyup.closeModal");
            this.trigger("closed");
            setTimeout(function() {
                _this.unload();
            }, 0);
            return false;
        },
        render: function() {
            var templateHtml, page = $("#page"), data = {};
            if (this.data) {
                data = this.data;
            }
            templateHtml = templateFactory.fetch("newdash-modal-dialog", data);
            this.setElement(templateHtml);
            page.append(this.$el);
            $(document.body).addClass("show-modal");
            return this;
        }
    });
    return ModalDialogView;
});

define("ThemeDialogView", [ "templateFactory", "ThemeOption", "BlogModel", "ModalDialogView", "newdashI18n", "statUtils" ], function(templateFactory, ThemeOptionModel, BlogModel, ModalDialogView, newdashI18n, statUtils) {
    var $ = jQuery, ThemeDialogView = ModalDialogView.extend({
        model: ThemeOptionModel,
        el: "#atlas-modal-container",
        events: function() {
            return _.extend({}, ModalDialogView.prototype.events, {
                "click .atlas-modal-themes-content .button-primary": "clickButton",
                "change .atlas-modal-themes-content select": "updateType"
            });
        },
        initialize: function(args) {
            this.type = args.type;
            this.blogUrl = args.blogUrl || "";
            statUtils.recordEvent("Themes", "Clicked Activate");
            this.listenTo(this.model, "remove", this.unload);
            _.bindAll(this, "activateTheme");
            ModalDialogView.prototype.initialize.call(this, args);
            this.render();
        },
        clickButton: function(ev) {
            ev.preventDefault();
            switch (this.type) {
              case "activate":
                this.activateTheme();
                break;

              case "purchase":
                var themeProductId = "39", purchaseUrl = "/checkout/" + this.getBlogId() + "/" + themeProductId + "/" + this.model.get("id") + "/?ref=showcase-theme";
                window.location = purchaseUrl;
                break;
            }
        },
        updateType: function(ev) {
            var isPremiumTheme = this.model.get("price").value > 0;
            if (isPremiumTheme) {
                var _this = this, blog = new BlogModel({
                    blogId: this.getBlogId(),
                    blogUrl: this.getBlogUrl()
                }), themes = [];
                blog.getPurchasedThemes().done(function(response) {
                    themes = response.themes;
                    if (-1 !== $.inArray(_this.model.get("id"), themes)) {
                        _this.type = "activate";
                        _this.$el.find("#atlas-modal-title").html(templateFactory.hydrate(newdashI18n.get([ "themes", "activate theme title" ]), {
                            theme: _this.model.get("name")
                        }));
                        _this.$el.find(".atlas-modal-themes-content p").text(templateFactory.hydrate(newdashI18n.get([ "themes", "activate theme body" ]), {
                            theme: _this.model.get("name")
                        }));
                        _this.$el.find(".button-primary").text(newdashI18n.get([ "themes", "activate theme button" ]));
                    } else {
                        _this.type = "purchase";
                        _this.$el.find("#atlas-modal-title").html(templateFactory.hydrate(newdashI18n.get([ "themes", "purchase theme title" ]), {
                            theme: _this.model.get("name")
                        }));
                        _this.$el.find(".atlas-modal-themes-content p").text(templateFactory.hydrate(newdashI18n.get([ "themes", "purchase theme body" ]), {
                            theme: _this.model.get("name")
                        }));
                        _this.$el.find(".button-primary").text(newdashI18n.get([ "themes", "purchase theme button" ]));
                    }
                });
            }
        },
        activateTheme: function() {
            var _this = this, blog = new BlogModel({
                blogId: this.getBlogId(),
                blogUrl: this.getBlogUrl()
            });
            _this.$el.find(".atlas-modal-box").html('<img class="activate-spinner" src="/wp-content/mu-plugins/atlas/images/loading.gif" height="24" width="24" />').show();
            statUtils.recordEvent("Themes", "Activated Theme", $(".theme-details-header h1").html());
            blog.setActiveTheme(this.model).done(function() {
                _this.close();
                statUtils.bumpStat("showcase-theme-activations", _this.model.get("id"));
                _this.model.trigger("themeUpdated", blog);
            }).fail(function() {
                _this.close();
                _this.model.trigger("failedSync", newdashI18n.get([ "notices", "theme activate error" ]));
            });
        },
        getBlogUrl: function() {
            if (!this.blogUrl) {
                var selectedUrl = $(".atlas-modal-themes-content select").find(":selected").data("url");
                if (selectedUrl) {
                    this.blogUrl = "https://" + selectedUrl;
                }
            }
            return this.blogUrl;
        },
        getBlogId: function() {
            return $(".atlas-modal-themes-content select").val();
        },
        render: function() {
            var title, body, buttonText, data, dialogHtml, template = "post-activation" === this.type ? "theme-activated" : "theme-dialog", screenshotUrl = this.model.get("screenshots")[1] ? this.model.get("screenshots")[1] : this.model.get("screenshot"), themeName = this.model.get("name"), themeID = this.model.id;
            _.defer(function() {
                $("option").each(function() {
                    var stylesheet = $(this).data("stylesheet");
                    if (stylesheet && ~stylesheet.indexOf(themeID)) {
                        this.remove();
                    }
                });
            });
            switch (this.type) {
              case "activate":
                title = templateFactory.hydrate(newdashI18n.get([ "themes", "activate theme title" ]), {
                    theme: themeName
                });
                body = templateFactory.hydrate(newdashI18n.get([ "themes", "activate theme body" ]), {
                    theme: themeName
                });
                buttonText = newdashI18n.get([ "themes", "activate theme button" ]);
                break;

              case "preview":
                title = templateFactory.hydrate(newdashI18n.get([ "themes", "preview theme title" ]), {
                    theme: themeName
                });
                body = templateFactory.hydrate(newdashI18n.get([ "themes", "preview theme body" ]), {
                    theme: themeName
                });
                buttonText = newdashI18n.get([ "themes", "preview theme button" ]);
                break;

              case "purchase":
                title = templateFactory.hydrate(newdashI18n.get([ "themes", "purchase theme title" ]), {
                    theme: themeName
                });
                body = templateFactory.hydrate(newdashI18n.get([ "themes", "purchase theme body" ]), {
                    theme: themeName
                });
                buttonText = newdashI18n.get([ "themes", "purchase theme button" ]);
                break;

              case "post-activation":
                title = "&nbsp;";
                body = templateFactory.hydrate(newdashI18n.get([ "themes", "post-activation theme body" ]), {
                    theme: this.model
                });
                buttonText = newdashI18n.get([ "themes", "post-activation theme button" ]);
                break;
            }
            if (!(title && body && buttonText)) {
                console.log("Failed to create dialog.");
                return;
            }
            data = {
                type: this.type,
                theme: themeName,
                themeSlug: this.model.get("id"),
                buttonText: buttonText,
                screenshotUrl: screenshotUrl + "?w=650",
                customizeUrl: this.getBlogUrl() + "/wp-admin/customize.php",
                body: body
            };
            dialogHtml = templateFactory.fetch(template, data);
            this.data = {
                type: this.type,
                title: title,
                content: dialogHtml
            };
            ModalDialogView.prototype.render.call(this);
        }
    });
    return ThemeDialogView;
});

define("ThemeOptionView", [ "templateFactory", "ThemeOption", "ThemeDialogView", "newdashI18n", "statUtils" ], function(templateFactory, ThemeOptionModel, ThemeDialogView, newdashI18n, statUtils) {
    var $ = jQuery, ThemeOptionView = Backbone.View.extend({
        model: ThemeOptionModel,
        events: {
            "click .theme-screenshot a,.details": "showDetails",
            "click .activate": "showActivateDialog",
            "click .purchase": "showPurchaseDialog",
            "hover .entry-meta a": "hoveredTheme"
        },
        initialize: function() {
            this.listenTo(this.model, "remove", this.unload);
            this.listenTo(this.model.collection, "checkVisible", this.checkVisible);
            this.listenTo(this.model.collection, "idealWidthChanged", this.needNewImage);
        },
        unload: function() {
            this.remove();
        },
        activateTheme: function() {
            var _this = this, blog;
            if (this.model.collection.isBlogSelected()) {
                blog = this.model.collection.selectedBlog;
            } else if (this.model.collection.singleBlog) {
                blog = this.model.collection.singleBlog;
            }
            if (!blog) {
                return;
            }
            blog.setActiveTheme(this.model).done(function() {
                statUtils.bumpStat("showcase-theme-activations", _this.model.get("id"));
                _this.model.trigger("themeUpdated", blog);
            }).fail(function() {
                _this.model.trigger("failedSync", newdashI18n.get([ "notices", "theme activate error" ]));
            });
        },
        showDetails: function(ev) {
            if ("undefined" === typeof window.wpcomNewdash || "undefined" === typeof window.wpcomNewdash.LoggedOutRouter) {
                return;
            }
            ev.preventDefault();
            ev.stopPropagation();
            var url = "/themes/" + this.model.get("id") + "/";
            window.wpcomNewdash.LoggedOutRouter.navigate(url, {
                trigger: true
            });
            return false;
        },
        showActivateDialog: function(ev) {
            if (this.model.collection.loggedOut) {
                return;
            }
            ev.preventDefault();
            if (this.model.collection.isBlogSelected() || this.model.collection.singleBlog) {
                this.activateTheme();
                return false;
            }
            this.showDialog("activate");
            return false;
        },
        showPurchaseDialog: function(ev) {
            if (this.model.collection.loggedOut) {
                return;
            }
            ev.preventDefault();
            if (this.model.collection.isBlogSelected() || this.model.collection.singleBlog) {
                var themeProductId = "39", blog = this.model.collection.isBlogSelected() ? this.model.collection.selectedBlog : this.model.collection.singleBlog;
                window.location = "/checkout/" + blog.get("blogId") + "/" + themeProductId + "/" + this.model.get("id") + "/?ref=showcase-theme";
                return false;
            }
            this.showDialog("purchase");
            return false;
        },
        showDialog: function(type) {
            new ThemeDialogView({
                model: this.model,
                type: type
            });
        },
        hoveredTheme: function() {
            this.$el.toggleClass("hover");
        },
        render: function() {
            var templateHtml, templateOptions, premiumPrice, premiumTheme = this.model.get("price").value > 0, premiumThemePurchased = !!this.model.get("purchased"), premiumPrice = this.model.get("price").display, lowercaseName = this.model.get("id"), screenshotUrl, signUpUrl = false, purchaseUrl, activateUrl, customizeUrl, detailsUrl, previewUrl, active = false, selectedBlog = this.model.collection.selectedBlog || this.model.collection.singleBlog;
            screenshotUrl = this.model.get("screenshots")[1] ? this.model.get("screenshots")[1] : this.model.get("screenshot");
            previewUrl = this.model.get("demo_url") ? this.model.get("demo_url") : lowercaseName + "demo.wordpress.com";
            customizeUrl = previewUrl;
            purchaseUrl = "/themes/" + lowercaseName + "/purchase/";
            activateUrl = "/themes/" + lowercaseName + "/";
            detailsUrl = "/themes/" + lowercaseName + "/";
            if (this.model.collection.loggedOut || wpcomThemeData.userHasNoBlog) {
                signUpUrl = "https://wordpress.com/signup/?source=showcase_home&theme=" + this.model.get("id");
            }
            if (wpcomThemeData.userHasNoBlog && premiumTheme) {
                signUpUrl = "https://wordpress.com/signup/";
            }
            if (selectedBlog) {
                detailsUrl = "/themes/" + selectedBlog.get("blogUrl") + "/" + lowercaseName + "/";
                if (selectedBlog.get("activeTheme").get("id") === this.model.get("id")) {
                    active = true;
                    customizeUrl = "http://" + selectedBlog.get("blogUrl") + "/wp-admin/customize.php?url=" + encodeURIComponent(window.location);
                }
            }
            templateOptions = {
                screenshotUrl: screenshotUrl,
                activateUrl: activateUrl,
                signUpUrl: signUpUrl,
                purchaseUrl: purchaseUrl,
                customizeUrl: customizeUrl,
                previewUrl: previewUrl,
                detailsUrl: detailsUrl,
                premiumTheme: premiumTheme,
                premiumThemePurchased: premiumThemePurchased,
                premiumPrice: premiumPrice,
                active: active
            };
            templateOptions = _.defaults(templateOptions, this.model.attributes);
            templateHtml = templateFactory.fetch("theme", templateOptions);
            this.setElement(templateHtml);
            if (active) {
                this.$el.addClass("active");
            }
            return this;
        },
        reveal: function() {
            var _this = this, screenshot = this.$el.find(".theme-screenshot img");
            screenshot.one("load", function() {
                screenshot.removeClass("preload").addClass("loaded");
                _this.stopListening(_this.model.collection, "checkVisible");
            });
            if (screenshot.data("src")) {
                screenshot.data("src", screenshot.data("src").split("?").shift());
                screenshot.attr("src", screenshot.data("src") + "?w=" + this.model.collection.modelWidth);
            }
            return this;
        },
        checkVisible: function() {
            if ("undefined" === typeof this.$el || !this.$el || !this.$el.offset() || !this.$el.height()) {
                return;
            }
            var fudgeFactor = 500, top = this.$el.offset().top;
            this.coords = {
                y1: top,
                y2: top + this.$el.height()
            };
            if (this.coords.y1 > this.model.collection.viewport.y2 + fudgeFactor) {
                return;
            }
            if (this.coords.y2 < this.model.collection.viewport.y1) {
                return;
            }
            this.reveal();
        },
        needNewImage: function() {
            this.listenTo(this.model.collection, "checkVisible", this.checkVisible);
        }
    });
    return ThemeOptionView;
});

define("ThemeFilterView", [ "templateFactory", "ThemeCollection", "newdashI18n", "noticeUtils", "statUtils" ], function(templateFactory, ThemeCollection, newdashI18n, noticeUtils, statUtils) {
    var $ = jQuery, ThemeFilterView = Backbone.View.extend({
        el: ".theme-filters",
        events: {
            'click .showcase-filters [data-group="filter"]': "filtersClicked",
            "click .price-filters .filter": "filtersClicked",
            "click .attribute-filters .filter": "attributeFiltersClicked",
            "click .toggle": "toggleAttributeFilters"
        },
        initialize: function() {
            this.firstRender = true;
            this.listenTo(this.collection, "update", this.updateFilterCount);
        },
        unload: function() {
            this.remove();
        },
        sortThemesClicked: function(ev) {
            ev.preventDefault();
            ev.stopPropagation();
            statUtils.bumpStat("showcase-home-actions", "sort");
            this.collection.doSort($(ev.target).data("sort"));
            this.render();
        },
        filtersClicked: function(ev) {
            ev.preventDefault();
            ev.stopPropagation();
            var target = $(ev.target), filter = target.data("filter");
            this.collection.addFilter(filter);
            statUtils.bumpStat("showcase-filter", filter);
            if ("type" === target.data("group")) {
                statUtils.bumpStat("showcase-sort-views", filter);
            } else if (this.$el.find("#newdash-theme-search-field").val()) {
                this.$el.find("#newdash-theme-search-field").val("");
                this.collection.removeFilter("_search");
            }
            statUtils.recordPageView("/themes/filter", "Themes > Filter");
            statUtils.recordEvent("Themes", "Clicked Filter", filter);
            this.setRoute();
            this.render();
        },
        attributeFiltersClicked: function(ev) {
            ev.stopPropagation();
            var target = $(ev.target), filter = target.data("filter");
            if ("checkbox" === target.attr("type") && !target.attr("checked")) {
                this.collection.removeFilter(filter);
            } else {
                this.collection.addFilter(filter);
                statUtils.bumpStat("showcase-filter", filter);
            }
            if ("type" === target.data("group")) {
                statUtils.bumpStat("showcase-sort-views", filter);
            } else if (this.$el.find("#newdash-theme-search-field").val()) {
                this.$el.find("#newdash-theme-search-field").val("");
                this.collection.removeFilter("_search");
            }
            statUtils.recordPageView("/themes/filter", "Themes > Filter");
            statUtils.recordEvent("Themes", "Clicked Filter", filter);
            this.setRoute();
            this.render();
        },
        setRoute: function() {
            var url = "/themes/", search = this.$el.find("#newdash-theme-search-field").val(), filters = this.collection.getFilterKeys({
                excludeGroup: "type"
            }), filter = this.collection.getFilterKey("type");
            if (this.collection.isBlogSelected()) {
                url += this.collection.selectedBlog.get("blogUrl") + "/";
            }
            if (filters.length > 0) {
                url += "filter/" + filters.join("+") + "/";
            } else if (search && search.length >= 1) {
                url += "search/" + search + "/";
            }
            if (filter) {
                url += "type/" + filter + "/";
            }
            statUtils.bumpStat("newdash_pageviews", "route");
            if (window.wpcomNewdash && window.wpcomNewdash.router) {
                window.wpcomNewdash.router.setRoute(url, true);
            } else if (window.wpcomNewdash && window.wpcomNewdash.LoggedOutRouter) {
                window.wpcomNewdash.LoggedOutRouter.navigate(url, {
                    trigger: false
                });
                if (filters.length > 0) {
                    this.setTitlesFromFilter(filters[0]);
                } else {
                    this.setTitlesFromFilter(null);
                }
            }
        },
        updateFilterCount: function() {
            var toggle = this.$el.find(".toggle"), filtersCount = this.collection.getFilterKeys({
                defaults: false
            }).length;
            toggle.find("#filter-toggle-count").remove();
            if (filtersCount) {
                toggle.append($('<span id="filter-toggle-count">').text(filtersCount));
            }
        },
        setMobileFilterTitle: function() {
            filter = this.collection.getFilterKey("filter");
            toggleTitleElement = this.$el.find("#filter-toggle-title");
            if (filter) {
                toggleTitleElement.text(window.wpcomThemeData.filter_types[filter]);
            } else {
                toggleTitleElement.text(this.$el.find("#filter-toggle-title").attr("data-mobile-default"));
            }
        },
        render: function() {
            var templateHtml, sortString = this.collection.sortString || "trending", themeBrowserArea = $(".theme-browser"), themeFilterArea = $(".theme-filters");
            if (themeBrowserArea.length < 1) {
                noticeUtils.error(newdashI18n.get([ "notices", "theme list error" ]));
                return;
            }
            if (themeFilterArea.length < 1) {
                templateHtml = templateFactory.fetch("theme-filters", {});
                themeBrowserArea.prepend(templateHtml);
                themeFilterArea = $(".theme-filters");
                this.setElement(themeFilterArea);
            }
            themeFilterArea.find(".filter").removeClass("current").prop("checked", false);
            _.each(this.collection.getFilterKeys({
                hidden: true
            }), function(filterString) {
                themeFilterArea.find('[data-filter="' + filterString + '"]').addClass("current").prop("checked", true);
            });
            themeFilterArea.find('[data-sort="' + sortString + '"]').addClass("current");
            this.setMobileFilterTitle();
            this.updateFilterCount();
            this.firstRender = false;
        },
        toggleAttributeFilters: function(ev) {
            ev.preventDefault();
            ev.stopPropagation();
            statUtils.bumpStat("showcase-home-actions", "filters");
            $(".toggle").toggleClass("current");
            this.$el.find(".drawer, .price-filters").slideToggle(200);
        },
        setTitlesFromFilter: function(firstFilter) {
            var filterTitle, hydratedString, pageTitle;
            if (firstFilter && _.contains(_.keys(window.wpcomThemeData.filter_types), firstFilter)) {
                filterTitle = window.wpcomThemeData.filter_types[firstFilter];
                hydratedString = templateFactory.hydrate(newdashI18n.get([ "themes", "filter_page_title" ]), {
                    filter_type: filterTitle
                });
                document.title = hydratedString;
                hydratedString = templateFactory.hydrate(newdashI18n.get([ "themes", "filter_page_h2" ]), {
                    filter_type: filterTitle
                });
                $("div.change-themes-header h2").html(hydratedString);
            } else {
                pageTitle = newdashI18n.get([ "page_titles", "Change Theme" ]);
                document.title = pageTitle;
                $("div.change-themes-header h2").text(pageTitle);
            }
        }
    });
    return ThemeFilterView;
});

define("ThemeSearchView", [ "templateFactory", "ThemeCollection", "newdashI18n", "noticeUtils", "statUtils" ], function(templateFactory, ThemeCollection, newdashI18n, noticeUtils, statUtils) {
    var $ = jQuery, ThemeSearchView = Backbone.View.extend({
        el: ".theme-search",
        events: {
            search: "inputModified",
            input: "inputModified",
            change: "inputModified",
            keyup: "inputModified",
            submit: "formSubmitted"
        },
        unload: function() {
            this.remove();
        },
        inputModified: _.debounce(function() {
            this.setRoute();
            this.searchThemes();
        }, 200),
        formSubmitted: function(ev) {
            ev.preventDefault();
            $("#newdash-theme-search-field").trigger("blur");
            this.inputModified();
        },
        searchThemes: function() {
            var searchText = this.$el.find("#newdash-theme-search-field").val();
            if (!searchText || searchText.length <= 1) {
                searchText = "";
            }
            this.collection.doSearch(searchText);
            statUtils.recordPageView("/themes/search", "Themes > Search");
            statUtils.recordEvent("Themes", "Searched", searchText);
        },
        setRoute: function() {
            var url = "/themes/", search = this.$el.find("#newdash-theme-search-field").val(), filters = this.collection.getFilterKeys({
                excludeGroup: "type"
            }), filter = this.collection.getFilterKey("type");
            if (this.collection.isBlogSelected()) {
                url += this.collection.selectedBlog.get("blogUrl") + "/";
            }
            if (search && search.length >= 1) {
                url += "search/" + search + "/";
            } else if (filters.length > 0) {
                url += "filter/" + filters.join("+") + "/";
            }
            if (filter) {
                url += "type/" + filter + "/";
            }
            if (window.wpcomNewdash && window.wpcomNewdash.router) {
                window.wpcomNewdash.router.setRoute(url, true);
            } else if (window.wpcomNewdash && window.wpcomNewdash.LoggedOutRouter) {
                window.wpcomNewdash.LoggedOutRouter.navigate(url, {
                    trigger: false
                });
            }
        },
        render: function() {
            var templateHtml, themeBrowserArea = $(".theme-browser"), themeFiltersArea = $(".showcase-filters"), themeSearchArea = $(".theme-search");
            if (themeBrowserArea.length < 1) {
                noticeUtils.error(newdashI18n.get([ "notices", "theme list error" ]));
                return;
            }
            if (themeFiltersArea.length < 1) {
                themeFiltersArea = themeBrowserArea;
            }
            if (themeSearchArea.length < 1) {
                templateHtml = templateFactory.fetch("theme-search", {});
                themeFiltersArea.append(templateHtml);
                this.setElement($(".theme-search"));
                if (this.collection.searchText) {
                    this.$el.find("#newdash-theme-search-field").val(this.collection.searchText);
                }
            }
        }
    });
    return ThemeSearchView;
});

define("ThemeFooterView", [ "templateFactory", "ThemeCollection", "ThemeOption", "ThemeOptionView", "newdashI18n", "noticeUtils" ], function(templateFactory, ThemeCollection, ThemeOptionModel, ThemeOptionView, newdashI18n, noticeUtils) {
    var $ = jQuery, ThemeFooterView = Backbone.View.extend({
        el: ".section-footer",
        events: {
            "click .jump-to-top a": "jumpToTop"
        },
        initialize: function() {
            this.listenTo(this.collection, "checkVisible", this.checkVisible);
        },
        unload: function() {
            this.remove();
        },
        checkVisible: _.debounce(function() {
            var anchor = this.$el.find(".jump-to-top");
            this.collection.currentPage ? anchor.show() : anchor.hide();
        }, 200),
        jumpToTop: function(ev) {
            ev.preventDefault();
            $("html, body").animate({
                scrollTop: 0
            }, 600);
        },
        render: function() {
            var themeBrowserArea = $(".theme-browser");
            if (themeBrowserArea.length < 1) {
                noticeUtils.error(newdashI18n.get([ "notices", "theme list error" ]));
                return;
            }
            var themeFooterArea = $(".section-footer"), templateHtml;
            if (themeFooterArea.length < 1) {
                templateHtml = templateFactory.fetch("theme-footer", {
                    subjects: [ {
                        name: "Blog",
                        slug: "blog"
                    }, {
                        name: "Business",
                        slug: "business"
                    }, {
                        name: "Magazine",
                        slug: "magazine"
                    } ]
                });
                themeBrowserArea.append(templateHtml);
                this.setElement($(".section-footer"));
                this.renderFooterTheme("blog", "pachyderm");
                this.renderFooterTheme("business", "suburbia");
                this.renderFooterTheme("magazine", "soundcheck");
            }
            return this;
        },
        renderFooterTheme: function(subject, theme) {
            var themeAreaClass = "." + subject + "-footer-theme", model = new ThemeOptionModel(_.findWhere(this.collection.originalData, {
                id: theme
            })), view;
            model.collection = this.collection;
            view = new ThemeOptionView({
                model: model
            });
            this.$el.find(themeAreaClass).prepend(view.render().el);
        }
    });
    return ThemeFooterView;
});

define("ThemeCollectionView", [ "templateFactory", "ThemeOptionView", "ThemeDialogView", "ThemeFilterView", "ThemeSearchView", "ThemeFooterView", "templateFactory", "noticeUtils", "statUtils", "newdashI18n" ], function(templateFactory, ThemeOptionView, ThemeDialogView, ThemeFilterView, ThemeSearchView, ThemeFooterView, templateFactory, noticeUtils, statUtils, newdashI18n) {
    var $ = jQuery, ThemeCollectionView = Backbone.View.extend({
        el: ".theme-collection",
        themeBrowserArea: ".theme-browser",
        events: {
            "click .entry-title .details, .screenshot a, .preview": "bumpStats",
            "click .reset-filters a": "resetFilters"
        },
        initialize: function() {
            var _this = this;
            this.themeViews = [];
            this.firstRender = true;
            $(window).on("resize.lazyLoad", function() {
                _this.resizing(_this);
            });
            this.listenTo(this.collection, "themeUpdated", this.themeUpdated);
            this.listenTo(this.collection, "update", this.render);
            this.listenTo(this.collection, "failedSync", this.displayError);
            this.collection.modelWidth = this.idealSrcWidth();
            this.themeFilterView = new ThemeFilterView({
                collection: this.collection
            });
            this.themeSearchView = new ThemeSearchView({
                collection: this.collection
            });
            _.bindAll(this, "render");
            this.render();
        },
        unload: function() {
            $(window).off("resize.lazyLoad");
            $(window).off("scroll.lazyLoad");
            $(".notice .undo-theme-change").off("click");
            _.invoke(this.themeViews, "unload");
            this.themeViews = [];
            this.remove();
            this.themeFilterView.unload();
            this.themeSearchView.unload();
            $(this.themeBrowserArea).remove();
        },
        themeUpdated: function(blog) {
            new ThemeDialogView({
                model: blog.get("activeTheme"),
                type: "post-activation",
                blogUrl: blog.getBlogUrl()
            });
            if (this.collection.isBlogSelected()) {
                this.collection.trigger("update");
            }
        },
        displayError: function(message) {
            noticeUtils.error(message);
        },
        showActivateDialog: function(theme) {
            var dialog, deferred = $.Deferred();
            if (!_.isObject(theme)) {
                theme = this.collection.findByName(theme);
            }
            if (!theme) {
                return deferred.reject("cannot show dialog; no theme found");
            }
            dialog = new ThemeDialogView({
                model: theme,
                type: "activate"
            });
            this.listenTo(dialog, "closed", deferred.resolve);
            return deferred;
        },
        moveActiveThemeToTop: function() {
            var activeThemeName = this.collection.selectedBlog.get("activeTheme").get("id"), current = this.collection.findByName(activeThemeName);
            if (current) {
                this.collection.remove(current, {
                    silent: true
                });
                this.collection.add(current, {
                    at: 0,
                    silent: true
                });
            }
        },
        bumpStats: function(ev) {
            if ("preview" === ev.target.className) {
                statUtils.bumpStat("showcase-home-actions", "theme-demo");
                statUtils.recordEvent("Themes", "Clicked Demo");
            } else if ("signup" === ev.target.className) {
                statUtils.bumpStat("showcase-home-actions", "theme-sign-activate");
            } else {
                statUtils.bumpStat("showcase-home-actions", "theme");
            }
            statUtils.bumpStat("newdash_pageviews", "route");
        },
        resetFilters: function(ev) {
            ev.preventDefault();
            this.collection.resetFilters();
            $("#newdash-theme-search-field").val("");
            $("html, body").animate({
                scrollTop: 0
            }, 600);
            if (window.wpcomNewdash && window.wpcomNewdash.router) {
                window.wpcomNewdash.router.setRoute("/themes/", true);
            } else if (window.wpcomNewdash && window.wpcomNewdash.LoggedOutRouter) {
                window.wpcomNewdash.LoggedOutRouter.navigate("/themes/", {
                    trigger: false
                });
            }
        },
        render: function() {
            var _this = this;
            $(window).on("scroll.lazyLoad", _.throttle(function() {
                _this.checkScroll();
            }, 400));
            if (this.firstRender) {
                statUtils.bumpStat("showcase-scroll-views", "home");
                statUtils.bumpStat("newdash_pageviews", "route");
            }
            this.renderArea();
            this.themeFilterView.render();
            this.themeSearchView.render();
            this.renderThemes();
            this.renderFooter();
            this.checkScroll();
        },
        renderArea: function() {
            var templateHtml, themeArea = $(".newdash-change-theme .wrap"), themeCollectionArea = $(".theme-collection"), themeBrowserArea = $(this.themeBrowserArea), pageHeader = themeArea.find(".change-themes-header h2"), pageHeaderLink = pageHeader.find("a");
            if (themeArea.length < 1) {
                noticeUtils.error(newdashI18n.get([ "notices", "theme list error" ]));
                return;
            }
            if (themeBrowserArea.length < 1) {
                templateHtml = '<div id="theme-browser" class="theme-browser"></div>';
                themeArea.append(templateHtml);
                themeBrowserArea = $(this.themeBrowserArea);
            }
            if (themeBrowserArea.length < 1) {
                noticeUtils.error(newdashI18n.get([ "notices", "theme list error" ]));
                return;
            }
            if (pageHeaderLink.length) {
                pageHeader.text(pageHeaderLink.text());
            }
            _.invoke(this.themeViews, "unload");
            this.themeViews = [];
            if (themeCollectionArea.length < 1) {
                templateHtml = '<div class="theme-collection"></div>';
                themeBrowserArea.append(templateHtml);
                this.setElement($(".theme-collection"));
            }
            if (this.collection.isBlogSelected()) {
                this.moveActiveThemeToTop();
            }
            this.$el.text("");
            this.firstRender = false;
        },
        renderThemes: function() {
            var _this = this;
            if (this.collection.length < 1) {
                _this.$el.html(templateFactory.fetch("no-themes-found", {}));
                return;
            }
            _.each(this.collection.paginated(), function(theme) {
                var themeView = new ThemeOptionView({
                    model: theme
                });
                if (!themeView) {
                    return;
                }
                _this.themeViews.push(themeView);
                _this.$el.append(themeView.render().el);
            });
        },
        renderFooter: function() {
            this.footerView = this.footerView || new ThemeFooterView({
                collection: this.collection
            });
            if (this.footerView) {
                this.footerView.render();
            }
        },
        resizing: function(_this) {
            clearTimeout(_this.resizeTimer);
            _this.resizeTimer = setTimeout(function() {
                _this.checkIdeal();
                _this.checkScroll();
            }, 100);
        },
        checkScroll: function() {
            var $w = $(window), top = $w.scrollTop(), bottom = top + $w.height(), threshold;
            if (!this.$el) {
                return;
            }
            threshold = this.$el.offset().top + this.$el.outerHeight(false) - $w.height();
            threshold = Math.round(threshold * .9);
            this.collection.viewport = {
                y1: top,
                y2: bottom,
                w: $w.width()
            };
            if (threshold > 0 && bottom > threshold) {
                this.collection.incrementCurrentPage();
                this.renderThemes();
                if (this.collection.currentPage - 1 < this.collection.length / this.collection.themesPerPage) {
                    statUtils.bumpStat("showcase-scroll-views", "page-" + (this.collection.currentPage + 1));
                    statUtils.bumpStat("newdash_pageviews", "scroll");
                    statUtils.recordPageView("/themes/scrolled", "Themes > Scrolled Page View");
                    statUtils.recordEvent("Themes", "Loaded Next Page", "Page " + (this.collection.currentPage + 1));
                }
            }
            this.collection.checkVisible();
        },
        idealSrcWidth: function() {
            var width = 420, hiDPI = window.matchMedia && (window.matchMedia("only screen and (min-resolution: 124dpi), only screen and (min-resolution: 1.3dppx), only screen and (min-resolution: 48.8dpcm)").matches || window.matchMedia("only screen and (-webkit-min-device-pixel-ratio: 1.3), only screen and (-o-min-device-pixel-ratio: 2.6/2), only screen and (min--moz-device-pixel-ratio: 1.3), only screen and (min-device-pixel-ratio: 1.3)").matches) || window.devicePixelRatio && window.devicePixelRatio > 1.3;
            return hiDPI ? width * 2 : width;
        },
        checkIdeal: function() {
            var newWidth = this.idealSrcWidth();
            if (this.collection.modelWidth !== newWidth) {
                this.collection.modelWidth = newWidth;
                this.collection.trigger("idealWidthChanged");
            }
        }
    });
    return ThemeCollectionView;
});

define("ThemeDetailsView", [ "templateFactory", "ThemeOption", "ThemeDialogView", "noticeUtils", "statUtils", "newdashI18n" ], function(templateFactory, ThemeOptionModel, ThemeDialogView, noticeUtils, statUtils, newdashI18n) {
    var $ = jQuery, ThemeDetailsView = Backbone.View.extend({
        el: ".theme-details-area",
        model: ThemeOptionModel,
        events: {
            "click .activate": "showActivateDialog",
            "click .purchase": "showPurchaseDialog",
            "click .demo": "trackDemoButton",
            "click .edit": "trackEditButton",
            "click .widget ul a": "bumpStats"
        },
        initialize: function() {
            this.listenTo(this.model, "remove", this.unload);
            this.listenTo(this.model, "themeUpdated", this.themeUpdated);
            _.bindAll(this, "render");
            this.render();
        },
        unload: function() {
            $(".notice .undo-theme-change").off("click");
            this.remove();
        },
        activateTheme: function() {
            var _this = this, blog;
            if (this.model.collection.isBlogSelected()) {
                blog = this.model.collection.selectedBlog;
            } else if (this.model.collection.singleBlog) {
                blog = this.model.collection.singleBlog;
            }
            if (!blog) {
                return;
            }
            blog.setActiveTheme(this.model).fail(function() {
                _this.model.trigger("failedSync", newdashI18n.get([ "notices", "theme activate error" ]));
            });
            this.model.trigger("themeUpdated", blog);
        },
        showPurchaseDialog: function(ev) {
            if (this.model.collection.loggedOut) {
                return;
            }
            ev.preventDefault();
            statUtils.recordEvent("Themes", "Clicked Purchase");
            if (this.model.collection.isBlogSelected() || this.model.collection.singleBlog) {
                var themeProductId = "39", blog = this.model.collection.isBlogSelected() ? this.model.collection.selectedBlog : this.model.collection.singleBlog;
                window.location = "/checkout/" + blog.get("blogId") + "/" + themeProductId + "/" + this.model.get("id") + "/?ref=showcase-theme";
                return false;
            }
            this.showDialog("purchase");
            return false;
        },
        showActivateDialog: function(ev) {
            if (this.model.collection.loggedOut) {
                return;
            }
            ev.preventDefault();
            if (this.model.collection.isBlogSelected() || this.model.collection.singleBlog) {
                this.activateTheme();
                return false;
            }
            this.showDialog("activate");
            return false;
        },
        showDialog: function(type) {
            new ThemeDialogView({
                model: this.model,
                type: type
            });
        },
        bumpStats: function(ev) {
            var helpLink = $(ev.target).data("title");
            statUtils.bumpStat("showcase-footer-links", helpLink);
        },
        prepareDataForTemplate: function() {
            var lowercaseName = this.model.get("id"), dir, lang = newdashI18n.get([ "user_data", "locale" ]), templateOptions = {
                authorAndUri: '<a href="' + this.model.get("author_uri") + '">' + this.model.get("author") + "</a>",
                themeDescription: this.model.get("description_long"),
                premiumTheme: this.model.get("price").value > 0,
                purchaseUrl: "/themes/" + lowercaseName + "/purchase/",
                activateUrl: "/themes/" + lowercaseName + "/",
                detailsUrl: "/themes/" + lowercaseName + "/",
                supportUrl: "/themes/" + lowercaseName + "/support/",
                downloadUrl: this.model.get("download_uri") !== "" ? this.model.get("download_uri") : false,
                demoUrl: this.model.has("demo_uri") ? this.model.get("demo_uri") : lowercaseName.replace("-", "") + "demo.wordpress.com"
            };
            if (_.isArray(lang)) {
                if (3 === window.location.host.split(".").length) {
                    lang = window.location.host.split(".")[0];
                } else {
                    lang = "en";
                }
            }
            templateOptions.launchDate = moment(this.model.get("date_launched")).lang(lang).format("LL");
            if (this.model.collection.isBlogSelected()) {
                templateOptions.supportUrl = "/themes/" + this.model.collection.selectedBlog.get("blogUrl") + "/" + lowercaseName + "/support/";
                templateOptions.detailsUrl = "/themes/" + this.model.collection.selectedBlog.get("blogUrl") + "/" + lowercaseName + "/";
                if (this.model.collection.selectedBlog.get("activeTheme").get("id") === this.model.get("id")) {
                    templateOptions.active = true;
                    templateOptions.customizeUrl = "http://" + this.model.collection.selectedBlog.get("blogUrl") + "/wp-admin/customize.php?url=" + encodeURIComponent(window.location);
                }
            }
            if (templateOptions.premiumTheme) {
                templateOptions.premiumThemePurchased = !!this.model.get("purchased");
                if (!templateOptions.premiumThemePurchased) {
                    templateOptions.price = this.model.get("price").display;
                }
            }
            if (this.model.collection.loggedOut || wpcomThemeData.userHasNoBlog) {
                dir = templateOptions.premiumTheme ? "premium/" : "pub/";
                templateOptions.signUpUrl = "https://wordpress.com/signup/?source=showcase&theme=" + dir + lowercaseName;
            }
            templateOptions = _.defaults(templateOptions, this.model.attributes);
            return templateOptions;
        },
        render: function() {
            var templateHtml, pageHeader = $(".change-themes-header h2"), themeDetailsArea = $(".theme-details-area"), themeArea = $(".newdash-change-theme .wrap");
            statUtils.bumpStat("newdash_pageviews", "route");
            if (themeArea.length < 1) {
                noticeUtils.error(newdashI18n.get([ "notices", "theme list error" ]));
                return;
            }
            if (themeDetailsArea.length >= 1) {
                themeDetailsArea.remove();
            }
            pageHeader.html('<a href="/themes/">' + pageHeader.text() + "</a>");
            templateHtml = '<div id="theme-details-area" class="theme-details-area"></div>';
            themeArea.append(templateHtml);
            this.setElement($(".theme-details-area"));
            templateHtml = templateFactory.fetch("theme-details", this.prepareDataForTemplate());
            this.$el.html(templateHtml);
            return this;
        },
        themeUpdated: function(blog) {
            new ThemeDialogView({
                model: blog.get("activeTheme"),
                type: "post-activation",
                blogUrl: blog.getBlogUrl()
            });
        },
        trackDemoButton: function() {
            statUtils.recordEvent("Themes", "Clicked Demo");
        },
        trackEditButton: function() {
            statUtils.recordEvent("Themes", "Clicked Edit");
        }
    });
    return ThemeDetailsView;
});

define("ThemeSupportView", [ "ThemeDetailsView" ], function(ThemeDetailsView) {
    var $ = jQuery, ThemeSupportView = ThemeDetailsView.extend({
        prepareDataForTemplate: function() {
            var templateOptions = ThemeDetailsView.prototype.prepareDataForTemplate.apply(this), showcaseDocumentation = this.model.get("extended").support_documentation;
            templateOptions.supportUrl = null;
            if (!_.isEmpty(showcaseDocumentation)) {
                templateOptions.themeDescription = showcaseDocumentation;
            }
            return templateOptions;
        }
    });
    return ThemeSupportView;
});

define("FooterView", [ "templateFactory" ], function(templateFactory) {
    var $ = jQuery, FooterView = Backbone.View.extend({
        templateName: "newdash-footer",
        templateArgs: {},
        initialize: function(args) {
            this.setTemplate(args.templateName, args.templateArgs);
            this.hideOldFooter();
            this.addFooterArea();
            this.render();
        },
        restoreOldFooter: function() {
            $("#footer").addClass("show");
            this.remove();
        },
        unload: function() {
            this.restoreOldFooter();
        },
        render: function() {
            var templateHtml = this.getFooterTemplate();
            this.$el.html(templateHtml);
            return this;
        },
        setTemplate: function(templateName, templateArgs) {
            if (templateName) {
                this.templateName = templateName;
            }
            if (templateArgs) {
                this.templateArgs = templateArgs;
            }
        },
        getFooterTemplate: function() {
            return templateFactory.fetch(this.templateName, this.templateArgs);
        },
        addFooterArea: function() {
            if ($("#newdash-footer").length > 0) {
                return;
            }
            var templateHtml = '<footer id="newdash-footer" class="site-footer"></footer>';
            $("#footer").after(templateHtml);
            this.setElement($("#newdash-footer"));
        },
        hideOldFooter: function() {
            $("#footer").removeClass("show");
        }
    });
    return FooterView;
});

define("changeTheme", [ "ThemeCollection", "ThemeCollectionView", "ThemeDetailsView", "ThemeSupportView", "ThemeOption", "BlogModel", "noticeUtils", "newdashI18n", "FooterView" ], function(ThemeCollection, ThemeCollectionView, ThemeDetailsView, ThemeSupportView, ThemeOption, BlogModel, noticeUtils, newdashI18n, FooterView) {
    _.mixin({
        indexWhere: function(array, properties) {
            return _.indexOf(array, _.findWhere(array, properties));
        },
        replaceByKey: function(array, element, key) {
            var i, props = {};
            props[key] = element[key];
            if (~(i = _.indexWhere(array, props))) {
                array[i] = element;
            }
        }
    });
    var $ = jQuery, wpcomChangeTheme = {
        init: function() {
            var wpcomThemeData = window.wpcomThemeData || {}, themes, theme, activeTheme;
            this.showFooter();
            if (wpcomThemeData.notices) {
                this.showNotices(wpcomThemeData.notices);
            }
            if (!wpcomThemeData.themes) {
                noticeUtils.error(newdashI18n.get([ "notices", "no themes found" ]));
                return;
            }
            themes = wpcomThemeData.themes;
            if (!this.themeCollection || this.themeCollection.length < 1) {
                this.themeCollection = new ThemeCollection(themes);
            }
            this.themeCollection.loggedOut = wpcomThemeData.loggedOut;
            if (wpcomThemeData.isBlogSelected) {
                activeTheme = _.find(themes, function(item) {
                    return item.id === wpcomThemeData.blog.activeTheme;
                });
                activeTheme = new ThemeOption(activeTheme);
                if (activeTheme) {
                    this.themeCollection.selectedBlog = new BlogModel({
                        blogId: wpcomThemeData.blog.blogId,
                        blogUrl: wpcomThemeData.blog.blogUrl,
                        activeTheme: activeTheme
                    });
                } else {
                    wpcomThemeData.isBlogSelected = false;
                }
            }
            if (wpcomThemeData.userHasSingleBlog) {
                activeTheme = _.find(themes, function(item) {
                    return item.id === wpcomThemeData.blog.activeTheme;
                });
                activeTheme = new ThemeOption(activeTheme);
                if (activeTheme) {
                    this.themeCollection.singleBlog = new BlogModel({
                        blogId: wpcomThemeData.blog.blogId,
                        blogUrl: wpcomThemeData.blog.blogUrl,
                        activeTheme: activeTheme
                    });
                } else {
                    wpcomThemeData.userHasSingleBlog = false;
                }
            }
            if (wpcomThemeData.selectedTheme) {
                theme = this.themeCollection.findByName(wpcomThemeData.selectedTheme);
            }
            if (theme) {
                this.showTheme(theme, wpcomThemeData);
            } else {
                this.themeCollection.setDefaultFilter([ "all-filters", "all-columns", "all-colors", "all-prices" ]);
                if (wpcomThemeData.filter) {
                    wpcomThemeData.filters = wpcomThemeData.filter.split("+");
                }
                if (wpcomThemeData.filters) {
                    this.themeCollection.addFilter(wpcomThemeData.filters);
                }
                if (wpcomThemeData.type) {
                    this.themeCollection.addFilter(wpcomThemeData.type);
                }
                if (!wpcomThemeData.filter && !wpcomThemeData.filters && !wpcomThemeData.type) {
                    this.themeCollection.resetFilters();
                }
                if (wpcomThemeData.search) {
                    this.themeCollection.doSearch(wpcomThemeData.search);
                }
                if (!wpcomThemeData.filter && !wpcomThemeData.filters && !wpcomThemeData.search) {
                    this.themeCollection.addDefaultFilter([ "staff-picks" ]);
                }
                if (!this.themeCollectionView) {
                    this.themeCollectionView = new ThemeCollectionView({
                        collection: this.themeCollection
                    });
                }
            }
            window.scrollTo(0, 0);
        },
        unload: function() {
            if (this.themeCollection) {
                this.themeCollection.unload();
                this.themeCollection = null;
            }
            if (this.themeCollectionView) {
                this.themeCollectionView.unload();
                this.themeCollectionView = null;
            }
            if (this.themeDetailsView) {
                this.themeDetailsView.unload();
                this.themeDetailsView = null;
            }
            if (this.footer) {
                this.footer.unload();
                this.footer = null;
            }
        },
        showNotices: function(notices) {
            _.each(notices, function(group, groupName) {
                if (_.isObject(group)) {
                    var noticeFunction = noticeUtils.notice;
                    if ("errors" === groupName) {
                        noticeFunction = noticeUtils.error;
                    }
                    if ("success" === groupName) {
                        noticeFunction = noticeUtils.success;
                    }
                    _.each(group, function(message) {
                        noticeFunction(message);
                    });
                } else {
                    noticeUtils.notice(group);
                }
            });
        },
        isSameBlog: function(route) {
            if ("undefined" === typeof window.wpcomThemeData || !window.wpcomThemeData || $(".newdash-change-theme").length < 1) {
                return false;
            }
            if ("undefined" === typeof window.wpcomThemeData.isBlogSelected || !window.wpcomThemeData.isBlogSelected) {
                return true;
            } else {
                if (window.wpcomThemeData.blog.blogUrl === route[1]) {
                    return true;
                }
            }
            return false;
        },
        parseRoute: function(route) {
            var themeData = {};
            if ("themes" === route[0]) {
                route.shift();
            }
            if (_.isEmpty(route)) {
                return themeData;
            }
            if (-1 !== route[0].indexOf(".")) {
                themeData.blog = route.shift();
                return _.defaults(themeData, this.parseRoute(route));
            }
            if ("filter" === route[0] && route[1]) {
                themeData.filter = route[1];
            } else if ("type" === route[0] && route[1]) {
                themeData.type = route[1];
            } else if ("search" === route[0] && route[1]) {
                themeData.search = route[1];
            } else if (route[0]) {
                themeData.theme = route[0];
            }
            if ("support" === route[1] && themeData.theme) {
                themeData.support = true;
            }
            if ("filter" === route[0] && "type" === route[2] && route[3]) {
                themeData.type = route[3];
            }
            if ("search" === route[0] && "type" === route[2] && route[3]) {
                themeData.type = route[3];
            }
            return themeData;
        },
        updateThemeDataForRoute: function(route) {
            if (!window.wpcomThemeData) {
                window.wpcomThemeData = {};
            }
            delete window.wpcomThemeData.selectedTheme;
            delete window.wpcomThemeData.filters;
            delete window.wpcomThemeData.filter;
            delete window.wpcomThemeData.type;
            delete window.wpcomThemeData.search;
            delete window.wpcomThemeData.support;
            window.wpcomThemeData.notices = {
                errors: [],
                notices: []
            };
            var themeData = this.parseRoute(route);
            if (themeData.theme && this.isValidTheme(themeData.theme)) {
                window.wpcomThemeData.selectedTheme = themeData.theme;
            }
            if (themeData.filter) {
                window.wpcomThemeData.filters = themeData.filter.split("+");
            }
            if (themeData.type) {
                window.wpcomThemeData.type = themeData.type;
            }
            if (themeData.search) {
                window.wpcomThemeData.search = themeData.search;
            }
            if (themeData.support) {
                window.wpcomThemeData.support = true;
            }
        },
        buildQuery: function(route) {
            var query = [], themeData = this.parseRoute(route);
            if (themeData.theme && this.isValidTheme(themeData.theme)) {
                query.push("theme=" + themeData.theme);
            }
            if (themeData.theme && themeData.support) {
                query.push("support=true");
            }
            if (themeData.filters) {
                query.push("filter=" + themeData.filters.join("+"));
            } else if (themeData.filter) {
                query.push("filter=" + themeData.filter);
            }
            if (themeData.type) {
                query.push("type=" + themeData.type);
            }
            if (themeData.search) {
                query.push("search=" + themeData.search);
            }
            if (themeData.blog) {
                query.push("blog_url=" + themeData.blog);
            }
            return query.join("&");
        },
        isValidTheme: function(theme) {
            if (!window.wpcomThemeData || !window.wpcomThemeData.themes) {
                return false;
            }
            return _.any(window.wpcomThemeData.themes, function(aTheme) {
                var name = aTheme.id;
                return theme.toLowerCase() === name.toLowerCase();
            });
        },
        showFooter: function() {
            if (!this.footer) {
                this.footer = new FooterView({
                    templateName: "newdash-themes-footer"
                });
            }
        },
        showTheme: function(theme, themeData) {
            function show(updatedModel) {
                if (updatedModel) {
                    _.replaceByKey(themeData.themes, theme.attributes, "id");
                    this.removeThemeDetailLoader();
                }
                if (themeData.support) {
                    this.themeSupportView = new ThemeSupportView({
                        model: theme
                    });
                } else {
                    this.themeDetailsView = new ThemeDetailsView({
                        model: theme
                    });
                }
            }
            if (!theme.get("extended")) {
                this.showThemeDetailLoader();
                theme.once("sync", show, this);
                theme.fetch();
            } else {
                show();
            }
        },
        removeThemeDetailLoader: function() {
            $(".loader").hide();
        },
        showThemeDetailLoader: function() {
            var $entryContent = $(".entry-content");
            if ($entryContent.length < 1) {
                $("#tab-content").append('<div class="loader theme-detail-loader-indirect"></div>');
            } else {
                $entryContent.append('<div class="loader theme-detail-loader-direct"></div>');
            }
        }
    };
    return wpcomChangeTheme;
});

(function(root, factory) {
    if (typeof define === "function" && define.amd) {
        define("gravatarProfile", [ "newdashI18n" ], factory);
    } else {
        root.gravatarProfile = factory();
    }
})(this, function(newdashI18n) {
    var gravatarProfile, $mySites, $ = jQuery;
    gravatarProfile = {
        ajaxUrl: "/wp-admin/admin-ajax.php",
        ajaxAction: "newdash_save_profile_sites",
        init: function(selector, nonce, ajaxUrl, ajaxAction) {
            var self = this, $publicSites;
            $mySites = $(selector);
            $publicSites = $mySites.find(".my-public-sites");
            if (ajaxUrl) {
                this.ajaxUrl = ajaxUrl;
            }
            if (ajaxAction) {
                this.ajaxAction = ajaxAction;
            }
            if (nonce) {
                this.nonce = nonce;
            }
            this.maybeToggleAvailableSites();
            $mySites.on("click.gravatar-profile", ".toggle-add-site", function(e) {
                e.preventDefault();
                $(".new-link").slideUp();
                $(".new-wp-site").slideToggle();
            });
            $mySites.on("click.gravatar-profile", ".toggle-add-link", function(e) {
                e.preventDefault();
                $(".new-wp-site").slideUp();
                $(".new-link").slideToggle();
            });
            $mySites.on("click.gravatar-profile", ".my-public-sites li .remove", function(e) {
                var $site = $(this).closest("li"), singleSite = $(".add-single-site").data(), data = $site.data();
                e.preventDefault();
                if (singleSite && data.blog_id === singleSite.blog_id) {
                    $(".add-single-site").removeClass("hidden");
                }
                $('.new-wp-site li[data-blog_id="' + data.blog_id + '"]').removeClass("hidden");
                self.maybeToggleAvailableSites();
                $site.remove();
                if ($publicSites.find("li").length === 0) {
                    $publicSites.addClass("hidden");
                }
                self.saveSites();
            });
            $mySites.on("click.gravatar-profile", ".add-single-site", function(e) {
                var $site, data = $(this).data();
                e.preventDefault();
                $site = self.newSite(data);
                $publicSites.append($site);
                $publicSites.removeClass("hidden");
                $(this).addClass("hidden");
                self.saveSites();
            });
            $mySites.on("click.gravatar-profile", ".new-wp-site .add", function(e) {
                e.preventDefault();
                var $sitesToAdd = $mySites.find(".available-wp-sites li input:checked");
                if ($sitesToAdd.length === 0) {
                    return;
                }
                $sitesToAdd.each(function(i, e) {
                    var $el = $(e).closest("li"), data = $el.data(), $site;
                    $site = self.newSite(data);
                    $publicSites.append($site);
                    $publicSites.removeClass("hidden");
                    $el.addClass("hidden");
                    $el.find("input").prop("checked", false);
                });
                self.maybeToggleAvailableSites();
                $(".new-wp-site").css("display", "none");
                self.saveSites();
            });
            if (typeof $.fn.sortable === "undefined") {
                $.getScript(document.location.protocol + "//s0.wp.com/wp-includes/js/jquery/ui/jquery.ui.sortable.min.js", function() {
                    self.initSortable();
                });
            } else {
                this.initSortable();
            }
            $mySites.on("click.gravatar-profile", ".new-wp-site .cancel", function(e) {
                e.preventDefault();
                $(".new-wp-site").slideToggle();
            });
            $mySites.on("click.gravatar-profile", ".new-link .add", function(e) {
                var attr, urlBits, $site, $url = $(".new-link input.url"), url = $url.val(), $title = $(".new-link input.title"), title = $title.val();
                e.preventDefault();
                if (!/^https?:\/\/.*/.test(url)) {
                    url = "http://" + url;
                }
                urlBits = document.createElement("a");
                urlBits.href = url;
                attr = {
                    url: url,
                    title: title,
                    domain: urlBits.hostname
                };
                $site = self.newSite(attr);
                $(".my-public-sites").append($site);
                $title.val("");
                $url.val("");
                $publicSites.removeClass("hidden");
                self.saveSites();
                $(".new-link").slideToggle();
            });
            $mySites.on("click.gravatar-profile", ".new-link .cancel", function(e) {
                e.preventDefault();
                $(".new-link").slideToggle();
            });
            return this;
        },
        initSortable: function() {
            var self = this;
            $mySites.find(".my-public-sites").sortable({
                update: function() {
                    self.saveSites();
                }
            });
        },
        maybeToggleAvailableSites: function() {
            if ($(".available-wp-sites li").not(".hidden").length === 0) {
                $(".toggle-add-site").addClass("hidden");
            } else {
                $(".toggle-add-site").removeClass("hidden");
            }
        },
        newSite: function(attr) {
            var $site = $("<li />");
            $site.data(attr);
            $site.append('<img src="https://s1.wp.com/mshots/v1/' + encodeURI(attr.url) + '?w=100">');
            $site.append($("<a />").attr("href", this.escUrl(attr.url)).attr("title", this.escHtml(attr.title)).append("<strong>" + this.escHtml(attr.title) + "</strong>").append("<small>" + this.escHtml(attr.domain) + "</small>"));
            $site.append('<span class="remove">' + newdashI18n.get([ "settings", "Remove" ]) + "</span>");
            return $site;
        },
        escHtml: function(text) {
            return $("<span />").text(text).html().replace(/'/g, "&#039;").replace(/"/g, "&quot;");
        },
        escUrl: function(text) {
            var parser = document.createElement("a");
            parser.href = text;
            return "http://" + parser.host + parser.pathname + parser.search;
        },
        saveSites: function() {
            var jqxhr, data, sites = [], $sites = $mySites.find(".my-public-sites li");
            $sites.each(function(i, el) {
                var $site = $(el), data;
                data = $site.data();
                data = {
                    url: data.url,
                    title: data.title,
                    blog_id: data.blog_id
                };
                sites.push(data);
            });
            data = {
                action: this.ajaxAction,
                nonce: this.nonce,
                sites: JSON.stringify(sites)
            };
            jqxhr = $.ajax({
                type: "POST",
                url: this.ajaxUrl,
                data: data,
                dataType: "json"
            });
            jqxhr.fail(this.error);
        },
        error: function(resp) {
            if (typeof console !== "undefined") {
                console.log(resp);
            }
        },
        unload: function() {
            $mySites.off(".gravatar-profile");
        }
    };
    return gravatarProfile;
});

define("mySettings", [ "localStorage", "urlUtils", "statUtils", "gravatarProfile", "newdashI18n", "statUtils" ], function(localStorage, urlUtils, statUtils, gravatarProfile, newdashI18n, statUtils) {
    var $ = jQuery, w = window, wpcomMySettings = {
        passTimeout: false,
        langId: 0,
        userRecoveryPhoneCountry: 0,
        userRecoveryPhoneNumber: 0,
        gravatarProfile: false,
        backupCodes: false,
        init: function() {
            this.unload();
            var self = this;
            StrengthBarL10n = {
                shortPass: "Too Short",
                badPass: "Bad",
                goodPass: "Good",
                strongPass: "Strong"
            };
            this.langId = $("#lang_id option:selected").val();
            this.userRecoveryPhoneCountry = $("#userRecoveryPhoneCountry option:selected").val();
            this.userRecoveryPhoneNumber = $("#user_recovery_phone_number").val();
            if (-1 != w.location.search.indexOf("pass_result")) {
                this.resetSettingsLs();
                if (-1 != w.location.search.indexOf("pass_result=1")) $(".pass-result").html("Successfully changed your password."); else $(".pass-result").html("Unable to change your password.");
                $(".pass-result").show();
                this.toggleSection($("a#password-section").parent());
            } else if (-1 != w.location.search.indexOf("new_email_result")) {
                this.toggleSection($("a#account-section").parent());
                $("p.errormsg").remove();
                if (-1 != w.location.search.indexOf("new_email_result=1")) $("[name=email]").after('<p class="validationmsg new-email-result">Successfully updated your email address.</p>'); else $("[name=email]").after('<p class="errormsg new-email-result">Unable to update your email address.</p>');
                $("p.errormsg").hide().slideDown(200);
            } else if (-1 != w.location.search.indexOf("pay_msg")) {
                this.resetSettingsLs();
                if (-1 != w.location.search.indexOf("pay_msg=1")) {
                    $("#payment-notice").html("Disbursements Info Saved");
                    $("#payment-notice").show();
                } else if (-1 != w.location.search.indexOf("pay_msg=2")) {
                    $("#payment-notice").html("Missing Required Information");
                    $("#payment-notice").show();
                } else if (-1 != w.location.search.indexOf("pay_msg=3")) {
                    $("#payment-notice").html("Invalid Tax ID");
                    $("#payment-notice").show();
                } else if (-1 != w.location.search.indexOf("pay_msg=0")) {
                    $("#payment-notice").html("Unknown Error Occurred");
                    $("#payment-notice").show();
                }
                this.toggleSection($("a#disbursements-section").parent());
            }
            $("div#tab-content").on("click.wpcomMySettings", "div.submit-box input[type=button]", function() {
                statUtils.recordEvent("Me", "Clicked Save Changes");
                self.save($(this));
            });
            $("div#tab-content").on("click.wpcomMySettings", "#save-profile", function(e) {
                e.preventDefault();
                statUtils.recordEvent("Me", "Clicked Save Profile Details");
                self.save($(this));
            });
            $("div#tab-content").on("click.wpcomMySettings", "#payment-clear-stored-details", function(e) {
                e.preventDefault();
                $("#payment-method-row .spinner").spin("small");
                $.post(urlUtils.getAjaxUrl(), {
                    action: "payment_clear_stored",
                    nonce: $("input#newdash_nonce").val()
                }, function(data) {
                    statUtils.bumpStat("newdash_settings", "clear_payment_details");
                    $("#payment-method-row td.main p").show().filter(".existing").remove();
                });
            });
            $("div#my-apps-content").on("click.wpcomMySettings", "a.button-secondary", function(e) {
                e.preventDefault();
                var self = this;
                $.post(urlUtils.getAjaxUrl(), {
                    action: "revoke-oauth-connection",
                    url: this.href
                }, function() {
                    statUtils.bumpStat("newdash_settings", "oauth_connection_revoke");
                    wpcomMySettings.resetSettingsLs();
                    $("tr." + self.name).empty();
                    $("tr." + self.name).append('<td colspan="3" class="connection-revoked">Application "' + self.id + '" has been removed</td>');
                });
            });
            $("div#account-content").on("click.wpcomMySettings", "a.cancel-new-email", function(e) {
                e.preventDefault();
                $.post(urlUtils.getAjaxUrl(), {
                    action: "cancel-new-email",
                    nonce: $("input#newdash_nonce").val()
                }, function() {
                    statUtils.bumpStat("newdash_settings", "new_email_cancel");
                    wpcomMySettings.resetSettingsLs();
                    $("p.new-email-msg.errormsg").remove();
                });
            });
            $("div#account-content").on("change", "#lang_id", function() {
                this.langId = $("#lang_id option:selected").val();
                if (this.langId !== "1") {
                    $("#translator-option").show();
                } else {
                    $("#translator-option").hide();
                }
            });
            var $securityTab = $("div#security-content");
            $securityTab.on("click.wpcomMySettings", "#twostep-wiz-progress .previous", function(e) {
                if (TwoStep.enabled) return;
                var step = 1;
                var $this = $(this);
                if ($this.hasClass("step2")) step = 2; else if ($this.hasClass("step3")) step = 3;
                e.preventDefault();
                wpcomMySettings.twostepMoveToStep(step);
            });
            $securityTab.on("click.wpcomMySettings", "#twostep-wiz-step2 .smartphones li", function(e) {
                e.preventDefault();
                var $this = $(this);
                var phone = "";
                if ($this.hasClass("iphone")) {
                    phone = "iphone";
                } else if ($this.hasClass("android")) {
                    phone = "android";
                } else if ($this.hasClass("blackberry")) {
                    phone = "blackberry";
                } else {
                    return;
                }
                if (TwoStep.smartphones[phone].download) {
                    $("#twostep-wiz-step2 .download span").html($("<div/>").html(TwoStep.smartphones[phone].download).text());
                    $("#twostep-wiz-step2 .download").show();
                } else {
                    $("#twostep-wiz-step2 .download").hide();
                }
                if (TwoStep.smartphones[phone].search) {
                    $("#twostep-wiz-step2 .search span").html($("<div/>").html(TwoStep.smartphones[phone].search).text());
                    $("#twostep-wiz-step2 .search").show();
                } else {
                    $("#twostep-wiz-step2 .search").hide();
                }
                $("#twostep-wiz-step2 .scan span").html($("<div/>").html(TwoStep.smartphones[phone].scan).text());
                $("#twostep-wiz-step2 div.qrcode img").prop("src", "https://chart.googleapis.com/chart?cht=qr&chs=300x300&chld=H|0&chl=" + encodeURIComponent(TwoStep.smartphones[phone].link));
                $this.parent().hide();
                $(".download-info").show();
                $(".skip-links").hide();
                $("#twostep-wiz-step3 div." + phone).show();
                if ("blackberry" != phone) {
                    $("#twostep-manual-instructions").show();
                    $("#twostep-wiz-step3 .step3a").show();
                    $("#twostep-wiz-step3 .step3b").hide();
                }
            });
            $securityTab.on("click.wpcomMySettings", "#twostep-wiz-step2 #twostep-wizard-skip-download a", function(e) {
                e.preventDefault();
                $("#twostep-wizard-skip-download span").spin("small");
                $.ajax({
                    url: urlUtils.getAjaxUrl(),
                    data: {
                        action: "enable-two-step",
                        nonce: $("#twostep-nonce-enable-two-step").val()
                    },
                    dataType: "JSON",
                    success: function(response) {
                        $("#twostep-wizard-skip-download span").spin(false);
                        $(".download-info, .backupcodes, a.skip-links, .confirm-print").hide();
                        $(".smartphones, .verify-code, a#twostep-manual-instructions").show();
                        if (-1 != response) {
                            $("#twostep-wiz-step3 div").hide();
                            $("#twostep-wiz-step3 div.iphone").show();
                            $("#twostep-wiz-step3 .qrcode img").prop("src", response.qr_url);
                            $("#twostep-wiz-step3 .key strong").text(response.secret);
                            wpcomMySettings.twostepMoveToStep(3, function() {
                                $("#twostep-verification-code").focus();
                            });
                        }
                    }
                });
            });
            $securityTab.on("click.wpcomMySettings", "#twostep-wiz-step2 #twostep-wizard-sms a", function(e) {
                e.preventDefault();
                $("#twostep-wizard-sms span").spin("small");
                $.ajax({
                    url: urlUtils.getAjaxUrl(),
                    data: {
                        action: "enable-two-step",
                        nonce: $("#twostep-nonce-enable-two-step").val()
                    },
                    dataType: "JSON",
                    success: function(response) {
                        $("#twostep-wizard-sms span").spin(false);
                        $(".download-info, .backupcodes, a.skip-links, .confirm-print").hide();
                        $(".smartphones, .verify-code, a#twostep-manual-instructions").show();
                        if (-1 != response) {
                            $("#twostep-wiz-step3 div").hide();
                            $("#twostep-manual-instructions").hide();
                            $("#twostep-barcode-instructions").hide();
                            $("#twostep-wiz-step3 div.sms, #twostep-wiz-step3 div.verify-sms-code").show();
                            $("#twostep-wiz-step3 .key strong").text(response.secret);
                            wpcomMySettings.twostepMoveToStep(3, function() {
                                $("#twostep-sms-number").focus();
                            });
                        }
                    }
                });
            });
            $securityTab.on("click.wpcomMySettings", "#twostep-wiz-step2 .scan span a", function(e) {
                e.preventDefault();
                $("#twostep-wiz-step2 .scan div.qrcode").slideToggle();
            });
            $securityTab.on("click.wpcomMySettings", "#twostep-wiz-step1-next", function(e) {
                e.preventDefault();
                var $this = $(this);
                $this.attr("value", TwoStep.savingText);
                $("#twostep-sms-number-error").fadeOut("fast");
                $(".smartphones").show();
                $(".download-info").hide();
                $.ajax({
                    url: urlUtils.getAjaxUrl(),
                    data: {
                        action: "twostep-save-phone-number",
                        phone_country: $("#twostep-sms-country").val(),
                        phone_number: $("#twostep-sms-number").val(),
                        nonce: $("#twostep-nonce-twostep-save-phone-number").val()
                    },
                    dataType: "JSON",
                    success: function(response) {
                        $this.attr("value", TwoStep.nextText);
                        if (response > 0) {
                            wpcomMySettings.twostepMoveToStep(2);
                        } else {
                            $("#twostep-sms-number-error").fadeIn("fast");
                        }
                    }
                });
            });
            $securityTab.on("click.wpcomMySettings", "#twostep-manual-instructions", function(e) {
                e.preventDefault();
                $("#twostep-verification-code").focus();
                $("#twostep-wiz-step3 .step3a").fadeOut("fast", function() {
                    $("#twostep-wiz-step3 .step3b").fadeIn("fast");
                });
                $(this).fadeOut("fast", function() {
                    $("#twostep-barcode-instructions").fadeIn("fast");
                });
            });
            $securityTab.on("click.wpcomMySettings", "#twostep-barcode-instructions", function(e) {
                e.preventDefault();
                $("#twostep-verification-code").focus();
                $("#twostep-wiz-step3 .step3b").fadeOut("fast", function() {
                    $("#twostep-wiz-step3 .step3a").fadeIn("fast");
                });
                $(this).fadeOut("fast", function() {
                    $("#twostep-manual-instructions").fadeIn("fast");
                });
            });
            $securityTab.on("click.wpcomMySettings", "#twostep-send-sms", function(e) {
                e.preventDefault();
                var $this = $(this);
                $this.attr("value", TwoStep.sendingText);
                $.ajax({
                    url: urlUtils.getAjaxUrl(),
                    data: {
                        action: "twostep-test-sms",
                        nonce: $("#twostep-nonce-twostep-test-sms").val()
                    },
                    success: function(response) {
                        $this.attr("value", TwoStep.sendSMSText);
                        $("#twostep-verification-code").focus();
                    }
                });
            });
            $securityTab.on("click.wpcomMySettings", "#twostep-verify", function(e) {
                e.preventDefault();
                var $this = $(this), $verificationCode = $("#twostep-verification-code"), verificationCode = $verificationCode.val();
                if (!verificationCode) {
                    $verificationCode.addClass("error");
                    $("#twostep-verify-error").fadeIn("fast");
                    return;
                }
                $("#twostep-verify-error").fadeOut("fast");
                $verificationCode.removeClass("error");
                $this.attr("value", TwoStep.verifyingText);
                $.ajax({
                    url: urlUtils.getAjaxUrl(),
                    data: {
                        action: "verify-two-step",
                        code: verificationCode,
                        nonce: $("#twostep-nonce-verify-two-step").val()
                    },
                    success: function(response) {
                        if (response > 0) {
                            $.ajax({
                                url: urlUtils.getAjaxUrl(),
                                data: {
                                    action: "twostep-generate-backup-codes-with-markup",
                                    justTable: 1,
                                    nonce: $("#twostep-nonce-twostep-generate-backup-codes-with-markup").val()
                                },
                                dataType: "JSON",
                                success: function(response) {
                                    $this.attr("value", TwoStep.verifyText);
                                    self.backupCodes = response.codes;
                                    $(".backup-codes-embed div.codes").html(response.table);
                                    wpcomMySettings.twostepMoveToVerifyStep(1);
                                    $verificationCode.val("");
                                }
                            });
                        } else {
                            $("#twostep-verify-error").fadeIn("fast");
                            $verificationCode.addClass("error");
                        }
                    }
                });
            });
            $securityTab.on("click.wpcomMySettings", ".verify-sms-code input[type=button]", function(e) {
                e.preventDefault();
                var $this = $(this), $verificationCode = $("#twostep-sms-verification-code"), verificationCode = $verificationCode.val();
                if (!verificationCode) {
                    $verificationCode.addClass("error");
                    $("#twostep-sms-verify-error").fadeIn("fast");
                    return;
                }
                $("#twostep-sms-verify-error").fadeOut("fast");
                $verificationCode.removeClass("error");
                $this.attr("value", TwoStep.verifyingText);
                $.ajax({
                    url: urlUtils.getAjaxUrl(),
                    data: {
                        action: "verify-two-step",
                        code: verificationCode,
                        nonce: $("#twostep-nonce-verify-two-step").val()
                    },
                    success: function(response) {
                        if (response > 0) {
                            $.ajax({
                                url: urlUtils.getAjaxUrl(),
                                data: {
                                    action: "twostep-generate-backup-codes-with-markup",
                                    justTable: 1,
                                    nonce: $("#twostep-nonce-twostep-generate-backup-codes-with-markup").val()
                                },
                                dataType: "JSON",
                                success: function(response) {
                                    $this.attr("value", TwoStep.verifyText);
                                    self.backupCodes = response.codes;
                                    $(".backup-codes-embed div.codes").html(response.table);
                                    wpcomMySettings.twostepMoveToVerifyStep(1);
                                    $verificationCode.val("");
                                }
                            });
                        } else {
                            $("#twostep-verify-error").fadeIn("fast");
                            $verificationCode.addClass("error");
                            $this.attr("value", TwoStep.verifyText);
                        }
                    }
                });
            });
            $securityTab.on("click.wpcomMySettings", ".verify-backup-code input[type=button]", function(e) {
                e.preventDefault();
                var $this = $(this);
                var parent = $this.closest(".verify-code");
                parent.find(".twostep-error").fadeOut("fast");
                if (self.backupCodes === false) {
                    parent.find("tr.generate-backup-codes .twostep-error ").fadeIn("fast");
                    return;
                }
                if ($.inArray(parent.find("tr.enter-backup-code input[type=text]").val(), self.backupCodes) !== -1) {
                    if (parent.find("tr.enter-printed input[type=text]").val() == TwoStep.printedText) {
                        $.ajax({
                            url: urlUtils.getAjaxUrl(),
                            data: {
                                action: "twostep-create-backup-receipt",
                                nonce: $("#twostep-nonce-twostep-create-backup-receipt").val()
                            },
                            success: function(response) {
                                if (parent.parent().hasClass("backupcodes")) {
                                    TwoStep.enabled = true;
                                    self.backupCodes = false;
                                    wpcomMySettings.twostepMoveToStep(4);
                                    $("#twostep-print-status span").removeClass("off").addClass("on").html(TwoStep.printedText.toUpperCase());
                                    $("#twostep-verification-code").attr("value", "");
                                    $("#twostep-configuration-header, .enter-backup-code, .enter-printed, .verify-backup-code").hide();
                                    $("#twostep-status, .verify-code").show();
                                    $("#twostep-configuration").fadeIn("fast");
                                } else {
                                    window.location.href = window.location.href;
                                }
                            }
                        });
                    } else {
                        parent.find("tr.enter-printed .twostep-error ").fadeIn("fast");
                        return;
                    }
                } else {
                    parent.find("tr.enter-backup-code .twostep-error ").fadeIn("fast");
                    return;
                }
            });
            $securityTab.on("click.wpcomMySettings", "#twostep-print-backup-codes", function(e) {
                e.preventDefault();
                wpcomMySettings.twostepMoveToVerifyStep(1);
                return false;
            });
            $securityTab.on("click.wpcomMySettings", "a.disable-twostep", function(e) {
                e.preventDefault();
                $.ajax({
                    url: urlUtils.getAjaxUrl(),
                    data: {
                        action: "twostep-send-sms",
                        nonce: $("#twostep-nonce-twostep-send-sms").val()
                    },
                    success: function() {
                        $("#twostep-configuration-header, .enter-backup-code, .enter-printed, .verify-backup-code").show();
                    }
                });
                $("#twostep-disable-message").slideDown("fast", function() {
                    $("#twostep-disable-code").focus();
                });
            });
            $securityTab.on("click.wpcomMySettings", "#twostep-confirm-disable", function(e) {
                e.preventDefault();
                var $this = $(this), $disableCode = $("#twostep-disable-code"), disableCode = $disableCode.val();
                if (!disableCode) {
                    $disableCode.addClass("error");
                    $("#twostep-disable-error").fadeIn("fast");
                    return;
                }
                $("#twostep-disable-error").fadeOut("fast");
                $disableCode.removeClass("error");
                $this.attr("value", TwoStep.verifyingText);
                $.ajax({
                    url: urlUtils.getAjaxUrl(),
                    data: {
                        action: "disable-two-step",
                        code: disableCode,
                        nonce: $("#twostep-nonce-disable-two-step").val()
                    },
                    success: function(response) {
                        if ("0" === response) {
                            $this.attr("value", TwoStep.disableText);
                            $("#twostep-disable-error").fadeIn("fast");
                            $disableCode.addClass("error");
                        } else {
                            TwoStep.enabled = false;
                            statUtils.bumpStat("newdash_settings", "twostep_disable");
                            wpcomMySettings.resetSettingsLs();
                            $("#twostep-status").fadeOut("fast");
                            $("#twostep-configuration").fadeOut("fast", function() {
                                wpcomMySettings.twostepMoveToStep(1);
                                $("#twostep-wizard").fadeIn("fast");
                                $this.attr("value", TwoStep.disableText);
                                $("#twostep-disable-code").attr("value", "");
                                $("#twostep-disable-error").hide();
                                $("#twostep-disable-message").hide();
                            });
                        }
                    }
                });
            });
            $securityTab.on("click.wpcomMySettings", "#twostep-cancel-disable", function(e) {
                e.preventDefault();
                $("#twostep-disable-message").slideUp("fast", function() {
                    $("#twostep-disable-code").attr("value", "").removeClass("error");
                    $("#twostep-disable-error").hide();
                });
            });
            $securityTab.on("keyup.wpcomMySettings", "#twostep-verification-code", function(e) {
                var code = e.keyCode ? e.keyCode : e.which;
                if (e.type == "keyup" && code != 13) return false;
                $("#twostep-verify").trigger("click.wpcomMySettings");
                return false;
            });
            $securityTab.on("click.wpcomMySettings", ".twostep-generate-backup-codes", function(e) {
                e.preventDefault();
                var $this = $(this);
                var parent = $this.closest(".verify-code");
                parent.find(".print-status").fadeOut("fast");
                parent.find(".enter-backup-code, .enter-printed, .verify-backup-code").removeClass("hide");
                parent.find(".backup-codes-popup-blocked").slideUp("fast");
                parent.find(".enter-backup-code, .enter-printed, .verify-backup-code").slideDown("fast");
                $("#twostep-backup-code").focus();
                $(".print-backup-codes").click();
            });
            $securityTab.on("click.wpcomMySettings", ".print-backup-codes", function(e) {
                e.preventDefault();
                var c = window.open();
                if ("undefined" === typeof c || !c) {
                    $(".backup-codes-popup-blocked").slideDown("fast");
                    return;
                }
                c.document.body.innerHTML = newdashI18n.get([ "settings", "loading" ]);
                $.ajax({
                    url: urlUtils.getAjaxUrl(),
                    data: {
                        action: "twostep-generate-backup-codes-with-markup",
                        codes: self.backupCodes,
                        nonce: $("#twostep-nonce-twostep-generate-backup-codes-with-markup").val()
                    },
                    dataType: "JSON",
                    success: function(response) {
                        if (-1 != response) {
                            self.backupCodes = response.codes;
                            var d = new Date();
                            c.document.body.innerHTML = "";
                            c.document.write(response.markup.replace("[replace_date]", d.toString()));
                            c.document.close();
                            setTimeout(function() {
                                c.focus();
                                c.print();
                                c.close();
                            }, 100);
                        }
                    }
                });
            });
            $securityTab.on("click.wpcomMySettings", ".generate-backup-codes-button", function(e) {
                e.preventDefault();
                wpcomMySettings.twostepMoveToVerifyStep(2);
            });
            $securityTab.on("click.wpcomMySettings", "#twostep-generate-app-password", function(e) {
                e.preventDefault();
                var $this = $(this), $container = $this.closest("td"), $applicationName = $("#twostep-app-name"), applicationName = $applicationName.val();
                if (!applicationName) {
                    $container.addClass("error");
                    return;
                }
                $this.hide();
                $container.spin("small");
                $.ajax({
                    url: urlUtils.getAjaxUrl(),
                    data: {
                        action: "twostep-add-application-password",
                        application_name: applicationName,
                        nonce: $("#twostep-nonce-twostep-add-application-password").val()
                    },
                    dataType: "JSON",
                    success: function(response) {
                        if (-1 != response) {
                            $container.spin(false);
                            $("#twostep-generate-password-table").fadeOut("fast", function() {
                                $("#twostep-password-container .twostep-password-raw").text(response.password);
                                $("#twostep-password-container .twostep-password-help").html(response.message);
                                $("#twostep-password-container").fadeIn("fast");
                                $this.show();
                                $applicationName.attr("value", "");
                            });
                        }
                    }
                });
            });
            $securityTab.on("keyup.wpcomMySettings", "#twostep-app-name", function(e) {
                var code = e.keyCode ? e.keyCode : e.which;
                if (e.type == "keyup" && code != 13) return false;
                $("#twostep-generate-app-password").trigger("click.wpcomMySettings");
                return false;
            });
            $securityTab.on("click.wpcomMySettings", "#twostep-hide-generated-app-password", function(e) {
                e.preventDefault();
                $("#twostep-password-container").fadeOut("fast", function() {
                    $("#twostep-generate-password-table").fadeIn("fast");
                    $("#twostep-password-container .twostep-password-raw").text("");
                    $("#twostep-password-container .twostep-password-help").text("");
                });
            });
            $securityTab.on("click.wpcomMySettings", ".twostep-delete-app-password", function(e) {
                e.preventDefault();
                var $this = $(this), $containerCell = $this.closest("td"), $containerRow = $this.closest("tr"), applicationId = $this.attr("data-application-id");
                $this.hide();
                $containerCell.spin("small");
                $.post(urlUtils.getAjaxUrl(), {
                    action: "twostep-delete-application-password",
                    application_id: applicationId,
                    nonce: $("#twostep-nonce-twostep-delete-application-password").val()
                }, function(response) {
                    $containerCell.spin(false);
                    $containerRow.remove();
                });
            });
            $("#userRecoveryPhoneCountry, #primary_blog").select2();
            $("#lang_id").select2({
                width: "element"
            });
        },
        twostepMoveToVerifyStep: function(step, complete) {
            if (step < 1 || step > 3) step = 1;
            if (step == 1) {
                $(".verify-code input[type=text]").val("");
                $(".step3-options, .verify-code, a.skip-links").hide();
                $(".backupcodes .step1").show();
                $(".backupcodes").fadeIn("fast");
            } else if (step == 2) {
                $("a#twostep-print-backup-codes").show();
                $(".backupcodes .step1").hide();
                $(".backupcodes .step2").fadeIn("fast");
                $("#twostep-wiz-backup-code").focus();
            }
        },
        twostepMoveToStep: function(step, complete) {
            if (step < 1 || step > 4) step = 1;
            $("#twostep-wizard .twostep-wiz-step.current").fadeOut("fast", function(e) {
                $("#twostep-wiz-progress .step1").removeClass("previous near current");
                $("#twostep-wiz-progress .step2").removeClass("previous near current");
                $("#twostep-wiz-progress .step3").removeClass("previous near current");
                $("#twostep-wiz-progress .step4").removeClass("previous near current");
                $("#twostep-wiz-progress .step" + step).addClass("current");
                $("#twostep-wizard .twostep-wiz-step").removeClass("current");
                for (var ii = step - 1; ii >= 1; ii--) {
                    $("#twostep-wiz-progress .step" + ii).addClass("previous");
                    if (step - 1 == ii) $("#twostep-wiz-progress .step" + ii).addClass("near");
                }
                $("#twostep-wiz-step" + step).addClass("current").fadeIn("fast", complete);
            });
        },
        toggleSection: function(section) {
            var nonce, sectionAnchor = section.children("a");
            if (!sectionAnchor.length) return;
            var sectionId = sectionAnchor.attr("id").replace("-section", "-content");
            $("a", "ul#profile-sections").removeClass("selected");
            sectionAnchor.addClass("selected");
            if ("security-section" == sectionAnchor.attr("id")) {
                $("form > div.submit-box").fadeOut("fast");
                if (typeof TwoStep !== "undefined") {
                    if (TwoStep.enabled) {
                        $("#twostep-wizard").hide();
                        $("#twostep-configuration").show();
                        $("#twostep-configuration-header").show();
                        $("#twostep-status").show();
                    } else {
                        wpcomMySettings.twostepMoveToStep(1);
                    }
                }
            } else if ("billing-history-section" == sectionAnchor.attr("id")) {
                jQuery("#primary-submit").hide();
            } else if ("connected-apps-section" == sectionAnchor.attr("id")) {
                jQuery("#primary-submit").hide();
            } else if ("billing-history-section" == sectionAnchor.attr("id")) {
                jQuery("#primary-submit").hide();
            } else if ("disbursements-section" == sectionAnchor.attr("id")) {
                jQuery("#primary-submit").hide();
                var showTaxBlock = function(showCitizen) {
                    showCitizen = typeof showCitizen !== "undefined" ? showCitizen : true;
                    jQuery("#us-tax-info").show();
                    if (showCitizen) {
                        jQuery("#us-citizen-block").show();
                    } else {
                        jQuery("#us-citizen-block").hide();
                    }
                    jQuery("#cert-w9-block").show();
                    jQuery("#cert-non-us-block").hide();
                    jQuery(".required").attr("required", "required");
                    jQuery(".required").attr("aria-required", "true");
                };
                var hideTaxBlock = function() {
                    jQuery("#us-tax-info").hide();
                    jQuery("#us-citizen-block").show();
                    jQuery("#cert-w9-block").hide();
                    jQuery("#cert-non-us-block").show();
                    jQuery(".required").removeAttr("required");
                    jQuery(".required").removeAttr("aria-required");
                };
                var isUSCitizen = function() {
                    return jQuery("#us-citizen").is(":checked");
                };
                var inUSCountry = function() {
                    var uSCountries = [ "US", "PR", "GU", "AS", "UM" ];
                    var selectedCountry = jQuery("#country-code").val();
                    if (uSCountries.indexOf(selectedCountry) >= 0) {
                        return true;
                    } else {
                        return false;
                    }
                };
                var showFormCheck = function() {
                    if (inUSCountry()) {
                        showTaxBlock(false);
                        return;
                    }
                    if (isUSCitizen()) {
                        showTaxBlock();
                        return;
                    }
                    hideTaxBlock();
                };
                jQuery("#country-code").change(showFormCheck);
                jQuery("#us-citizen").change(showFormCheck);
                jQuery(showFormCheck);
            } else if ("public-profile-section" == sectionAnchor.attr("id")) {
                $("form > div.submit-box").hide();
                if (!this.gravatarProfile) {
                    this.gravatarProfile = gravatarProfile;
                    nonce = $("#newdash_nonce").val();
                    this.gravatarProfile.init("#public-profile-content .my-sites", nonce);
                }
            } else {
                $("form > div.submit-box").fadeIn("fast");
            }
            $("div.section", "div#edit-profile-content").hide();
            $("div#" + sectionId).fadeIn("fast");
            this.hideRedirectResults(sectionId.replace("-content", ""));
        },
        save: function(saveButton) {
            var errors, activeSectionName = $("a.selected", "ul#profile-sections li").attr("id").replace("-section", ""), activeSection = $("div#" + activeSectionName + "-content", "div#edit-profile-content"), saveButtonText = saveButton.val();
            saveButton.addClass("saving").val(newdashI18n.get([ "settings", "saving" ]));
            $("p.errormsg").remove();
            $("tr.error").removeClass("error");
            statUtils.bumpStat("newdash_settings", activeSectionName.replace("-", "_") + "_save");
            this.hideRedirectResults();
            if ("password" == activeSectionName) {
                errors = [];
                if ("" === $("#pass1").val()) errors.push({
                    field: "pass1",
                    msg: "<strong>ERROR</strong>: Password cannot be blank."
                });
                if (-1 != $("#pass1").val().indexOf("\\")) errors.push({
                    field: "pass1",
                    msg: '<strong>ERROR</strong>: Passwords may not contain the character "\\".'
                });
                if (errors.length) {
                    $.each(errors, function(key, error) {
                        $("[name=" + error.field + "]").after('<p class="errormsg">' + error.msg + "</p>").parents("tr").addClass("error");
                        $("p.errormsg").hide().slideDown(200);
                    });
                    $("div#pass-strength-result").fadeOut(200);
                    saveButton.removeClass("saving").val(saveButtonText);
                } else {
                    this.resetSettingsLs();
                    $("#change-password-form").submit();
                }
            } else {
                if ("account" == activeSectionName && $("#user_recovery_phone_number").length > 0) {
                    errors = [];
                    var countryCode = $("#user_recovery_phone_country option:selected").val(), phoneNumber = $("#user_recovery_phone_number").val();
                    if (phoneNumber && !countryCode) {
                        errors.push({
                            field: "user_recovery_phone_country",
                            msg: "<strong>ERROR</strong>: Please supply a valid country code."
                        });
                    }
                    if (countryCode && -1 === phoneNumber.search(/[\d\s\(\)-]+/)) {
                        errors.push({
                            field: "user_recovery_phone_number",
                            msg: "<strong>ERROR</strong>: Please supply a valid phone number."
                        });
                    }
                    if (errors.length) {
                        $.each(errors, function(key, error) {
                            $("[name=" + error.field + "]").after('<p class="errormsg">' + error.msg + "</p>").parents("tr").addClass("error");
                            $("p.errormsg").hide().slideDown(200);
                        });
                        $("div#pass-strength-result").fadeOut(200);
                        saveButton.removeClass("saving").val(saveButtonText);
                        return false;
                    }
                }
                var els = activeSection.find("input, select, textarea"), data = [];
                $.each(els, function(i, el) {
                    el = $(el);
                    if (("checkbox" == el.attr("type") || "radio" == el.attr("type")) && !el.prop("checked")) return;
                    data.push({
                        name: el.attr("name"),
                        val: el.val()
                    });
                });
                $.post(urlUtils.getAjaxUrl(), {
                    action: "newdash_save_settings",
                    nonce: $("input#newdash_nonce").val(),
                    scope: activeSection.attr("id").replace("-content", ""),
                    data: data
                }, function(r) {
                    if (r.errors) {
                        $.each(r.errors, function(field, error) {
                            $("[name=" + field + "]").after('<p class="errormsg">' + error.message + "</p>").parents("tr").addClass("error");
                            $.scrollTo($("[name=" + field + "]").parent().parent(), 500);
                            $("p.errormsg").hide().slideDown(200);
                        });
                    } else {
                        $("#password-content input[type=password]").val("");
                        $("div#pass-strength-result").fadeOut(200);
                    }
                    if (wpcomMySettings.langId != $("#lang_id option:selected").val() || typeof wpcomMySettings.userRecoveryPhoneCountry != "undefined" && wpcomMySettings.userRecoveryPhoneCountry != $("#user_recovery_phone_country option:selected").val() || typeof wpcomMySettings.userRecoveryPhoneNumber != "undefined" && wpcomMySettings.userRecoveryPhoneNumber != $("#user_recovery_phone_number").val()) {
                        localStorage.clear();
                        var redirLocale = undefined != $("#lang_id option:selected").attr("xml:lang") ? $("#lang_id option:selected").attr("xml:lang") : $("#lang_id option:selected").attr("lang");
                        if ("" == redirLocale || undefined == redirLocale) redirLocale = "en";
                        if ("br" == redirLocale) redirLocale = "bre"; else if ("pt-br" == redirLocale) redirLocale = "br";
                        w.location.href = w.location.href.replace(/(https?:\/\/)([^\.]+\.)?(wordpress\.com\/)/, "$1" + "$3");
                    } else {
                        saveButton.removeClass("saving").val(saveButtonText);
                        wpcomMySettings.resetSettingsLs();
                    }
                }, "json");
            }
        },
        hideRedirectResults: function(section) {
            if ("password" != section) $(".pass-result").remove(); else if ("account" != section) $(".new-email-result").remove();
        },
        resetSettingsLs: function() {
            localStorage.remove("wpcom_tab_settings_content");
        },
        unload: function() {
            $("div#tab-content").off("click.wpcomMySettings", "ul#profile-sections li");
            $("div#tab-content").off("click.wpcomMySettings", "div.submit-box input[type=button]");
            $("div#tab-content").off("click.wpcomMySettings", "#save-profile");
            $("div#tab-content").off("keyup.wpcomMySettings", "input#pass1");
            $("div#my-apps-content").off("click.wpcomMySettings", "a.button-secondary");
            $("div#account-content").off("click.wpcomMySettings", "a.cancel-new-email");
            if (this.gravatarProfile) {
                this.gravatarProfile.unload();
                this.gravatarProfile = false;
            }
        }
    };
    return wpcomMySettings;
});

define("myBlog", [], function() {
    var $ = jQuery, wpcomMyBlog = {
        blogSelect: false,
        blogid: false,
        blogurl: false,
        blognonce: false,
        init: function() {
            var _this = this;
            this.blogSelect = $("#reader").find(".blog-form select");
            this.blogid = wpcomNewdash.router.getRoute(1);
            if (this.blogSelect.length) {
                this.blogSelect.on("change.wpcom_newdash", function() {
                    _this.blogid = _this.blogSelect.val();
                    _this.blogurl = _this.blogSelect.find(":selected").data("url");
                    _this.blognonce = _this.blogSelect.find(":selected").data("nonce");
                    _this.changeBlog();
                    _this.updateSidebar();
                });
                this.blogSelect.val(this.blogid);
                if ("function" === typeof this.blogSelect.select2) {
                    window.Select2.select2_fn = $.fn.select2;
                    this.blogSelect.select2();
                } else {
                    if ("function" === typeof window.Select2.select2_fn) {
                        window.Select2.select2_fn.call(this.blogSelect);
                    }
                }
                this.blogurl = this.blogSelect.find(":selected").data("url");
                this.blognonce = this.blogSelect.find(":selected").data("nonce");
            } else {
                if (_.isObject(currentUser.primary_blog)) {
                    this.blogurl = currentUser.primary_blog.url.replace("http://", "");
                    this.blognonce = currentUser.primary_blog.nonce;
                }
            }
            this.updateSidebar();
        },
        updateSidebar: function() {
            var _this = this;
            $("#content-design-sidebar").find("li a").each(function() {
                var segments = $(this).attr("href").split("/");
                if (segments.length > 2) {
                    if (segments[2].match(/blogurl/)) {
                        segments[2] = _this.blogurl;
                    } else if (segments[2].match(/blogid/)) {
                        segments[2] = _this.blogid;
                    }
                }
                $(this).attr("href", segments.join("/"));
            });
            var $sidebar = $("#your-blog-sidebar");
            $sidebar.find("li.visit-site a").attr("href", "http://" + this.blogurl);
            $sidebar.find("li.classic-admin a").attr("href", "http://" + this.blogurl + "/wp-admin");
            $("a.new_post").attr("href", "http://" + this.blogurl + "/wp-admin/post-new.php");
            $("a.new_page").attr("href", "http://" + this.blogurl + "/wp-admin/post-new.php?post_type=page");
            $("a.sidebar_customize").attr("href", "http://" + this.blogurl + "/wp-admin/customize.php?url=https%3A%2F%2Fwordpress.com%2Fsites%2F");
            wpcomNewdash.activeBlogDomain = this.blogurl;
            wpcomNewdash.activeBlogNonce = this.blognonce;
        },
        changeBlog: function() {
            var route = wpcomNewdash.router.getRoute();
            route[1] = this.blogid;
            wpcomNewdash.router.setRoute("/" + route.join("/"));
        },
        showNewPageLink: function(hasPermission) {
            if ("undefined" === typeof hasPermission || this.canManagePages === hasPermission) {
                return;
            }
            this.canManagePages = hasPermission;
            $("#content-design-sidebar").find(".new_page.newlink").toggle(hasPermission);
        }
    };
    return wpcomMyBlog;
});

define("LocalPostsLocationView", [ "TemplateElView", "templateFactory" ], function(TemplateElView, templateFactory) {
    var WpcomLocalPostsLocationView = Backbone.View.extend({
        events: {
            "click .active-location": "editLocation",
            "click .save": "updateLocation"
        },
        initialize: function() {
            this.template = templateFactory.fetch("local-posts-location");
            this.listenTo(this.model, "change", this.update);
            this.listenTo(this.model, "remove", this.unload);
            this.render();
        },
        update: function() {
            this.$el.find("img").attr("src", "https://maps.googleapis.com/maps/api/staticmap?center=" + this.model.get("lat_lon") + "&zoom=10&size=651x200&key=ABQIAAAAcl6ChbfTQMkisUzxpJgjRBQwF8MYsAd-wIziJ3DU3JoMiX7rPxSbC1fypBw_C5rsNlkCbEp76Tn0Rg&sensor=false&markers=color:red%7C" + this.model.get("lat_lon") + "&");
            this.$el.find(".active-location strong").text(this.model.get("location_name"));
        },
        render: function() {
            this.$el.html(this.template.render(this.model.toJSON()));
            this.initGeoSuggest();
        },
        initGeoSuggest: function() {
            var self = this, latLon = self.model.attributes.lat_lon.split(","), lat = latLon[0], lon = latLon[1], locationName = self.model.attributes.location_name, geoService = new GeoSuggest({
                attribution: this.$el.find(".location-suggest-attribution"),
                searchInput: this.$el.find("[name=update-location]"),
                latInput: this.$el.find("[name=lat]"),
                lonInput: this.$el.find("[name=lon]"),
                placeReferenceInput: this.$el.find("[name=placeReference]"),
                geoResults: this.$el.find(".location-results"),
                afterDetailsCallback: function() {
                    self.updateLocation();
                },
                lastSelected: {
                    name: locationName,
                    lat: lat,
                    lon: lon
                }
            }), geoServiceCallback = function(place) {
                self.model.set("location_name", place);
                geoService.setGeo({
                    lat: lat,
                    lon: lon,
                    placeReference: self.model.get("google_places_reference"),
                    name: self.model.get("location_name")
                });
            };
            if (!this.model.get("location_name") || this.model.get("location_name") === "") {
                if (this.model.get("google_places_reference") !== "") {
                    geoService.getPlaceNameForGoogleReference(this.model.get("google_places_reference"), geoServiceCallback);
                } else {
                    geoService.getPlaceForLatLon(this.model.get("lat_lon"), geoServiceCallback);
                }
            }
        },
        editLocation: function() {
            this.$el.find(".location-indicator").addClass("editing");
            this.$el.find("input[name=update-location]").val(this.model.get("location_name")).trigger("focus").select();
        },
        updateLocation: function() {
            var lat = this.$el.find("[name=lat]").val(), lon = this.$el.find("[name=lon]").val(), latLon = lat + "," + lon, locationName = this.$el.find("input[name=update-location]").val(), googlePlacesReference = this.$el.find("[name=placeReference]").val();
            this.$el.find(".active-location strong").text(locationName);
            this.model.set({
                location_name: locationName,
                lat_lon: latLon,
                google_places_reference: googlePlacesReference
            });
            this.$el.find(".location-indicator").removeClass("editing");
        },
        unload: function() {
            this.remove();
        }
    });
    return WpcomLocalPostsLocationView;
});

define("local", [ "ReaderPostStream", "LocalPostsLocationView" ], function(ReaderPostStream, LocalPostsLocationView) {
    var $ = jQuery, init = function(args) {
        var self = this, streamType = "local", local;
        this.currentLocationModel = null;
        window.wpcomReader.selectMenuItem(streamType);
        window.wpcomReader.showLoading(streamType);
        local = new ReaderPostStream({}, {
            stream_type: streamType,
            per_page: 9,
            location: args.location.lat_lon,
            location_name: args.location.location_name,
            google_places_reference: args.location.google_places_reference
        });
        local.on("afterFirstRender", function() {
            var pageTitle = window.wpcomNewdashRenderer.markupHeader(local.collection.metadata.title), locationModel, locationView, getLocationDataFromSettings = function() {
                return {
                    lat_lon: local.collection.settings.location,
                    location_name: local.collection.settings.location_name,
                    google_places_reference: local.collection.settings.google_places_reference
                };
            };
            local.$el.prepend(pageTitle);
            if (!local.collection.settings.location || local.collection.settings.location === "") {
                local.collection.settings.location = decodeURIComponent((local.collection.metadata.location_data.lat_lon + "").replace(/\+/g, "%20"));
            }
            if (!local.collection.settings.location_name || local.collection.settings.location_name === "") {
                local.collection.settings.location_name = decodeURIComponent((local.collection.metadata.location_data.location_name + "").replace(/\+/g, "%20"));
            }
            if (!local.collection.settings.google_places_reference || local.collection.settings.google_places_reference === "") {
                local.collection.settings.google_places_reference = decodeURIComponent((local.collection.metadata.location_data.google_places_reference + "").replace(/\+/g, "%20"));
            }
            locationModel = new Backbone.Model(getLocationDataFromSettings());
            local.collection.on("sync", function() {
                locationModel.set(getLocationDataFromSettings());
            });
            locationView = new LocalPostsLocationView({
                model: locationModel
            });
            locationModel.on("change:lat_lon", function() {
                var targetLocation = "/read/local/";
                if (this.get("lat_lon") !== "" && this.get("google_places_reference") !== "") {
                    targetLocation += this.get("lat_lon").replace(" ", "") + "/" + this.get("google_places_reference");
                }
                local.collection.settings.location = this.get("lat_lon");
                local.collection.settings.location_name = this.get("location_name");
                local.collection.settings.google_places_reference = this.get("google_places_reference");
                local.collection.remove(local.collection.models);
                $("div.page-activity").html("");
                window.wpcomNewdash.router.setRoute(targetLocation);
            }, locationModel);
            local.$el.find(".reader-header").append(locationView.$el);
            window.wpcomReader.hideLoading();
            this.currentLocationModel = locationModel;
        }, this);
        local.start();
        window.wpcomReader.unloadRegistry.push(function() {
            local.unload();
            if (self.currentLocationModel) {
                self.currentLocationModel.trigger("remove");
                self.currentLocationModel = null;
            }
        });
        wpcomReader.activeCollection = local.collection;
    };
    return {
        init: init
    };
});

define("ActivitiesPostView", [ "PostView", "newdashI18n" ], function(PostView, newdashI18n) {
    var WpcomActivitiesPostView = PostView.extend({
        preRender: function() {
            PostView.prototype.preRender.call(this);
            var comments = this.model.get("comments"), toNest = [], seenIds = {}, tmp = [], more_comments_link = null, comment, sub;
            if (parseInt(this.model.get("comment_count"), 10) > comments.length) {
                var link = "/read/post/id/" + this.model.get("blog_id") + "/" + this.model.get("post_id") + "/";
                more_comments_link = '<div class="view-all-comments"><a class="comment" href="' + link + '">' + newdashI18n.get([ "activityFeed", "View All Comments" ]) + "</a></div>";
            }
            this.model.set("more_comments_link", more_comments_link);
            for (var i in comments) {
                comment = comments[i];
                seenIds[comment.comment_ID] = i;
                if (seenIds.hasOwnProperty(comment.comment_parent)) {
                    toNest.push({
                        parent_index: seenIds[comment.comment_parent],
                        child_index: i
                    });
                }
            }
            if (toNest.length) {
                toNest = toNest.reverse();
                for (i in toNest) {
                    sub = toNest[i];
                    comment = comments[sub.child_index];
                    comments[sub.parent_index].comments.push(comment);
                    comments[sub.child_index].nuke = true;
                }
                for (i in comments) {
                    if (!comments[i].hasOwnProperty("nuke")) {
                        tmp.push(comments[i]);
                    }
                }
            } else {
                tmp = comments;
            }
            this.model.set("comments", tmp);
        }
    });
    return WpcomActivitiesPostView;
});

define("activities", [ "ReaderPostStream", "ActivitiesPostView" ], function(ReaderPostStream, ActivitiesPostView) {
    var $ = jQuery, init = function(args) {
        if (window.wpcomReader.activeCollection.unload) {
            window.wpcomReader.activeCollection.unload();
        }
        var activities, streamOptions = {}, filter = args.filter, bootstrap = window.wpcom.bootstrap && window.wpcom.bootstrap["activities_" + filter] && window.wpcom.bootstrap["activities_" + filter].posts ? window.wpcom.bootstrap["activities_" + filter].posts : [], metadata = window.wpcom.bootstrap && window.wpcom.bootstrap["activities_" + filter] ? _.omit(window.wpcom.bootstrap["activities_" + filter], "posts") : {};
        window.wpcomReader.selectMenuItem("activities");
        window.wpcomReader.showLoading("activities");
        if ("likes" === filter) {
            if ($(".activities-likes").length) {
                window.wpcomReader.selectMenuItem("activities-likes");
            }
            streamOptions = {
                stream_type: "postlike",
                per_page: 20,
                noPostTemplate: "no-post-like",
                bootstrap: bootstrap,
                metadata: metadata
            };
        } else if ("comments" === filter) {
            if ($(".activities-comments").length) {
                window.wpcomReader.selectMenuItem("activities-comments");
            }
            streamOptions = {
                stream_type: "activities_comments",
                filter: "comments",
                action: "get_activities",
                per_page: 20,
                noPostTemplate: "no-post-like",
                infiniteScrollEnabled: false,
                pollForNewPostsEnabled: false,
                useServerOrdering: true,
                cachingEnabled: false,
                itemView: ActivitiesPostView,
                bootstrap: bootstrap,
                metadata: metadata
            };
        } else {
            streamOptions = {
                stream_type: "activities",
                filter: "all",
                action: "get_activities",
                per_page: 20,
                noPostTemplate: "no-post-like",
                infiniteScrollEnabled: false,
                pollForNewPostsEnabled: false,
                useServerOrdering: true,
                cachingEnabled: false,
                bootstrap: bootstrap,
                metadata: metadata
            };
        }
        activities = new ReaderPostStream({}, streamOptions);
        if ("likes" !== filter) {
            activities.view.on("newerViewsAvailable", function() {
                activities.view.renderNewerItems();
            });
        }
        activities.on("afterFirstRender", function() {
            if (window.wpcom.bootstrap && window.wpcom.bootstrap["activities_" + filter]) {
                delete window.wpcom.bootstrap["activities_" + filter];
            }
            var pageTitle = window.wpcomNewdashRenderer.markupActivityHeader(activities.collection.metadata.title);
            activities.$el.prepend(pageTitle);
            $("a.sub-button.activity." + filter).addClass("current");
            window.wpcomReader.hideLoading();
        }, this);
        activities.start();
        window.wpcomReader.unloadRegistry.push(function() {
            activities.unload();
        });
        window.wpcomReader.activeCollection = activities.collection;
    };
    return {
        init: init
    };
});

define("trophyCase", [], function() {
    var $ = jQuery, wpcomTrophyCase = {
        init: function() {
            $("#trophy-case .filter").on("click", function(e) {
                e.preventDefault();
                var filterClass = $(this).data("filter");
                if (filterClass) {
                    if ("clear" == filterClass) {
                        $(".trophy").hide();
                        $(".trophy").fadeIn();
                    } else {
                        $(".trophy").hide();
                        $("." + filterClass).fadeIn();
                    }
                    $(".filter", "div#sidebar").removeClass("selected");
                    $(this).addClass("selected");
                }
            });
        }
    };
    return wpcomTrophyCase;
});

define("myStats", [], function() {
    var $ = jQuery, wpcomMyStats = {
        init: function() {
            var statsblog_switcher = jQuery("#statsblog");
            if (typeof statsblog_switcher.select2 == "function") {
                statsblog_switcher.select2({
                    formatResult: wpcomMyStats.select2BlogStatFormat,
                    formatSelection: wpcomMyStats.select2BlogStatFormat
                });
            }
            $("#tab-content").off("change.my-stats", "#statsblog");
            $("#tab-content").on("change.my-stats", "#statsblog", function() {
                window.wpcomNewdash.router.setRoute("/my-stats/?blog=" + jQuery("select#statsblog option:selected").val());
            });
        },
        select2BlogStatFormat: function(blog) {
            var formatted = blog.text.replace(/([^(]+)/, "<b>$1</b>");
            return formatted;
        }
    };
    return wpcomMyStats;
});

define("RecommendedBlogModel", [], function() {
    return Backbone.Model.extend({});
});

define("RecommendedBlogsCollection", [ "localStorage", "RecommendedBlogModel" ], function(localStorage, RecommendedBlogModel) {
    var $ = jQuery, WpcomRecommendedBlogs = Backbone.Collection.extend({
        model: RecommendedBlogModel,
        initialize: function(models, options) {
            this.topicId = options.topicId;
        },
        url: function() {
            return "/wp-admin/admin-ajax.php?action=get_recommended_blogs_in_topic&topic=" + this.topicId;
        },
        sync: function(method, model, options) {
            var key = "WpcomRecommendedBlogsTopics_" + this.topicId, localJSON = localStorage.get(key);
            if (null !== localJSON && (localJSON = JSON.parse(localJSON)) && localJSON.length) {
                options.success(localJSON);
            } else {
                $.getJSON(this.url(), function(data, textStatus) {
                    if (textStatus !== "success" || !data) {
                        options.error();
                    }
                    localStorage.set(key, JSON.stringify(data));
                    options.success(data);
                });
            }
        },
        unload: function() {
            this.remove(this.models);
            this.trigger("unload");
        }
    });
    return WpcomRecommendedBlogs;
});

define("RecommendedBlogView", [ "templateFactory", "FollowPillButtonView" ], function(templateFactory, FollowPillButtonView) {
    var WpcomRecommendedBlogsBlogView = Backbone.View.extend({
        initialize: function() {
            this.template = templateFactory.fetch("recommendations-blog");
            this.listenTo(this.model, "remove", this.unload);
            this.render();
        },
        render: function() {
            this.$el.html(this.template.render(this.model.toJSON()));
            this.followPillButton = new FollowPillButtonView({
                el: this.$el.find(".follow-button"),
                model: this.model
            });
        },
        unload: function() {
            this.remove();
        }
    });
    return WpcomRecommendedBlogsBlogView;
});

define("PaginatorModel", [], function() {
    return Backbone.Model.extend({});
});

define("PaginatorCollection", [ "PaginatorModel" ], function(PaginatorModel) {
    var WpcomRecommendedBlogsPaginator = Backbone.Collection.extend({
        initialize: function() {
            this.on("pageSelected", this.emitPageSelected);
        },
        model: PaginatorModel,
        setActivePage: function(pageNum) {
            this.map(function(model) {
                model.set("status", "");
            });
            this.at(pageNum).set("status", "on");
        },
        emitPageSelected: function(pageNum) {
            this.trigger("selected", pageNum);
        },
        unload: function() {
            this.remove(this.models);
            this.trigger("unload");
        }
    });
    return WpcomRecommendedBlogsPaginator;
});

define("PaginatorIndicatorView", [ "templateFactory" ], function(templateFactory) {
    var WpcomRecommendedBlogsPaginatorIndicatorView = Backbone.View.extend({
        events: {
            click: "select"
        },
        initialize: function() {
            this.template = templateFactory.fetch("recommendations-carousel-page-indicator");
            this.listenTo(this.model, "change:status", this.render);
            this.listenTo(this.model, "remove", this.unload);
            this.render();
        },
        render: function() {
            this.$el.html(this.template.render(this.model.toJSON()));
        },
        select: function() {
            this.trigger("selected", this.model.get("pageNum"));
        },
        unload: function() {
            this.remove();
        }
    });
    return WpcomRecommendedBlogsPaginatorIndicatorView;
});

define("PaginatorView", [ "templateFactory", "PaginatorIndicatorView" ], function(templateFactory, PaginatorIndicatorView) {
    var WpcomRecommendedBlogsPaginatorView = Backbone.View.extend({
        initialize: function() {
            this.template = templateFactory.fetch("recommendations-carousel-pages");
            this.listenTo(this.collection, "unload", this.unload);
            this.render();
        },
        render: function() {
            var paginationContainer;
            this.$el.html(this.template.render());
            paginationContainer = this.$el.find(".position");
            this.collection.each(function(page) {
                var pageIndicator = new PaginatorIndicatorView({
                    model: page
                });
                pageIndicator.on("selected", this.pageSelected, this);
                paginationContainer.append(pageIndicator.$el);
            }, this);
        },
        pageSelected: function(pageNum) {
            this.collection.trigger("pageSelected", pageNum);
        },
        unload: function() {
            this.remove();
        }
    });
    return WpcomRecommendedBlogsPaginatorView;
});

define("RecommendedBlogsView", [ "templateFactory", "RecommendedBlogView", "PaginatorCollection", "PaginatorView" ], function(templateFactory, RecommendedBlogView, PaginatorCollection, PaginatorView) {
    var $ = jQuery, WpcomRecommendedBlogsView = Backbone.View.extend({
        initialize: function(options) {
            options = options || {};
            this.blogsPerPage = options.blogsPerPage || 3;
            this.template = templateFactory.fetch("recommendations-carousel");
            this.$el.html(this.template.render());
            this.pages = [];
            this.listenTo(this.collection, "reset", this.renderCarousel);
            this.listenTo(this.collection, "unload", this.unload);
        },
        showImagesOnPage: function(pageNum) {
            var pageEl, blogImages;
            if ("*" === pageNum) {
                _.each(this.pages, function(page, index) {
                    this.showImagesOnPage(index);
                }, this);
                return;
            }
            pageEl = this.pages[pageNum];
            blogImages = pageEl.find("img[data-src]");
            _.each(blogImages, function(image) {
                var imageEl = $(image), src = imageEl.data("src");
                imageEl.on("load complete", function() {
                    if ($(this).is("[data-src]")) {
                        $(this).removeAttr("data-src");
                    }
                });
                imageEl.attr("src", src);
            });
        },
        renderCarousel: function() {
            var pagesContainer, pageCount = Math.ceil(this.collection.length / this.blogsPerPage), paginators = [], paginatorView;
            pagesContainer = this.$el.find(".recommended-blogs");
            this.$el.find(".inner").removeClass("loading-recommendations");
            this.$el.find("h3.loading").remove();
            for (var i = 0; i < pageCount; i++) {
                paginators.push({
                    status: 0 === i ? "on" : "",
                    pageNum: i
                });
                pagesContainer.append('<div class="blogs" />');
                this.pages.push(pagesContainer.find(">.blogs:last"));
            }
            this.collection.each(function(blog, index) {
                var targetPage = Math.floor(index / this.blogsPerPage), blogView = new RecommendedBlogView({
                    model: blog,
                    className: "blog_item"
                });
                this.pages[targetPage].append(blogView.$el);
            }, this);
            this.paginator = new PaginatorCollection(paginators);
            paginatorView = new PaginatorView({
                collection: this.paginator
            });
            this.$el.append(paginatorView.$el);
            this.initCarouselBehaviour();
            return this;
        },
        initCarouselBehaviour: function() {
            var carousel, paginator = this.paginator, carouselEl = this.$el.find(".carousel").get(0), prevBt = this.$el.find("a.prev"), nextBt = this.$el.find("a.next"), showImagesOnPage = this.showImagesOnPage, context = this, forceLoadImagesMobile = function() {
                if ($(window).width() <= 480) {
                    showImagesOnPage.apply(context, [ "*" ]);
                }
            };
            carousel = new Swipe(carouselEl, {
                callback: function(pos, el) {
                    paginator.setActivePage(pos);
                    showImagesOnPage.apply(context, [ pos ]);
                }
            });
            paginator.listenTo(paginator, "selected", function(pageNum) {
                carousel.slide(pageNum);
            });
            showImagesOnPage.apply(context, [ 0 ]);
            forceLoadImagesMobile();
            $(window).on("resize.WpcomRecommendedBlogsBlogViewCarousel", function() {
                forceLoadImagesMobile();
            });
            prevBt.on("click", function() {
                carousel.prev();
                return false;
            });
            nextBt.on("click", function() {
                carousel.next();
                return false;
            });
        },
        unload: function() {
            $(window).off("resize.WpcomRecommendedBlogsBlogViewCarousel");
            if (this.paginator) {
                this.paginator.unload();
            }
            if (this.carousel) {
                this.carousel.kill();
            }
            this.remove();
        }
    });
    return WpcomRecommendedBlogsView;
});

define("RecommendedBlogsTopicView", [ "templateFactory", "RecommendedBlogsCollection", "RecommendedBlogsView" ], function(templateFactory, RecommendedBlogsCollection, RecommendedBlogsView) {
    var $ = jQuery, WpcomRecommendedBlogsTopicView = Backbone.View.extend({
        events: {
            "click .topic-content": "toggleFocus"
        },
        initialize: function() {
            this.offsetY = false;
            this.template = templateFactory.fetch("recommendations-topic");
            this.listenTo(this.model, "remove", this.unload);
            this.render();
        },
        render: function() {
            this.$el.html(this.template.render(this.model.toJSON()));
            this.offsetY = this.$el.offset().top;
        },
        toggleFocus: function() {
            this.setViewState();
            if (true === this.model.get("selected")) {
                window.wpcomNewdash.router.setRoute("/recommendations/");
            } else {
                window.wpcomNewdash.router.setRoute("/recommendations/" + this.model.get("slug"));
            }
        },
        setViewState: function() {
            var isSelected = this.$el.hasClass("active");
            if (isSelected) {
                this.deselected();
            } else {
                this.selected();
            }
        },
        loadCarousel: function() {
            this.carousel = new RecommendedBlogsCollection([], {
                topicId: this.model.get("id")
            });
            this.carousel_view = new RecommendedBlogsView({
                collection: this.carousel,
                blogsPerPage: 3
            });
            this.$el.find(".topic-drawer").html(this.carousel_view.$el);
            this.carousel.fetch({
                reset: true
            });
        },
        selected: function() {
            var view = this;
            this.$el.addClass("active");
            this.loadCarousel();
        },
        deselected: function() {
            this.$el.removeClass("active");
            setTimeout(function() {
                if (this.carousel) {
                    this.carousel.unload();
                }
            }, 300);
        },
        unload: function() {
            if (this.carousel) {
                this.carousel.unload();
            }
            this.remove();
        }
    });
    return WpcomRecommendedBlogsTopicView;
});

define("RecommendedBlogsTopicsView", [ "templateFactory", "RecommendedBlogsTopicView" ], function(templateFactory, RecommendedBlogsTopicView) {
    var WpcomRecommendedBlogsTopicListView = Backbone.View.extend({
        initialize: function() {
            this.template = templateFactory.fetch("recommendations-header");
            this.listenTo(this.collection, "reset", this.render);
            this.listenTo(this.collection, "unload", this.unload);
            this.topics = [];
        },
        storeTopicOffsets: function() {
            var ignoreY = 0, itemOffset = -55;
            _.each(this.topics, function(topic) {
                topic.offsetY = parseInt(topic.$el.offset().top, 10) + itemOffset - ignoreY + "px";
                if (topic.model.get("selected")) {
                    ignoreY += parseInt(topic.$el.find(".topic-drawer").height(), 10);
                }
            });
        },
        render: function() {
            var ul;
            this.$el.html(this.template.render() + "<ul />");
            ul = this.$el.find(">ul:last");
            this.collection.each(function(topic) {
                var topicView = new RecommendedBlogsTopicView({
                    model: topic,
                    className: "topic",
                    tagName: "li"
                });
                this.topics.push(topicView);
                ul.append(topicView.$el);
            }, this);
            this.trigger("render_ready");
        },
        unload: function() {
            this.remove();
        }
    });
    return WpcomRecommendedBlogsTopicListView;
});

define("RecommendedBlogsTopicModel", [], function() {
    return Backbone.Model.extend({});
});

define("RecommendedBlogsTopicsCollection", [ "localStorage", "urlUtils", "RecommendedBlogsTopicModel" ], function(localStorage, urlUtils, RecommendedBlogsTopicModel) {
    var $ = jQuery, WpcomRecommendedBlogsTopics = Backbone.Collection.extend({
        selectedTopicSlug: null,
        model: RecommendedBlogsTopicModel,
        url: urlUtils.urlAddParams(urlUtils.getAjaxUrl(), "action=get_recommended_blogs_topic_list"),
        sync: function(method, model, options) {
            var localJSON = localStorage.get("WpcomRecommendedBlogsTopics");
            if (null !== localJSON && (localJSON = JSON.parse(localJSON)) && localJSON.length) {
                options.success(localJSON);
            } else {
                $.getJSON(this.url, function(data, textStatus) {
                    if (textStatus !== "success" || !data) {
                        options.error();
                    }
                    localStorage.set("WpcomRecommendedBlogsTopics", JSON.stringify(data));
                    options.success(data);
                });
            }
        },
        initialize: function() {
            this.bind("change:selected", this.enforceOneSelected, this);
        },
        selectModelBySlug: function(slug) {
            var targetModel = this.find(function(model) {
                return slug === model.get("slug");
            });
            if (targetModel) {
                this.selectedTopicSlug = slug;
                targetModel.set("selected", true);
            }
        },
        deselectAll: function() {
            this.map(function(model) {
                model.set("selected", false);
            });
        },
        enforceOneSelected: function() {
            this.each(function(model) {
                if (true === model.get("selected") && !(model.get("slug") === this.selectedTopicSlug)) {
                    model.set("selected", false);
                }
            }, this);
        },
        unload: function() {
            this.remove(this.models);
            this.trigger("unload");
        }
    });
    return WpcomRecommendedBlogsTopics;
});

define("recommendations", [ "RecommendedBlogsTopicsView", "RecommendedBlogsTopicsCollection" ], function(WpcomRecommendedBlogsTopicListView, WpcomRecommendedBlogsTopics) {
    var $ = jQuery, recommendationsState = Backbone.Model.extend({
        defaults: {
            activeTopic: null
        }
    }), wpcomReaderRecommendations = {
        getState: function() {
            if (!this.state) {
                this.state = new recommendationsState();
            }
            return this.state;
        },
        setTopic: function(topicSlug) {
            this.getState();
            this.state.set("activeTopic", topicSlug);
        },
        init: function(options) {
            var viewContainer = jQuery("#reader-content");
            this.getState();
            this.unloading = false;
            this.topics = new WpcomRecommendedBlogsTopics();
            this.topicsView = new WpcomRecommendedBlogsTopicListView({
                collection: this.topics,
                id: "recommendations-list"
            });
            this.topics.on("reset", function() {
                this.selectedTopicSetState();
            }, this);
            this.state.on("change:activeTopic", function() {
                this.selectedTopicSetState();
            }, this);
            this.topicsView.on("render_ready", function() {
                var topicsView = this.topicsView;
                if (!this.unloading) {
                    if (options.beforeInitialRender) {
                        options.beforeInitialRender();
                    }
                    viewContainer.html(topicsView.$el);
                    topicsView.storeTopicOffsets();
                    $(window).on("resize.wpcomReaderRecommendations", function() {
                        topicsView.storeTopicOffsets();
                    });
                }
            }, this);
            this.topics.fetch({
                reset: true
            });
        },
        selectedTopicSetState: function() {
            if (null === this.state.get("activeTopic")) {
                this.topics.deselectAll();
            } else {
                this.topics.selectModelBySlug(this.state.get("activeTopic"));
            }
        },
        unload: function() {
            $(window).off("resize.wpcomReaderRecommendations");
            this.unloading = true;
            this.topics.unload();
            this.topics.unbind();
            this.topicsView.unbind();
            this.state.destroy();
            this.state.unbind();
            delete this.topics;
            delete this.topicsView;
            delete this.state;
        }
    };
    return wpcomReaderRecommendations;
});

define("a8c", [ "ReaderPostStream" ], function(ReaderPostStream) {
    var $ = jQuery, init = function() {
        var streamType = "a8c", a8c;
        window.wpcomReader.selectMenuItem(streamType);
        window.wpcomReader.showLoading(streamType);
        a8c = new ReaderPostStream({}, {
            stream_type: streamType
        });
        a8c.on("afterFirstRender", function() {
            var pageTitle = wpcomNewdashRenderer.markupHeader(a8c.collection.metadata.title);
            a8c.$el.prepend(pageTitle);
            window.wpcomReader.hideLoading();
        }, this);
        a8c.start();
        window.wpcomReader.activeCollection = a8c.collection;
        window.wpcomReader.unloadRegistry.push(function() {
            a8c.unload();
        });
    };
    return {
        init: init
    };
});

define("topic", [ "ReaderPostStream" ], function(ReaderPostStream) {
    var init = function(args) {
        var streamType = "topic", topic, slug = args.slug, bootstrap = window.wpcom.bootstrap && window.wpcom.bootstrap["topic_" + slug] && window.wpcom.bootstrap["topic_" + slug].posts ? window.wpcom.bootstrap["topic_" + slug].posts : [], metadata = window.wpcom.bootstrap && window.wpcom.bootstrap["topic_" + slug] ? _.omit(window.wpcom.bootstrap["topic_" + slug], "posts") : {};
        window.wpcomReader.selectMenuItem(streamType + "-" + slug);
        window.wpcomReader.showLoading(streamType + "-" + slug);
        window.scrollTo(0, 1);
        topic = new ReaderPostStream({}, {
            stream_type: streamType,
            slug: slug,
            noPostTemplate: "no-post-topic",
            bootstrap: bootstrap,
            metadata: metadata
        });
        topic.on("afterFirstRender", function() {
            if (window.wpcom.bootstrap && window.wpcom.bootstrap["topic_" + slug]) {
                delete window.wpcom.bootstrap["topic_" + slug];
            }
            wpcomNewdash.setTitle(topic.collection.metadata.title);
            var pageTitle = wpcomNewdashRenderer.markupTopicHeader(topic.collection.metadata.title, slug, topic.collection.metadata.is_following);
            topic.$el.prepend(pageTitle);
            window.wpcomReader.hideLoading();
        }, this);
        topic.start();
        window.wpcomReader.activeCollection = topic.collection;
        window.wpcomReader.unloadRegistry.push(function() {
            topic.unload();
        });
    };
    return {
        init: init
    };
});

define("previouslyFresh", [ "ReaderPostStream" ], function(ReaderPostStream) {
    var init = function(args) {
        var streamType = "fp", fp;
        window.wpcomReader.selectMenuItem(streamType + "-" + args.slug);
        window.wpcomReader.showLoading(streamType + "-" + args.slug);
        window.scrollTo(0, 1);
        fp = new ReaderPostStream({}, {
            stream_type: streamType,
            slug: args.slug
        });
        fp.on("afterFirstRender", function() {
            window.wpcomNewdash.setTitle(fp.collection.metadata.title);
            var pageTitle = window.wpcomNewdashRenderer.markupHeader(fp.collection.metadata.title);
            fp.$el.prepend(pageTitle);
            window.wpcomReader.hideLoading();
        }, this);
        fp.start();
        window.wpcomReader.activeCollection = fp.collection;
        window.wpcomReader.unloadRegistry.push(function() {
            fp.unload();
        });
    };
    return {
        init: init
    };
});

define("blog", [ "ReaderPostStream" ], function(ReaderPostStream) {
    var init = function(args) {
        var streamType = "blog", blog;
        window.wpcomReader.selectMenuItem();
        window.wpcomReader.showLoading(streamType);
        window.scrollTo(0, 1);
        blog = new ReaderPostStream({}, {
            stream_type: streamType,
            blog_id: args.blogId
        });
        blog.on("afterFirstRender", function() {
            window.wpcomNewdash.setTitle(blog.collection.metadata.blog_title);
            var pageTitle = window.wpcomNewdashRenderer.markupBlogHeader(blog.collection.metadata.blog_title, args.blogId, 0, blog.collection.metadata.blog_url, blog.collection.metadata.blog_description, blog.collection.metadata.blog_avatar, blog.collection.metadata.follower_count, blog.collection.metadata.is_following, blog.collection.metadata.header_image);
            blog.$el.prepend(pageTitle);
            window.wpcomReader.hideLoading();
        }, this);
        blog.start();
        window.wpcomReader.activeCollection = blog.collection;
        window.wpcomReader.unloadRegistry.push(function() {
            blog.unload();
        });
    };
    return {
        init: init
    };
});

define("topicList", [ "ReaderPostStream" ], function(ReaderPostStream) {
    var init = function(args) {
        var streamType = "list", isListOwner = currentUser.user_login == args.listAuthor, listTemplate = isListOwner ? "no-list-items-my-list" : "no-list-items-others-list", list;
        window.wpcomReader.selectMenuItem("list-" + args.listAuthor + "-" + args.listSlug);
        window.wpcomReader.showLoading(streamType);
        window.scrollTo(0, 1);
        list = new ReaderPostStream({}, {
            stream_type: streamType,
            noPostTemplate: listTemplate,
            list_author: args.listAuthor,
            list_slug: args.listSlug
        });
        list.on("afterFirstRender", function() {
            window.wpcomNewdash.setTitle(list.collection.metadata.list_title);
            var pageTitle = window.wpcomNewdashRenderer.markupListHeader(list.collection.metadata.list_title, args.listAuthor, args.listSlug, list.collection.metadata.list_description, list.collection.metadata.follower_count, list.collection.metadata.is_following, isListOwner);
            list.$el.prepend(pageTitle);
            window.wpcomReader.hideLoading();
        }, this);
        list.start();
        window.wpcomReader.activeCollection = list.collection;
        window.wpcomReader.unloadRegistry.push(function() {
            list.unload();
        });
    };
    return {
        init: init
    };
});

define("feed", [ "ReaderPostStream" ], function(ReaderPostStream) {
    var init = function(args) {
        var streamType = "blog", feed;
        window.wpcomReader.selectMenuItem();
        window.wpcomReader.showLoading(streamType);
        window.scrollTo(0, 1);
        feed = new ReaderPostStream({}, {
            stream_type: streamType,
            feed_id: args.feedId
        });
        feed.on("afterFirstRender", function() {
            window.wpcomNewdash.setTitle(feed.collection.metadata.blog_title);
            var pageTitle = window.wpcomNewdashRenderer.markupBlogHeader(feed.collection.metadata.blog_title, 0, args.feedId, feed.collection.metadata.blog_url, feed.collection.metadata.blog_description, feed.collection.metadata.blog_avatar, feed.collection.metadata.follower_count, feed.collection.metadata.is_following);
            feed.$el.prepend(pageTitle);
            window.wpcomReader.hideLoading();
        }, this);
        feed.start();
        window.wpcomReader.activeCollection = feed.collection;
        window.wpcomReader.unloadRegistry.push(function() {
            feed.unload();
        });
    };
    return {
        init: init
    };
});

define("topicCloudAndSearch", [], function() {
    var $ = jQuery, init = function() {
        $("p.heatmap a").attr("rel", "subscriptions.read.topic");
        $(document).off("click.wpcom_topic_cloud").on("click.wpcom_topic_cloud", "p.heatmap a", function(e) {
            if ($("ul#homenav li.topics").hasClass("current")) return;
            e.preventDefault();
            var topicId = $(e.currentTarget).attr("id").replace(/^cat-(\d+)$/, "$1");
            if ($("#t-" + topicId) && $("#t-" + topicId).length) {
                window.wpcomReader.load_topic_page($("a#t-" + topicId));
                window.wpcomReader.nav_click($("a#t-" + topicId));
            } else {
                var val = $(e.currentTarget).attr("href").replace(/^.+\/([^\/]+)\/?/, "$1");
                window.wpcomNewdash.router.setRoute("/tag/" + val + "/");
            }
        });
        $(document).off("click.wpcom_topic_search").on("click.wpcom_topic_search", "#search-tags input[type=button]", function(e) {
            if ($("ul#homenav li.topics").hasClass("current")) return;
            e.preventDefault();
            loadTabPage($("#tag-search-input").val(), true);
        });
        $(document).off("keyup.wpcom_topic_search").on("keyup.wpcom_topic_search", "#tag-search-input", function(e) {
            if ($("ul#homenav li.topics").hasClass("current")) return;
            var code = e.keyCode ? e.keyCode : e.which;
            if (e.type == "keyup" && code != 13) return false;
            loadTabPage($("#tag-search-input").val(), true);
            return false;
        });
    }, loadTabPage = function(val, showSearching) {
        if (true !== showSearching) showSearching = false;
        if ("" !== val) {
            if (true === showSearching) {
                $("#search-tags input[type=button]").val("Searching...");
            }
            window.wpcomNewdash.router.setRoute("/tag/" + $.trim(val).toLowerCase().replace(/\s+/g, "-") + "/");
        }
    };
    return {
        init: init
    };
});

define("manage", [ "noticeUtils", "localStorage" ], function(noticeUtils, localStorage) {
    var $ = jQuery, wpcomLocalStorage = localStorage, wpcomManage = {
        init: function() {
            $(".jp-settings-checkbox").on("change", function() {
                var $el = $(this), $manage = $el.closest("#manage"), blogId = $manage.data("blogId"), settingsKey = $el.data("settingsKey"), checked = $el.is(":checked");
                $el.attr("disabled", true);
                wpcomManage.jetpack_update_setting(blogId, settingsKey, checked, function(response) {
                    if (response.error) {
                        $el.attr("checked", !checked);
                        noticeUtils.error(response.message);
                    } else {
                        noticeUtils.success(response.message);
                    }
                    $el.removeAttr("disabled");
                });
            });
            $("#jp-followers-start-migration").on("click", function() {
                var $el = $(this), $manage = $el.closest("#manage"), destBlogId = $manage.data("blogId"), destBlogName = $manage.data("blogName"), originalValue = $el.val(), sourceBlogId = $("#jp-followers-select-source").val(), sourceBlogName = $("#jp-followers-select-source :selected").text();
                $el.attr("disabled", true);
                wpcomManage.jetpack_migrate(sourceBlogId, sourceBlogName, destBlogId, destBlogName, function(response) {
                    if (response.error) {
                        noticeUtils.error(response.message);
                    } else {
                        noticeUtils.success(response.message);
                    }
                    $el.removeAttr("disabled");
                });
            });
            $("#jp-disconnect").on("click", function() {
                var $el = $(this), $manage = $el.closest("#manage"), blogId = $manage.data("blogId"), blogName = $manage.data("blogName");
                var originalValue = $el.val();
                $el.val($el.data("disconnecting")).attr("disabled", true);
                var doneCallback = function(response) {
                    if (response.error) {
                        noticeUtils.error(response.message);
                        canceledCallback.apply(this, []);
                    } else {
                        $(document).one("wpcom_tab_loaded", function() {
                            noticeUtils.success(response.message);
                        });
                        wpcomLocalStorage.remove("wpcom_template_my-blogs.php_content");
                        var route = wpcomNewdash.router.getRoute();
                        wpcomNewdash.router.setRoute("/sites/");
                    }
                };
                var canceledCallback = function() {
                    $el.val(originalValue).removeAttr("disabled");
                };
                wpcomManage.jetpack_disconnect(blogId, blogName, doneCallback, canceledCallback);
            });
        },
        jetpack_update_setting: function(blogId, key, value, doneCallback) {
            var settings = {};
            settings[key] = value;
            $.wpcom_proxy_request({
                method: "POST",
                path: "/jetpack-blogs/" + blogId,
                body: settings
            }, function(response, http_status) {
                if (typeof doneCallback === "function") {
                    doneCallback.apply(wpcomManage, [ response ]);
                }
            });
        },
        jetpack_migrate: function(sourceBlogId, sourceBlogName, destBlogId, destBlogName, doneCallback, canceledCallback) {
            if (!confirm("Are you sure you want to migrate followers from " + sourceBlogName + " to " + destBlogName + "?")) {
                if (typeof doneCallback === "function") {
                    canceledCallback.apply(wpcomManage, []);
                }
                return;
            }
            $.wpcom_proxy_request({
                method: "POST",
                path: "/jetpack-blogs/" + destBlogId + "/source/" + sourceBlogId + "/migrate"
            }, function(response, http_status) {
                if (typeof doneCallback === "function") {
                    doneCallback.apply(wpcomManage, [ response ]);
                }
            });
        },
        jetpack_disconnect: function(blogId, blogName, doneCallback, canceledCallback) {
            if (!confirm("Are you sure you want to disconnect " + blogName + "?")) {
                if (typeof canceledCallback === "function") {
                    canceledCallback.apply(wpcomManage, []);
                }
                return;
            }
            $.wpcom_proxy_request({
                method: "POST",
                path: "/jetpack-blogs/" + blogId + "/mine/delete"
            }, function(response, http_status) {
                if (typeof doneCallback === "function") {
                    doneCallback.apply(wpcomManage, [ response ]);
                }
            });
        },
        unload: function() {
            $("#monitor-active").off("click.monitor-active");
        }
    };
    return wpcomManage;
});

define("storeSidebar", [], function() {
    var $ = jQuery;
    return {
        selectedClass: "selected",
        select: function(route) {
            $(".store-sidebar [href^=\\/" + route[0] + "]").addClass(this.selectedClass);
        }
    };
});

define("ProxyPlugin", [], function() {
    var ProxyPlugin, GlobalScope;
    ProxyPlugin = {
        ajax: function(options) {
            var request, deferred;
            if (_.has(options, "proxy") && options.proxy) {
                request = {
                    path: options.url
                };
                if (options.type && options.type.toUpperCase() === "POST") {
                    request.method = "POST";
                    request.body = options.data || {};
                } else {
                    request.method = options.type || "GET";
                    request.query = options.data || {};
                }
                deferred = Backbone.$.wpcom_proxy_request(request);
                deferred.then(function(response, statusCode) {
                    var error = options.error || function() {}, success = options.success || function() {};
                    if ("error" === response || _.has(response, "error")) {
                        error.apply(Backbone.$, arguments);
                    } else {
                        success.apply(Backbone.$, arguments);
                    }
                });
                return deferred;
            } else {
                return Backbone.$.ajax.apply(Backbone.$, options);
            }
        },
        withGlobalScope: function() {
            return GlobalScope.withAccess();
        },
        requestGlobalScope: function() {
            return GlobalScope.requestAccess();
        }
    };
    GlobalScope = {
        REQUEST_TIMEOUT: 5e3,
        isActive: false,
        deferred: Backbone.$.Deferred(),
        withAccess: function() {
            this.requestAccess();
            return Backbone.$.when(this.deferred);
        },
        requestAccess: function() {
            var timeout, params, self = this;
            if (this.isActive) {
                return;
            }
            this.isActive = true;
            timeout = setTimeout(function() {
                self.isActive = false;
            }, this.REQUEST_TIMEOUT);
            params = {
                metaAPI: {
                    accessAllUsersBlogs: true
                }
            };
            Backbone.$.wpcom_proxy_request(params).done(function(response, statusCode) {
                clearTimeout(timeout);
                self.deferred.resolve();
            });
        }
    };
    Backbone.ajax = ProxyPlugin.ajax;
    return ProxyPlugin;
});

define("BlogUpgradesCollection", [ "ProxyPlugin" ], function(ProxyPlugin) {
    return Backbone.Collection.extend({
        initialize: function(options) {
            this.url = options.url;
        },
        groupByBlog: function() {
            this.groupUpgrades();
            if (this.groupedUpgrades.length) {
                this.movePrimaryBlogToStart();
            }
            return this.groupedUpgrades;
        },
        groupUpgrades: function() {
            this.groupedUpgrades = _(this.toJSON()).chain().groupBy("blog_id").map(function(upgrades) {
                var upgradesWithPremiumFirst = _.sortBy(upgrades, function(upgrade) {
                    return parseInt(upgrade.product_id, 10);
                }).reverse();
                var blogWithUpgrades = {
                    upgrades: upgradesWithPremiumFirst,
                    blogname: upgrades[0].blogname,
                    domain: upgrades[0].domain
                };
                if (upgrades[0].primary_blog) {
                    blogWithUpgrades.primary = upgrades[0].primary_blog;
                }
                return blogWithUpgrades;
            }).reverse().value();
        },
        movePrimaryBlogToStart: function() {
            var primaryBlogWithUpgrades = _.find(this.groupedUpgrades, function(blogWithUpgrades) {
                return blogWithUpgrades.primary;
            });
            if (primaryBlogWithUpgrades) {
                this.groupedUpgrades = _.union(primaryBlogWithUpgrades, this.groupedUpgrades);
            }
        }
    });
});

define("UpgradeModel", [ "ProxyPlugin" ], function(ProxyPlugin) {
    var $ = jQuery;
    return Backbone.Model.extend({
        initialize: function() {
            if (this.get("check_dns")) {
                this.checkNameServers();
            }
        },
        transfer: function(toBlogId) {
            var self = this, done = $.Deferred(), data = {
                product_id: this.get("product_id"),
                from_blog_id: this.get("blog_id"),
                to_blog_id: toBlogId
            }, response = _.extend({
                upgrade_id: this.get("ID")
            }, data);
            Backbone.ajax({
                proxy: true,
                type: "POST",
                url: "/upgrades/" + this.get("ID") + "/transfer",
                data: data,
                success: function() {
                    self.trigger("transfer", response);
                    done.resolve(response);
                },
                error: function() {
                    done.reject(response);
                }
            });
            return done;
        },
        cancel: function(opts) {
            var self = this;
            if (!opts) opts = {};
            return Backbone.ajax({
                proxy: true,
                data: opts,
                type: "POST",
                url: "/upgrades/" + this.get("ID") + "/cancel",
                success: function(response) {
                    self.trigger("cancel");
                }
            });
        },
        switchAutoRenew: function(enable) {
            var done = $.Deferred(), self = this, url;
            if (enable) {
                url = "/upgrades/" + this.get("ID") + "/enable-auto-renew";
            } else {
                url = "/upgrades/" + this.get("ID") + "/disable-auto-renew";
            }
            Backbone.ajax({
                proxy: true,
                type: "POST",
                url: url,
                success: function(data) {
                    if (data.upgrade) {
                        self.set(data.upgrade);
                    }
                    if (data.success) {
                        done.resolve(data);
                    } else {
                        done.reject(data);
                    }
                },
                error: function(data) {
                    self.set("error", data);
                    done.reject(data);
                }
            });
            return done;
        },
        enableAutoRenew: function() {
            return this.switchAutoRenew(true);
        },
        disableAutoRenew: function() {
            return this.switchAutoRenew(false);
        },
        updateCreditCard: function(creditCardData) {
            var done = $.Deferred(), self = this, url = "/upgrades/" + this.get("ID") + "/update-credit-card";
            Backbone.ajax({
                proxy: true,
                type: "POST",
                url: url,
                data: creditCardData,
                success: function(data) {
                    if (data.success) {
                        self.set(data.upgrade);
                        done.resolve(data);
                    } else if (data.error) {
                        done.reject(data);
                    }
                },
                error: function(data) {
                    done.reject(data);
                }
            });
            return done;
        },
        checkNameServers: function() {
            var self = this;
            Backbone.ajax({
                proxy: true,
                url: "/domains/" + self.get("meta") + "/check-nameservers/",
                data: null,
                success: function(data) {
                    if (!data.status) {
                        data.status = "error";
                        self.set("notification", data);
                    }
                }
            });
        },
        postDataToUrl: function(url, data) {
            var done = $.Deferred(), self = this;
            Backbone.ajax({
                proxy: true,
                type: "POST",
                url: url,
                data: data,
                success: function(data) {
                    self.set(data.upgrade);
                    if (data.success) {
                        done.resolve(data);
                    } else {
                        done.reject(data);
                    }
                },
                error: function(data) {
                    done.reject(data);
                }
            });
            return done;
        }
    });
});

define("GetCursorPosition", [], function() {
    (function($) {
        $.fn.getCursorPosition = function() {
            var input = this.get(0);
            if (!input) return;
            if ("selectionStart" in input) {
                return input.selectionStart;
            } else if (document.selection) {
                var sel = document.selection.createRange();
                var selLen = document.selection.createRange().text.length;
                sel.moveStart("character", -input.value.length);
                return sel.text.length - selLen;
            }
        };
    })(jQuery);
});

define("CancelModalView", [ "ModalDialogView", "templateFactory", "ProxyPlugin", "noticeUtils" ], function(ModalDialogView, templateFactory, ProxyPlugin, noticeUtils) {
    var $ = jQuery, CancelModalView;
    CancelModalView = ModalDialogView.extend({
        events: _.extend({}, ModalDialogView.prototype.events, {
            "submit form": "submitCancel",
            'change [name="domain_cancel_reason"]': "selectReason",
            'change [name="confirm"]': "updateConfirmation"
        }),
        initialize: function(options) {
            ModalDialogView.prototype.initialize.call(this, options);
            this.upgrade = options.upgrade;
            this.action = options.action;
            this.formHtml = this.loadFormHtml();
        },
        loadFormHtml: function() {
            var req = Backbone.ajax({
                proxy: true,
                url: "/upgrades/" + this.upgrade.get("ID") + "/cancel_form",
                data: {
                    product_id: this.upgrade.get("product_id")
                }
            });
            return req.then(function(res) {
                return res.html;
            });
        },
        render: function() {
            var self = this;
            this.formHtml.then(function(html) {
                self.data = {
                    title: self.action.get("text"),
                    content: html,
                    type: "cancel"
                };
                ModalDialogView.prototype.render.call(self);
                if (self.$("#domain_cancel_form_controls").length) {
                    self.$submitButton = self.$('input[type="submit"]');
                    self.$submitButton.prop("disabled", true);
                }
            });
        },
        submitCancel: function(event) {
            var self = this, $form, opts, request, $selected;
            event.preventDefault();
            $form = $(event.currentTarget);
            $selected = $("input:checked");
            if ($selected.val() == "keep_domain" && typeof $selected.data("subscriptionId") !== "undefined") {
                window.location = "/checkout/" + $selected.data("blogId") + "/53/" + $selected.data("subscriptionId");
            }
            opts = _.reduce($form.serializeArray(), function(acc, input) {
                acc[input.name] = input.value;
                return acc;
            }, {});
            request = this.upgrade.cancel(opts);
            this.$el.addClass("is-loading");
            request.always(function(data) {
                self.$el.removeClass("is-loading");
                self.close();
                if (data.error) {
                    noticeUtils.error(data.message);
                } else if (data.message) {
                    noticeUtils.success(data.message);
                }
            });
        },
        selectReason: function(event) {
            var value = $(event.currentTarget).val(), selected = this.$("#div_" + value);
            this.$("#domain_cancel_reasons > div").hide();
            if (selected.length) {
                selected.show();
            } else {
                this.$("#domain_cancel_form_controls").show();
            }
        },
        updateConfirmation: function(event) {
            var input = $(event.currentTarget);
            this.$submitButton.prop("disabled", !input.prop("checked"));
        }
    });
    CancelModalView.open = function(options) {
        var view = new CancelModalView(options);
        view.render();
    };
    return CancelModalView;
});

define("UpgradeView", [ "templateFactory", "UpgradeModel", "ModalDialogView", "GetCursorPosition", "ProxyPlugin", "CancelModalView" ], function(templateFactory, UpgradeModel, ModalDialogView, GetCursorPosition, ProxyPlugin, CancelModalView) {
    var TransferProductDialogView, UpgradeView, ActionView, ActionModel, DisableAutoRenewModalView, UpdateCreditCardModalView, ActionModalView, $ = jQuery;
    TransferProductDialogView = ModalDialogView.extend({
        events: _.extend({}, ModalDialogView.prototype.events, {
            "submit .select-blog-form": "submitTransfer"
        }),
        initialize: function(options) {
            ModalDialogView.prototype.initialize.call(this, options);
            this.upgrade = options.upgrade;
            this.action = options.action;
        },
        render: function() {
            var content = templateFactory.fetch("transfer-product", {
                blogs: this.action.get("transfer_blogs"),
                fromBlogDomain: this.upgrade.get("domain"),
                is_domain: Boolean(this.upgrade.get("is_domain"))
            });
            this.data = {
                title: $(content).data("title"),
                content: content,
                type: "transfer-product"
            };
            ModalDialogView.prototype.render.call(this);
            this.$select = this.$(".select-blog-form select");
        },
        submitTransfer: function(event) {
            event.preventDefault();
            var self = this, toBlogId = this.$select.find(":selected").val(), request = this.upgrade.transfer(toBlogId);
            this.$el.addClass("is-loading");
            request.fail(function() {
                self.$el.removeClass("is-loading");
                alert("Transfer failed");
            });
            request.done(function(data) {
                self.$el.removeClass("is-loading");
                self.close();
            });
        }
    });
    TransferProductDialogView.open = function(opts) {
        var dialog = new TransferProductDialogView(opts);
        dialog.render();
    };
    DisableAutoRenewModalView = ModalDialogView.extend({
        events: _.extend({}, ModalDialogView.prototype.events, {
            "click #disable-auto-renew-disable-button": "disableAutoRenew"
        }),
        initialize: function(options) {
            this.data = {
                title: this.model.get("text"),
                content: templateFactory.fetch(this.model.get("key"), this.model.attributes),
                type: "upgrade-details"
            };
            this.upgrade = options.upgrade;
        },
        disableAutoRenew: function(event) {
            event.preventDefault();
            $(event.currentTarget).addClass("loading");
            var request = this.upgrade.disableAutoRenew(), self = this;
            request.fail(function(data) {
                self.close();
            });
            request.done(function(data) {
                self.close();
            });
        }
    });
    UpdateCreditCardModalView = ModalDialogView.extend({
        events: _.extend({}, ModalDialogView.prototype.events, {
            submit: "updateCreditCard",
            "change .cc-country": "makeZipcodeOptional",
            "keypress .cc-number": "setCardType",
            "focusout .cc-number": "setCardType"
        }),
        initialize: function(options) {
            this.data = {
                title: this.model.get("text"),
                content: templateFactory.fetch("update-credit-card", this.model.attributes),
                type: "upgrade-details"
            };
            this.upgrade = options.upgrade;
        },
        updateCreditCard: function(event) {
            Paygate.setPublicKey($("#paygate-public-key").val());
            var creditCardData, request, self;
            self = this;
            event.preventDefault();
            creditCardData = this.$("form").serializeArray().map(function(element) {
                var fieldNameStart = element.name.lastIndexOf("[") + 1, fieldNameEnd = element.name.lastIndexOf("]");
                element.name = element.name.substring(fieldNameStart, fieldNameEnd);
                return element;
            });
            self.checkCardWithPaygate(creditCardData);
            this.disableForm();
        },
        checkCardWithPaygate: function(creditCardData) {
            self = this;
            var card = this.getExistingCardDetails(creditCardData);
            card = this.getSensitiveCardDetails(card);
            var paygateFailed = function() {
                self.enableForm();
                self.$(".notification").html("An error occured processing your request");
            };
            var paygateComplete = function(paygateResult) {
                creditCardData.push({
                    name: "paygate_token",
                    value: paygateResult.token
                });
                request = self.upgrade.updateCreditCard(creditCardData);
                request.fail(function(data) {
                    self.enableForm();
                    self.$(".notification").html(data.error);
                    self.$(".error").removeClass("error");
                    if (data.key) {
                        self.$("." + data.key).addClass("error");
                    }
                });
                request.done(function(data) {
                    self.close();
                });
            };
            Paygate.createToken(card, paygateComplete, paygateFailed);
        },
        getSensitiveCardDetails: function(card) {
            card.number = $("#cc-number").val();
            card.cvc = $("#cc-cvv2").val();
            return card;
        },
        getExistingCardDetails: function(creditCardData) {
            var i;
            var fld;
            var count = creditCardData.length;
            var card = {
                name: "",
                number: "",
                cvc: "",
                exp_month: "",
                exp_year: ""
            };
            for (i = 0; i < count; i++) {
                fld = creditCardData[i];
                switch (fld.name) {
                  case "name":
                    card.name = fld.value;
                    break;

                  case "year":
                    card.exp_year = fld.value;
                    break;

                  case "month":
                    card.exp_month = fld.value;
                    break;
                }
            }
            return card;
        },
        enableForm: function(form) {
            var button = this.$(".button");
            button.prop("disabled", false).removeClass("button-primary-disabled").addClass("button-primary").removeClass("loading");
        },
        disableForm: function(form) {
            var button = this.$(".button");
            button.prop("disabled", true).removeClass("button-primary").addClass("button-primary-disabled").addClass("loading");
        },
        makeZipcodeOptional: function(event) {
            var selected_country = $(event.currentTarget).find(":selected");
            var zipcode_field = this.$(".cc-zip");
            var optional_zipcode = false;
            var placeholder_text = this.$("label[for=" + zipcode_field.attr("id") + "]").text();
            if (selected_country.data("no-zipcodes")) optional_zipcode = true;
            if (zipcode_field.data("zip-optional")) optional_zipcode = true;
            if ("US" == selected_country.val() || !selected_country.val()) optional_zipcode = false;
            if (optional_zipcode) {
                placeholder_text = placeholder_text + " (" + zipcode_field.data("optional-placeholder") + ")";
            } else {
                placeholder_text = placeholder_text;
            }
            zipcode_field.prop("placeholder", placeholder_text);
        },
        setCardType: function(event) {
            var $creditCardField = $(event.currentTarget);
            var creditCardNumber = $creditCardField.val().replace(/\D/g, "");
            var cardType = this.getCardTypeFromNumber(creditCardNumber);
            this.$(".credit-type img").hide();
            this.$(".credit-type img.cc-type-" + cardType).show();
            this.$(".credit-type").toggle("unknown" != cardType);
            if ($creditCardField.getCursorPosition() == $creditCardField.val().length || "focusout" === event.type) {
                creditCardNumber = this.addSpacesToCreditCardNumber(creditCardNumber, cardType);
            }
            $creditCardField.val(creditCardNumber);
        },
        getCardTypeFromNumber: function(number) {
            if (number.match(/^(34|37)/)) {
                return "Amex";
            } else if (number.match(/^(51|52|53|54|55)/)) {
                return "MasterCard";
            } else if (number.match(/^(4)/)) {
                return "Visa";
            } else if (number.match(/^(6011|622|64|65)/)) {
                return "Discover";
            } else {
                return "unknown";
            }
        },
        addSpacesToCreditCardNumber: function(number, type) {
            var add_space = function(string, position) {
                return string.substr(0, position) + " " + string.substr(position);
            };
            if ("Amex" == type) {
                if (number.charAt(4)) number = add_space(number, 4);
                if (number.charAt(11)) number = add_space(number, 11);
            } else {
                if (number.charAt(4)) number = add_space(number, 4);
                if (number.charAt(9)) number = add_space(number, 9);
                if (number.charAt(14)) number = add_space(number, 14);
            }
            return number;
        }
    });
    ActionModalView = ModalDialogView.extend({
        events: _.extend({}, ModalDialogView.prototype.events, {
            "click .button-primary": "doAction"
        }),
        initialize: function(options) {
            this.data = {
                title: this.model.get("text"),
                content: templateFactory.fetch(this.model.get("key"), this.model.attributes),
                type: "upgrade-details"
            };
            this.upgrade = options.upgrade;
        },
        doAction: function(event) {
            event.preventDefault();
            $(event.currentTarget).addClass("loading");
            var request = this.upgrade.postDataToUrl(this.model.get("rest_url")), self = this;
            request.fail(function(data) {
                self.close();
            });
            request.done(function(data) {
                self.close();
            });
        }
    });
    ActionModel = Backbone.Model.extend({});
    ActionView = Backbone.View.extend({
        tagName: "li",
        model: ActionModel,
        initialize: function(options) {
            this.upgrade = options.upgrade;
            this.render();
        },
        events: {
            "click .cancelation-info, .cancel-private-whois": "showModal",
            "click .update-credit-card, .add-credit-card": "updateCreditCardModal",
            "click .enable-auto-renew": "enableAutoRenew",
            "click .disable-auto-renew": "showDisableAutoRenewModal",
            "click .transfer-product": "showTransferModal",
            "click .cancel": "showCancelModal"
        },
        render: function() {
            var $templateHtml = $(templateFactory.fetch("action", this.model.attributes));
            this.$el.html($templateHtml);
        },
        showModal: function(event) {
            event.preventDefault();
            var actionModalView = new ActionModalView({
                upgrade: this.upgrade,
                model: this.model
            });
            return actionModalView.render();
        },
        showTransferModal: function(event) {
            event.preventDefault();
            return TransferProductDialogView.open({
                upgrade: this.upgrade,
                action: this.model
            });
        },
        showCancelModal: function(event) {
            event.preventDefault();
            if ("undefined" !== typeof wpcom.kissmetrics) {
                wpcom.kissmetrics.recordEvent("Store_Newdash_Show_Cancel_Modal");
            }
            return CancelModalView.open({
                upgrade: this.upgrade,
                action: this.model
            });
        },
        enableAutoRenew: function(event) {
            event.preventDefault();
            if (!this.upgrade.get("can_reenable_auto_renewal")) {
                return this.updateCreditCardModal(event);
            } else {
                $(event.currentTarget).addClass("loading");
                return this.upgrade.enableAutoRenew();
            }
        },
        showDisableAutoRenewModal: function(event) {
            event.preventDefault();
            var disableAutoRenewModalView = new DisableAutoRenewModalView({
                upgrade: this.upgrade,
                model: this.model
            });
            return disableAutoRenewModalView.render();
        },
        updateCreditCardModal: function(event) {
            event.preventDefault();
            var updateCreditCardModalView = new UpdateCreditCardModalView({
                upgrade: this.upgrade,
                model: this.model
            });
            return updateCreditCardModalView.render();
        }
    });
    UpgradeView = Backbone.View.extend({
        tagName: "li",
        className: "product",
        model: UpgradeModel,
        events: {
            "click .learn-more": "learnMore",
            "click .settings": "showSecondaryActions",
            "click .actions .renewal-button": "renewUpgrade"
        },
        initialize: function() {
            this.listenTo(this.model, "change", function(upgrade) {
                this.render();
            });
            this.render();
        },
        unload: function() {
            this.remove();
        },
        render: function() {
            var self = this, $templateHtml = $(templateFactory.fetch("upgrade", this.model.attributes));
            _(this.model.attributes.actions).each(function(action) {
                var actionView = new ActionView({
                    model: new ActionModel(action),
                    upgrade: self.model
                });
                if (action.primary) {
                    $templateHtml.find(".primary-actions").prepend(actionView.$el);
                } else {
                    $templateHtml.filter(".secondary-actions").find("ul").append(actionView.$el);
                }
            });
            this.$el.html($templateHtml);
            return this;
        },
        learnMore: function(event) {
            event.preventDefault();
            var modalDialogView = new ModalDialogView();
            modalDialogView.data = {
                title: this.model.get("product_name"),
                content: this.model.get("description"),
                type: "upgrade-details"
            };
            modalDialogView.render();
        },
        showSecondaryActions: function(event) {
            event.preventDefault();
            var $button = $(event.currentTarget);
            $button.toggleClass("expand").addClass("animating");
            $button.one("webkitAnimationEnd oanimationend msAnimationEnd animationend", function(event) {
                $button.removeClass("animating");
            });
            this.$el.find(".secondary-actions").toggleClass("expand");
        },
        renewUpgrade: function(event) {
            event.preventDefault();
            var modalDialogView = new ModalDialogView();
            modalDialogView.data = {
                title: "Renew " + this.model.get("product_name"),
                content: "some form"
            };
            modalDialogView.render();
        }
    });
    return UpgradeView;
});

define("UpgradeCollection", [ "ProxyPlugin", "UpgradeModel" ], function(ProxyPlugin, UpgradeModel) {
    return Backbone.Collection.extend({
        model: UpgradeModel,
        initialize: function() {
            ProxyPlugin.withGlobalScope();
        }
    });
});

define("MyUpgradesView", [ "BlogUpgradesCollection", "UpgradeView", "UpgradeCollection", "templateFactory", "noticeUtils", "newdashI18n" ], function(BlogUpgradesCollection, UpgradeView, UpgradeCollection, templateFactory, noticeUtils, newdashI18n) {
    var $ = jQuery;
    function getParameterByName(name) {
        name = name.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
        var regex = new RegExp("[\\?&]" + name + "=([^&#]*)"), results = regex.exec(location.search);
        return results == null ? "" : decodeURIComponent(results[1].replace(/\+/g, " "));
    }
    var blogUpgradesView = Backbone.View.extend({
        tagName: "li",
        className: "site",
        render: function() {
            var $templateHtml = $(templateFactory.fetch("blog-upgrades", this.collection));
            return this.$el.html($templateHtml);
        },
        events: {
            "click .title": "toggleUpgrades",
            "click .domain": "goToDomain"
        },
        toggleUpgrades: function(event) {
            this.$el.toggleClass("collapse");
        },
        goToDomain: function(event) {
            event.stopPropogation();
        }
    });
    return Backbone.View.extend({
        el: "#my-upgrades",
        initialize: function() {
            var self = this, update, message;
            this.collection = new BlogUpgradesCollection({
                url: "/me/upgrades"
            });
            this.listenTo(this.collection, "reset", function() {
                if (self.upgrades) {
                    _.each(self.upgrades, _.bind(self.stopListening, self));
                }
                self.upgrades = [];
                self.render();
            });
            this.collection.fetch({
                reset: true,
                proxy: true
            });
            update = getParameterByName("update");
            if (update) {
                message = unsubNoticeMessages[update];
                noticeUtils[message.notice_type](message.message);
            }
        },
        unload: function() {
            this.remove();
        },
        render: function() {
            var self = this, $ul = $('<ul class="upgrades"></ul>'), upgradesByBlog = this.collection.groupByBlog();
            if (0 === upgradesByBlog.length) {
                $ul.append("<li>" + newdashI18n.get([ "my_upgrades", "no_upgrades_found" ]).replace("%s", "/plans/") + "</li>");
            }
            _.each(upgradesByBlog, function(blog) {
                var $blogUpgrades = new blogUpgradesView({
                    collection: blog
                }).render();
                var upgradeCollection = new UpgradeCollection(blog.upgrades), $upgradeList = $blogUpgrades.find(".upgrade-list");
                upgradeCollection.each(function(upgrade) {
                    self.upgrades.push(upgrade);
                    self.listenTo(upgrade, "transfer cancel", function() {
                        self.collection.fetch({
                            reset: true,
                            proxy: true
                        });
                    });
                    var upgradeView = new UpgradeView({
                        model: upgrade
                    });
                    $upgradeList.append(upgradeView.$el);
                });
                $ul.append($blogUpgrades);
            });
            this.$el.html($ul);
            return this;
        }
    });
});

define("myUpgrades", [ "MyUpgradesView" ], function(MyUpgradesView) {
    var wpcomMyUpgrades = {
        init: function() {
            if (!this.myUpgradesView) {
                this.myUpgradesView = new MyUpgradesView();
            }
        },
        unload: function() {
            if (this.myUpgradesView) {
                this.myUpgradesView.unload();
                this.myUpgradesView = null;
            }
        }
    };
    return wpcomMyUpgrades;
});

define("DomainManagementRowView", [ "templateFactory", "newdashI18n", "noticeUtils" ], function(templateFactory, newdashI18n, noticeUtils) {
    var $ = jQuery;
    var DomainManagementRowView = Backbone.View.extend({
        tagName: "div",
        className: "tr domain-list-row",
        events: {
            "click .managedomain": "manageDomain",
            "click button.redirectconfig": "showRedirectConfigRow"
        },
        initialize: function(options) {
            this.domainManagementSettings = options.domainManagementSettings;
        },
        manageDomain: function(event) {
            event.preventDefault();
            wpcom.domains.Run.openPopup(_.extend(this.domainManagementSettings, {
                selectedDomain: this.model,
                domains: this.collection
            }));
        },
        showRedirectConfigRow: function() {
            this.$el.after(templateFactory.fetch("domains-list-row-site-redirect", this.model.toJSON()));
        },
        render: function() {
            this.$el.html(templateFactory.fetch("domains-list-row", this.model.toJSON()));
            return this.$el;
        }
    });
    return DomainManagementRowView;
});

define("DomainsDomainModel", [], function() {
    var $ = jQuery, DomainsDomainModel = Backbone.Model.extend({
        defaults: {
            domain: "",
            primary_domain: false,
            expiry: false,
            expiry_soon: false,
            has_registration: false,
            has_zone: false,
            pending_registration: false,
            pending_registration_time: "",
            private_domain: false,
            partner_domain: false,
            wpcom_domain: false,
            owner: false,
            type: "wpcom",
            auto_renewing: false,
            can_set_as_primary: true,
            isRedirect: false,
            isMapping: false,
            hasDomainManagement: false,
            expiringDomain: false
        },
        idAttribute: "domain",
        domainStatus: false,
        whois: false,
        nameservers: false,
        email: false,
        dns: false,
        initialize: function() {
            this.set("isRedirect", "redirect" == this.get("type"));
            this.set("isMapping", "mapping" == this.get("type"));
            this.set("hasDomainManagement", this.get("isMapping") && (this.get("has_zone") || this.get("has_registration")));
            this.set("expiringDomain", this.get("expiry") && !this.get("auto_renewing") && !this.get("expired"));
            if (this.get("has_registration")) {}
            if ("mapping" == this.get("type") && !this.get("wpcom_domain") && !this.get("partner_domain")) {
                if (this.get("has_zone")) {}
            }
            this.set("isDefault", -1 !== this.get("domain").indexOf(".wordpress.com"));
        }
    });
    return DomainsDomainModel;
});

define("DomainsDomainCollection", [ "DomainsDomainModel", "ProxyPlugin" ], function(DomainsDomainModel, ProxyPlugin) {
    var $ = Backbone.$;
    return Backbone.Collection.extend({
        model: DomainsDomainModel,
        comparator: function(model) {
            return [ !model.get("primary_domain") ];
        },
        initialize: function(models, options) {
            options = options || {};
            this.blog = options.blog;
            this.listenTo(this, "change", this.sort);
        },
        url: function() {
            return "/sites/" + this.findSelectedBlog() + "/domains";
        },
        parse: function(response) {
            return response.domains;
        },
        fetch: function(options) {
            var newOpts = _.extend({
                proxy: true
            }, options);
            return Backbone.Collection.prototype.fetch.call(this, newOpts);
        },
        findSelectedBlog: function() {
            return $(".domains-blog-select select").find(":selected").val() || currentUser.primary_blog.id;
        },
        setPrimary: function(newDomain) {
            return ProxyPlugin.withGlobalScope().then(_.bind(this._setPrimary, this, newDomain));
        },
        _setPrimary: function(newDomain) {
            var changeRequest, out, self = this, oldDomain = this.findWhere({
                primary_domain: true
            }), changeRequest = $.wpcom_proxy_request(this.url() + "/primary", {
                method: "POST",
                body: {
                    domain: newDomain.get("domain")
                }
            });
            out = $.Deferred();
            changeRequest.fail(function() {
                out.reject();
            });
            changeRequest.done(function(data) {
                if (!data.success) {
                    out.reject();
                    return;
                }
                oldDomain.set("primary_domain", false);
                newDomain.set("primary_domain", true);
                out.resolve();
            });
            return out;
        }
    });
});

define("UserBlogsCollection", [ "BlogModel", "ProxyPlugin" ], function(BlogModel, ProxyPlugin) {
    var $ = jQuery;
    return Backbone.Collection.extend({
        url: "/me/sites",
        model: BlogModel,
        sync: function() {
            var self = this, args = arguments;
            return ProxyPlugin.withGlobalScope().then(function() {
                return Backbone.sync.apply(self, args);
            });
        },
        getPrimary: function() {
            return this.get(this.primaryId);
        },
        parse: function(response, options) {
            this.primaryId = response.sites[0].ID;
            return response.sites;
        },
        fetch: function(options) {
            var newOpts = _.extend({
                proxy: true
            }, options);
            return Backbone.Collection.prototype.fetch.call(this, newOpts);
        }
    });
});

define("DomainManagementView", [ "DomainManagementRowView", "DomainsDomainCollection", "UserBlogsCollection", "ProxyPlugin", "templateFactory", "newdashI18n", "noticeUtils" ], function(DomainManagementRowView, DomainsDomainCollection, UserBlogsCollection, ProxyPlugin, templateFactory, newdashI18n, noticeUtils) {
    var $ = jQuery;
    return Backbone.View.extend({
        el: ".my-domains .domains-content",
        events: {
            'change input[name="primary_domain"]': "maybeEnableUpdateButton",
            "click button.updatedomain": "changePrimaryDomain",
            "change .domains-blog-select select": "selectBlog"
        },
        initialize: function(args) {
            var self = this;
            args = args || {};
            this.bootstrapData = args.bootstrapData || {};
            this.domainManagementSettings = window.wpcomDomainManagementSettings;
            this.blog = args.blog;
            this.domains = new DomainsDomainCollection([], {
                blog: this.blog
            });
            this.userBlogs = new UserBlogsCollection();
            this.$select = this.$(".domains-blog-select").addClass("loading");
            this.listenTo(this.domains, "reset", this.renderDomains);
            this.listenTo(this.userBlogs, "reset", this.renderSelect);
            this.loadData();
            ProxyPlugin.requestGlobalScope();
        },
        loadData: function() {
            var self = this;
            if (this.bootstrapData.domains && this.bootstrapData.userBlogs) {
                this.allModelsLoaded = $.Deferred().resolve();
                this.domains.reset(bootstrapData.domains.domains);
                this.userBlogs.reset(bootstrapData.userBlogs.sites);
            } else if (this.blog) {
                this.allModelsLoaded = $.when(this.userBlogs.fetch({
                    reset: true
                }), this.domains.fetch({
                    reset: true
                }));
            } else {
                loadUserBlogs = this.userBlogs.fetch({
                    reset: true
                });
                this.allModelsLoaded = loadUserBlogs.then(function() {
                    return self.switchToBlog(self.userBlogs.getPrimary().id);
                });
            }
            this.allModelsLoaded.then(function() {
                self.$select.removeClass("loading");
            });
            ProxyPlugin.requestGlobalScope();
        },
        switchToBlog: function(blog) {
            var fetched, self = this;
            this.blog = blog;
            this.renderSelect();
            this.$select.addClass("loading");
            if (this.domains) {
                this.stopListening(this.domains);
            }
            this.domains = new DomainsDomainCollection([], {
                blog: blog
            });
            this.listenTo(this.domains, "reset", this.renderDomains);
            fetched = this.domains.fetch({
                reset: true
            });
            fetched.always(function() {
                self.$select.removeClass("loading");
            });
            return fetched;
        },
        maybeEnableUpdateButton: function(e) {
            var isPrimaryDomain = !!$(e.currentTarget).data("primary_domain");
            this.$el.find("button.updatedomain").prop("disabled", isPrimaryDomain);
        },
        changePrimaryDomain: function() {
            var self = this, checkedDomain = this.$el.find('input[name="primary_domain"]:checked').val(), response = this.domains.setPrimary(this.domains.get(checkedDomain));
            response.done(function() {
                var key = "primary_domain_success", message;
                self.renderDomains();
                message = templateFactory.hydrate(newdashI18n.get([ "my_domains", key ]), {
                    domain: self.domains.findWhere({
                        primary_domain: true
                    }).get("domain")
                });
                noticeUtils.hideKey(key);
                noticeUtils.success(message, {
                    key: key
                });
            });
            response.fail(function() {
                var key = "primary_domain_failure";
                noticeUtils.hideKey(key);
                noticeUtils.error(newdashI18n.get([ "my_domains", key ]), {
                    key: key
                });
            });
        },
        selectBlog: function(event) {
            var blog = $(event.currentTarget).val();
            this.trigger("selectBlog", blog);
        },
        render: function() {
            this.renderSelect();
            this.renderDomains();
        },
        renderSelect: function() {
            this.allModelsLoaded.then(_.bind(this._renderSelect, this));
        },
        _renderSelect: function() {
            var blogs, newSelect, self = this;
            blogs = this.userBlogs.where({
                user_can_manage: true
            }).map(function(blog) {
                return {
                    id: blog.get("ID"),
                    name: blog.get("name"),
                    selected: self.blog == blog.get("ID")
                };
            });
            if (blogs.length > 1) {
                newSelect = $(templateFactory.fetch("domains-blog-select").render({
                    blogs: blogs
                }));
                this.$select = newSelect.replaceAll(this.$select);
            }
        },
        renderDomains: function() {
            this.allModelsLoaded.then(_.bind(this._renderDomains, this));
        },
        _renderDomains: function() {
            var domainsList, self = this;
            domainsList = $(templateFactory.fetch("domains-list").render());
            this.$(".domains-list").replaceWith(domainsList);
            this.$tbody = domainsList.find(".domains-list-body");
            if (self.domains.length) {
                self.$tbody.find(".tr").remove();
                self.domains.each(function(model) {
                    self.domainRow = new DomainManagementRowView({
                        model: model,
                        collection: self.domains,
                        domainManagementSettings: self.domainManagementSettings
                    });
                    self.$tbody.append(self.domainRow.render());
                    if (model.get("primary_domain")) {
                        self.$tbody.append(templateFactory.fetch("domains-list-row-primary-domain").render());
                    } else if (model.get("isDefault")) {
                        self.$tbody.append(templateFactory.fetch("domains-list-row-default-domain").render());
                    }
                });
            } else {
                self.$tbody.html(templateFactory.fetch("domains-list-no-rows"));
            }
        },
        unload: function() {
            this.domains = null;
            delete this.domains;
            this.remove();
            this.off();
        }
    });
});

define("domain-management", [ "DomainManagementView", "templateFactory", "newdashI18n", "noticeUtils" ], function(DomainManagementView, templateFactory, newdashI18n, noticeUtils) {
    var wpcomDomainManagement, $ = jQuery, bootstrapData = window.bootstrapData;
    wpcomDomainManagement = {
        isFirstLoad: true,
        isActive: function() {
            return !!this.domainManagementView;
        },
        init: function(router) {
            this.router = router;
            var blog = router.currentRoute[1];
            if (!this.domainManagementView) {
                this.setupView(blog);
            } else {
                this.domainManagementView.switchToBlog(blog);
            }
            this.isFirstLoad = false;
        },
        setupView: function(blog) {
            var self = this;
            this.domainManagementView = new DomainManagementView({
                blog: blog,
                bootstrapData: this.isFirstLoad ? bootstrapData : null
            });
            this.domainManagementView.on("selectBlog", function(newBlog) {
                self.router.setRoute("/my-domains/" + newBlog);
            });
        },
        unload: function() {
            if (this.router.previousRoute[0] === this.router.currentRoute[0]) {
                return;
            }
            this.domainManagementView.unload();
            this.domainManagementView = null;
        }
    };
    return wpcomDomainManagement;
});

define("DomainManagementEditDomainView", [ "templateFactory", "newdashI18n", "noticeUtils" ], function(templateFactory, newdashI18n, noticeUtils) {
    var $ = jQuery;
    var DomainManagementEditDomainView = Backbone.View.extend({
        el: "#edit-domain-placeholder",
        model: "DomainManagementEditDomain",
        initialize: function(args) {
            this.domain = args.domain;
        },
        render: function() {
            this.$el.html(templateFactory.fetch("edit-domain", {
                domain: this.domain
            }));
            return this.$el;
        }
    });
    return DomainManagementEditDomainView;
});

define("DomainManagementEditDomain", [ "DomainManagementEditDomainView", "templateFactory", "newdashI18n", "noticeUtils" ], function(DomainManagementEditDomainView, templateFactory, newdashI18n, noticeUtils) {
    var $ = jQuery;
    var wpcomDomainManagementEditDomain = {
        init: function(args) {
            if (!this.domainManagementEditDomainView) {
                this.domainManagementEditDomainView = new DomainManagementEditDomainView(args);
                this.domainManagementEditDomainView.render();
            }
        },
        unload: function() {
            if (this.domainManagementEditDomainView) {
                this.domainManagementEditDomainView.unload();
                this.domainManagementEditDomainView = null;
            }
        }
    };
    return wpcomDomainManagementEditDomain;
});

define("DomainsView", [], function() {
    return Backbone.View.extend({
        el: "#domains",
        unload: function() {
            this.remove();
        }
    });
});

define("domains", [ "DomainsView" ], function(DomainsView) {
    return {
        init: function() {
            if (!this.domainsView) {
                this.domainsView = new DomainsView();
            }
        },
        unload: function() {
            if (this.domainsView) {
                this.domainsView.unload();
                this.domainsView = null;
            }
        }
    };
});

define("DomainAvailability", [ "ProxyPlugin" ], function(ProxyPlugin) {
    return Backbone.Model.extend({
        load: function(query) {
            var deferred = Backbone.$.Deferred();
            if (!_.isUndefined(query)) {
                if (_.isString(query)) {
                    query = query.trim().toLowerCase();
                    var options = {
                        url: "/domains/" + query + "/is-available",
                        query: query,
                        proxy: true
                    };
                    return this.fetch(options);
                } else {
                    deferred.reject("Unable to retrieve domain name availability because of invalid query parameter");
                }
            } else {
                deferred.reject("Unable to retrieve domain name availability because of missing query parameter");
            }
            return deferred;
        },
        parse: function(response, options) {
            var model = {
                domainName: options.query
            };
            model.isRegistrable = response.is_registrable;
            if (model.isRegistrable) {
                model.isAvailable = response.is_available;
                if (model.isAvailable) {
                    model.cost = response.cost;
                }
            }
            return model;
        }
    });
});

define("DomainGoogleAppsPlans", [ "ProxyPlugin" ], function(ProxyPlugin) {
    return Backbone.Model.extend({
        load: function(domainName) {
            var deferred = Backbone.$.Deferred();
            if (!_.isUndefined(domainName)) {
                if (_.isString(domainName)) {
                    domainName = domainName.trim().toLowerCase();
                    var options = {
                        url: "/domains/" + domainName + "/google-apps-check",
                        domainName: domainName,
                        proxy: true
                    };
                    return this.fetch(options);
                } else {
                    deferred.reject("Unable to retrieve Google Apps plans because of invalid domain name parameter");
                }
            } else {
                deferred.reject("Unable to retrieve Google Apps plans because of missing domain name parameter");
            }
            return deferred;
        }
    });
});

define("DomainBaseView", [ "DomainGoogleAppsPlans", "UserBlogsCollection" ], function(DomainGoogleAppsPlans, UserBlogsCollection) {
    return Backbone.View.extend({
        events: {
            submit: "search",
            "click a.button-primary": "selectDomain"
        },
        initialize: function() {
            this.$input = this.$el.find("[type=search]");
            this.$submit = this.$el.find("[type=submit]");
            this.$results = this.$el.find(".results");
            this.googleAppsPlans = new DomainGoogleAppsPlans();
            this.userBlogs = new UserBlogsCollection();
        },
        initialized: function() {
            this.loaded();
            this.$el.find(".loader").remove();
            this.$input.focus();
            this.userBlogs.fetch();
        },
        goTo: function(actionName, domainName) {
            if (this.userBlogs.length > 1) {
                this.goToBlogSelectionPage(actionName, domainName);
            } else if (1 === this.userBlogs.length) {
                var blogId = this.userBlogs.getPrimary().get("ID");
                if ("register" === actionName && window.wpcomNewdashFeatures.newdash_store_google_apps) {
                    var self = this;
                    this.googleAppsPlans.load(domainName).done(function(response) {
                        if (_.has(response, "error") || "error" === response) {
                            self.goToCheckoutPage(actionName, domainName, blogId);
                        } else {
                            self.goToGoogleAppsSelectionPage(actionName, domainName, blogId);
                        }
                    }).fail(function() {
                        self.goToCheckoutPage(actionName, domainName, blogId);
                    });
                } else {
                    this.goToCheckoutPage(actionName, domainName, blogId);
                }
            }
        },
        goToBlogSelectionPage: function(actionName, domainName) {
            window.wpcomNewdash.router.setRoute("/domains/" + actionName + "/" + domainName + "/");
        },
        goToCheckoutPage: function(actionName, domainName, blogId) {
            window.wpcomNewdash.router.setRoute("/checkout/" + blogId + "/" + actionName + "-domain/" + domainName + "/");
        },
        goToGoogleAppsSelectionPage: function(actionName, domainName, blogId) {
            window.wpcomNewdash.router.setRoute("/domains/" + actionName + "/" + domainName + "/" + blogId + "/");
        },
        highlightSearch: function() {
            this.$submit.removeClass("button-secondary").addClass("button-primary");
        },
        loading: function() {
            this.highlightSearch();
            this.$el.addClass("loading");
            this.$results.html(this.template.render());
            this.$submit.prop("disabled", "disabled");
        },
        loaded: function() {
            this.$el.removeClass("loading");
            this.$submit.prop("disabled", false);
        },
        playDownSearch: function() {
            this.$submit.removeClass("button-primary").addClass("button-secondary");
        },
        search: function(event) {
            event.preventDefault();
            this.query = this.$input.val().trim().toLowerCase();
            if ("" !== this.query) {
                this.$input.val(this.query);
                this.loading();
                if ("undefined" !== typeof wpcom.kissmetrics) {
                    var id = this.$el.attr("id");
                    if ("domain-registration" == id) {
                        wpcom.kissmetrics.recordEvent("newdash_domains_register_search");
                    } else if ("domain-mapping" == id) {
                        wpcom.kissmetrics.recordEvent("newdash_domains_map_search");
                    } else {
                        console.log("Unrecognized element id: " + id);
                    }
                }
                this.model.load(this.query);
            } else {
                this.$input.focus();
            }
        }
    });
});

define("DomainExampleView", [ "templateFactory" ], function(templateFactory) {
    return Backbone.View.extend({
        tagName: "li",
        events: {
            "click a": "select"
        },
        initialize: function() {
            this.template = templateFactory.fetch("domain-example");
        },
        render: function() {
            this.$el.html(this.template.render(this.model.toJSON()));
            return this.el;
        },
        select: function(event) {
            event.preventDefault();
            Backbone.trigger("domain-example:select", this.model);
        }
    });
});

define("DomainSuggestion", [], function() {
    return Backbone.Model.extend({
        set: function(attributes, options) {
            if (_.has(attributes, "domainName")) {
                if (_.isString(attributes.domainName)) {
                    attributes.domainName = attributes.domainName.trim().toLowerCase();
                }
            }
            return Backbone.Model.prototype.set.apply(this, arguments);
        }
    });
});

define("DomainSuggestions", [ "DomainSuggestion", "ProxyPlugin" ], function(DomainSuggestion, ProxyPlugin) {
    return Backbone.Collection.extend({
        model: DomainSuggestion,
        url: "/domains/suggestions",
        load: function(query, quantity) {
            var deferred = Backbone.$.Deferred();
            if (!_.isUndefined(query)) {
                if (_.isString(query)) {
                    var options = {
                        data: {
                            query: query
                        },
                        proxy: true
                    };
                    if (!_.isUndefined(quantity)) {
                        if (_.isNumber(quantity)) {
                            options.data.quantity = quantity;
                        } else {
                            deferred.reject("Unable to retrieve domain name suggestions because of invalid quantity parameter");
                        }
                    }
                    if ("pending" === deferred.state()) {
                        return this.fetch(options);
                    }
                } else {
                    deferred.reject("Unable to retrieve domain name suggestions because of invalid query parameter");
                }
            } else {
                deferred.reject("Unable to retrieve domain name suggestions because of missing query parameter");
            }
            return deferred;
        },
        parse: function(response, options) {
            var suggestions = _.sortBy(response, function(suggestion) {
                return suggestion.domain_name;
            });
            return _.map(suggestions, function(suggestion) {
                return {
                    id: suggestion.domain_name.trim().toLowerCase(),
                    domainName: suggestion.domain_name,
                    cost: suggestion.cost
                };
            });
        }
    });
});

define("DomainExamplesView", [ "DomainExampleView", "DomainSuggestions", "templateFactory" ], function(DomainExampleView, DomainSuggestions, templateFactory) {
    return Backbone.View.extend({
        id: "domain-examples",
        initialize: function() {
            this.template = templateFactory.fetch("domain-examples");
            this.views = [];
            this.listenTo(this.collection, "add", this.add);
        },
        add: function(model) {
            var view = new DomainExampleView({
                model: model
            });
            this.views.push(view);
            if (!this.isRendered()) {
                this.render();
            }
            this.$el.find("ul").append(view.render());
        },
        isRendered: function() {
            return this.$el.children().length > 0;
        },
        remove: function() {
            _.each(this.views, function(view) {
                view.remove();
            });
            this.views = null;
            return Backbone.View.prototype.remove.apply(this, arguments);
        },
        render: function() {
            this.$el.html(this.template.render());
            return this.el;
        }
    });
});

define("DomainSuggestionView", [ "templateFactory" ], function(templateFactory) {
    return Backbone.View.extend({
        tagName: "li",
        events: {
            "click a": "select"
        },
        initialize: function() {
            this.template = templateFactory.fetch("domain-suggestion");
        },
        render: function() {
            this.$el.html(this.template.render(this.model.toJSON()));
            return this.el;
        },
        select: function(event) {
            event.preventDefault();
            Backbone.trigger("domain-suggestion:select", this.model);
        }
    });
});

define("DomainSuggestionsView", [ "DomainSuggestions", "DomainSuggestionView", "templateFactory" ], function(DomainSuggestions, DomainSuggestionView, templateFactory) {
    return Backbone.View.extend({
        id: "domain-suggestions",
        events: {
            "click ul + a": "loadMore"
        },
        initialize: function() {
            this.collection = new DomainSuggestions();
            this.template = templateFactory.fetch("domain-suggestions");
            this.views = [];
            this.listenTo(this.collection, "add", this.add);
        },
        add: function(model) {
            var view = new DomainSuggestionView({
                model: model
            });
            this.views.push(view);
            if (!this.isRendered()) {
                this.render();
            }
            this.$el.find("ul").append(view.render());
        },
        clear: function() {
            this.collection.reset();
            this.empty();
            this.$el.empty();
        },
        empty: function() {
            _.each(this.views, function(view) {
                view.remove();
            });
            this.views = [];
        },
        isRendered: function() {
            return this.$el.children().length > 0;
        },
        load: function(query) {
            this.query = query;
            return this.collection.load(query, 5);
        },
        loadMore: function(event) {
            event.preventDefault();
            this.collection.load(this.query, 10);
            this.$(event.target).hide();
        },
        remove: function() {
            this.empty();
            return Backbone.View.prototype.remove.apply(this, arguments);
        },
        render: function() {
            this.$el.html(this.template.render());
            this.delegateEvents();
            return this.el;
        }
    });
});

define("DomainRegistrationView", [ "DomainAvailability", "DomainBaseView", "DomainExamplesView", "DomainSuggestions", "DomainSuggestionsView", "templateFactory" ], function(DomainAvailability, DomainBaseView, DomainExamplesView, DomainSuggestions, DomainSuggestionsView, templateFactory) {
    return DomainBaseView.extend({
        el: "#domain-registration",
        template: templateFactory.fetch("domain-registration-searching"),
        initialize: function() {
            DomainBaseView.prototype.initialize.apply(this, arguments);
            this.model = new DomainAvailability();
            this.domainExamples = new DomainSuggestions();
            this.domainExamplesView = new DomainExamplesView({
                collection: this.domainExamples
            });
            this.domainSuggestionsView = new DomainSuggestionsView();
            this.listenTo(this.model, "sync", this.renderResults);
            this.listenTo(this.model, "error", this.renderError);
            this.listenTo(this.domainExamples, "error", this.loadDefaultExamples);
            this.listenTo(this.userBlogs, "sync", this.loadExamples);
            this.listenTo(Backbone, "domain-example:select", this.selectExample);
            this.listenTo(Backbone, "domain-suggestion:select", this.selectSuggestion);
            this.renderExamples();
            this.initialized();
        },
        loadExamples: function() {
            var url = this.userBlogs.getPrimary().get("URL");
            var domain = url.match(/^https?:\/\/([^\.\/]+)/i);
            if (null !== domain) {
                this.domainExamples.load(domain[1], 2);
            }
        },
        loadDefaultExamples: function(collection, response, options) {
            var self = this;
            _.each([ "com", "me" ], function(extension) {
                self.domainExamples.add({
                    domainName: options.data.query + "." + extension
                });
            });
        },
        loadSuggestions: function(query) {
            var self = this;
            this.$results.append(this.domainSuggestionsView.el);
            this.domainSuggestionsView.clear();
            this.domainSuggestionsView.load(query).done(function(response) {
                if (self.isKeyword(query)) {
                    self.$results.find(".searching").remove();
                }
                if (!response.error) {
                    if (0 === response.length) {
                        if (self.isKeyword(query)) {
                            self.$results.html(templateFactory.fetch("domain-registration-no-suggestions", {
                                domainName: query
                            }));
                        } else {}
                        self.highlightSearch();
                    } else {
                        self.playDownSearch();
                    }
                } else {
                    self.highlightSearch();
                }
                self.loaded();
            });
        },
        unload: function() {
            this.domainExamplesView.remove();
            this.domainSuggestionsView.remove();
            this.remove();
        },
        isKeyword: function(query) {
            return /^[A-Za-z0-9\s]+$/.test(query);
        },
        isTechnicalError: function(response) {
            return "error" === response || "timeout" === response;
        },
        renderError: function(model, response, options) {
            if (this.isTechnicalError(response)) {
                this.$results.html(templateFactory.fetch("domain-registration-result-error", {}));
                this.loaded();
            } else {
                if (!this.isKeyword(options.query)) {
                    this.$results.html(templateFactory.fetch("domain-registration-result-invalid", {
                        domainName: options.query
                    }));
                }
                this.loadSuggestions(options.query);
            }
        },
        renderExamples: function() {
            this.$submit.after(this.domainExamplesView.el);
        },
        renderResults: function(model, response, options) {
            var isRegistrable = this.model.get("isRegistrable");
            var isAvailable = false;
            var templateName;
            if (isRegistrable) {
                isAvailable = this.model.get("isAvailable");
                if (isAvailable) {
                    templateName = "domain-registration-result-available";
                    this.playDownSearch();
                } else {
                    templateName = "domain-registration-result-unavailable";
                }
            } else {
                templateName = "domain-registration-result-unregistrable";
            }
            this.$results.html(templateFactory.fetch(templateName, this.model.toJSON()));
            if (!isRegistrable || !isAvailable) {
                this.loadSuggestions(options.query);
            } else {
                this.loaded();
            }
        },
        selectDomain: function(event) {
            event.preventDefault();
            this.goTo("register", this.model.get("domainName"));
        },
        selectExample: function(model) {
            this.$input.val(model.get("domainName"));
            this.$input.focus();
            this.$el.submit();
        },
        selectSuggestion: function(model) {
            this.goTo("register", model.get("domainName"));
        }
    });
});

define("domain-registration", [ "DomainRegistrationView" ], function(DomainRegistrationView) {
    return {
        init: function() {
            if (!this.domainRegistrationView) {
                this.domainRegistrationView = new DomainRegistrationView();
            }
        },
        unload: function() {
            if (this.domainRegistrationView) {
                this.domainRegistrationView.unload();
                this.domainRegistrationView = null;
            }
        }
    };
});

define("DomainBlogSelectionBaseView", [ "UserBlogsCollection" ], function(UserBlogsCollection) {
    return Backbone.View.extend({
        el: "#domain-blog-selection",
        initialize: function(options) {
            this.domainName = options.domainName;
            this.userBlogs = new UserBlogsCollection();
            this.listenTo(this.userBlogs, "sync", this.render);
            this.userBlogs.fetch();
        },
        render: function() {
            var allBlogs = this.userBlogs.toJSON();
            var nonJetpackBlogs = _.filter(allBlogs, function(blog) {
                return !blog.jetpack;
            });
            var blogs = _(nonJetpackBlogs).map(function(blog) {
                var iconUrl = "//s1.wp.com/i/logo/gray-dark-transparent-100.png";
                if (_.has(blog, "icon")) {
                    iconUrl = blog.icon.img + "?s=20";
                }
                var hasPlan = false;
                if (blog.plan && blog.plan !== 1) {
                    hasPlan = true;
                }
                return {
                    id: blog.ID,
                    url: blog.URL.replace(/^https?:\/\//, ""),
                    name: blog.name,
                    iconUrl: iconUrl,
                    plan: blog.plan,
                    hasPlan: hasPlan
                };
            });
            this.$el.find(".loader").remove();
            this.$el.find("#store-content").html(this.template.render({
                domainName: this.domainName,
                blogs: blogs
            }));
            return this.el;
        },
        unload: function() {
            this.remove();
        }
    });
});

define("DomainRegistrationBlogSelectionView", [ "DomainBlogSelectionBaseView", "DomainGoogleAppsPlans", "templateFactory" ], function(DomainBlogSelectionBaseView, DomainGoogleAppsPlans, templateFactory) {
    return DomainBlogSelectionBaseView.extend({
        events: {
            "click a.button-secondary": "selectBlog"
        },
        template: templateFactory.fetch("domain-registration-blog-selection"),
        initialize: function() {
            DomainBlogSelectionBaseView.prototype.initialize.apply(this, arguments);
            this.googleAppsPlans = new DomainGoogleAppsPlans();
        },
        selectBlog: function(event) {
            event.preventDefault();
            var self = this;
            var blogId = Backbone.$(event.target).data("blog-id");
            if (window.wpcomNewdashFeatures.newdash_store_google_apps) {
                this.googleAppsPlans.load(this.domainName).done(function(response) {
                    if (_.has(response, "error") || "error" === response) {
                        self.goToCheckoutPage(self.domainName, blogId);
                    } else {
                        self.goToGoogleAppsSelectionPage(self.domainName, blogId);
                    }
                }).fail(function() {
                    self.goToCheckoutPage(self.domainName, blogId);
                });
            } else {
                this.goToCheckoutPage(this.domainName, blogId);
            }
        },
        goToCheckoutPage: function(domainName, blogId) {
            window.wpcomNewdash.router.setRoute("/checkout/" + blogId + "/register-domain/" + domainName + "/");
        },
        goToGoogleAppsSelectionPage: function(domainName, blogId) {
            window.wpcomNewdash.router.setRoute("/domains/register/" + domainName + "/" + blogId + "/");
        }
    });
});

define("domain-registration-blog-selection", [ "DomainRegistrationBlogSelectionView" ], function(DomainRegistrationBlogSelectionView) {
    return {
        init: function(options) {
            if (!this.domainRegistrationBlogSelectionView) {
                this.domainRegistrationBlogSelectionView = new DomainRegistrationBlogSelectionView(options);
            }
        },
        unload: function() {
            if (this.domainRegistrationBlogSelectionView) {
                this.domainRegistrationBlogSelectionView.unload();
                this.domainRegistrationBlogSelectionView = null;
            }
        }
    };
});

define("DomainRegistrationGoogleAppsSelectionView", [ "DomainGoogleAppsPlans", "ModalDialogView", "noticeUtils", "templateFactory" ], function(DomainGoogleAppsPlans, ModalDialogView, noticeUtils, templateFactory) {
    var ErrorNoticeView = Backbone.View.extend({
        initialize: function() {
            this.notices = [];
        },
        hide: function(key) {
            if (_.contains(this.notices, key)) {
                noticeUtils.hideKey(key);
                this.notices = _.without(this.notices, key);
            }
        },
        hideAll: function() {
            this.notices = _.filter(this.notices, function(key) {
                noticeUtils.hideKey(key);
                return false;
            });
        },
        render: function(key, data) {
            data = data || {};
            this.hideAll();
            noticeUtils.error(templateFactory.fetch(key, data), {
                key: key
            });
            this.notices.push(key);
            return this.el;
        }
    });
    var Form = {
        check: function(users) {
            this.users = users;
            this.errors = [];
            var self = this;
            _.each(users, function(user, index) {
                self.checkEmail(user, index);
                self.checkFirstname(user, index);
                self.checkLastname(user, index);
            });
        },
        addError: function(index, id, code) {
            if (null !== code) {
                id += "_" + index;
                var error = {};
                error.id = id;
                error[code] = true;
                if (this.users.length > 1) {
                    error.index = index + 1;
                }
                this.errors.push(error);
            }
        },
        checkEmail: function(user, index) {
            var code = null;
            if (user.email.length > 65) {
                code = "emailTooLong";
            } else if (!user.email.length) {
                code = "emailEmpty";
            } else if (!user.email.match(/^[a-z0-9.'_-]+@.+$/) || user.email.match(/[.]{2,}/)) {
                code = "emailInvalid";
            } else if ("abuse" == user.email || "postmaster" == user.email) {
                code = "emailInvalid";
            }
            this.addError(index, "email", code);
        },
        checkFirstname: function(user, index) {
            var code = null;
            if (!user.firstname.length) {
                code = "firstnameEmpty";
            } else if (user.firstname.length > 60) {
                code = "firstnameTooLong";
            }
            this.addError(index, "firstname", code);
        },
        checkLastname: function(user, index) {
            var code = null;
            if (!user.lastname.length) {
                code = "lastnameEmpty";
            } else if (user.lastname.length > 60) {
                code = "lastnameTooLong";
            }
            this.addError(index, "lastname", code);
        },
        getErrors: function() {
            return this.errors;
        },
        hasErrors: function() {
            return this.errors.length > 0;
        }
    };
    var MoreInformationModalDialogView = ModalDialogView.extend({
        template: templateFactory.fetch("domain-registration-google-apps-selection-more-information"),
        render: function() {
            this.data = {
                title: "Google Apps",
                content: this.template.render(),
                type: "google-apps-more-information"
            };
            ModalDialogView.prototype.render.call(this);
        }
    });
    return Backbone.View.extend({
        el: "#domain-registration-google-apps-selection",
        events: {
            "change input:radio": "select",
            "click header a": "more",
            "click section:last-child a": "addAccount",
            "click section:not(:first-child, :last-child) a": "removeAccount",
            "click a.button": "submit",
            'blur input[type="email"]': "emailBlur",
            'focus input[type="email"]': "emailFocus",
            "focus input.error": "removeErrorHighlight"
        },
        template: templateFactory.fetch("domain-registration-google-apps-selection"),
        initialize: function(options) {
            this.domainName = options.domainName;
            this.blogId = options.blogId;
            this.modalDialogView = new MoreInformationModalDialogView();
            this.errorNoticeView = new ErrorNoticeView();
            this.model = new DomainGoogleAppsPlans();
            this.listenTo(this.model, "sync", this.renderForm);
            this.listenTo(this.model, "error", this.renderError);
            this.render();
        },
        addAccount: function(event) {
            if (!_.isUndefined(event)) {
                event.preventDefault();
            }
            var template = templateFactory.fetch("domain-registration-google-apps-selection-account");
            var index = this.$el.find("section.google-apps-user").length;
            while (this.$el.find("#email_" + index).length) {
                index++;
            }
            var section = Backbone.$(Backbone.$.trim(template.render({
                domainName: this.domainName,
                index: index
            }))).insertBefore(this.$el.find("section:last-child"));
            if (!_.isUndefined(event)) {
                section.show();
                section.find("input").first().focus();
            }
        },
        loaded: function() {
            this.$el.find(".loader").remove();
            this.$el.find("a.button").attr("disabled", false);
        },
        more: function(event) {
            event.preventDefault();
            this.modalDialogView.render();
        },
        render: function() {
            this.$el.find("#store-content").html(this.template.render({
                domainName: this.domainName,
                blogId: this.blogId
            }));
            this.model.load(this.domainName);
            return this.el;
        },
        renderError: function(model, response, options) {
            var templateName = "domain-registration-google-apps-selection-error";
            if (response.error) {
                templateName += "-" + response.error.replace("_", "-");
            }
            this.$el.find("header").after(templateFactory.fetch(templateName, {
                domainName: options.domainName
            }));
            this.loaded();
        },
        renderForm: function() {
            this.$el.find("header").after(templateFactory.fetch("domain-registration-google-apps-selection-form", {
                plans: this.model.toJSON()
            }));
            this.addAccount();
            this.loaded();
        },
        removeAccount: function(event) {
            event.preventDefault();
            Backbone.$(event.target).parents("section").remove();
            var sections = this.$el.find("section.google-apps-user");
            if (0 === sections.length) {
                this.addAccount(event);
            } else {
                sections.each(function(index) {
                    Backbone.$(this).find("input, label").each(function() {
                        _.each(this.attributes, function(attribute) {
                            attribute.value = attribute.value.replace(/_\d+$/, "_" + index);
                            attribute.value = attribute.value.replace(/\[\d+\]/, "[" + index + "]");
                        });
                    });
                });
            }
        },
        emailFocus: function(e) {
            var target = Backbone.$(e.target), val = target.val();
            if (!val) return;
            if (-1 !== val.indexOf("@")) val = val.substring(0, val.indexOf("@"));
            target.val(val);
        },
        emailBlur: function(e) {
            var target = Backbone.$(e.target), val = target.val();
            if (-1 !== val.indexOf("@")) val = val.substring(0, val.indexOf("@"));
            val = val.replace(/[^a-z0-9_.-]/gi, "");
            if (val) val += "@" + this.domainName;
            target.val(val);
        },
        removeErrorHighlight: function(e) {
            Backbone.$(e.target).removeClass("error");
        },
        select: function(event) {
            event.preventDefault();
            var sections = this.$el.find("section:not(:first-child)");
            if (_.isEmpty(event.target.value)) {
                sections.hide();
            } else {
                sections.show();
            }
            this.errorNoticeView.hide("domain-registration-google-apps-selection-error-empty-option");
        },
        submit: function(event) {
            var self = this, type = self.$el.find('input[type="radio"]:checked').val();
            event.preventDefault();
            if (_.isUndefined(type)) {
                event.stopPropagation();
                this.errorNoticeView.render("domain-registration-google-apps-selection-error-empty-option");
            } else if (!_.isEmpty(type)) {
                var users = [], regex = /^google_apps_users\[(\d+)\]\[(.*)\]$/;
                self.$el.find("input").serializeArray().forEach(function(el) {
                    var raw = el.name.match(regex);
                    if (!raw) return;
                    var id = raw[1], field = raw[2];
                    if (!users[id]) users[id] = {};
                    users[id][field] = el.value.trim();
                    if (field == "email") {
                        users[id].email = users[id].email.toLowerCase();
                    }
                });
                Form.check(users);
                if (Form.hasErrors()) {
                    event.stopPropagation();
                    var errors = Form.getErrors();
                    _.each(errors, function(error) {
                        self.$el.find("#" + error.id).addClass("error");
                    });
                    this.errorNoticeView.render("domain-registration-google-apps-selection-error-invalid-form", {
                        errors: errors
                    });
                } else if (!Backbone.$.isEmptyObject(users)) {
                    var url = event.target.href + "?google-apps=" + type + "&google-apps-users=" + JSON.stringify(users);
                    window.wpcomNewdash.router.setRoute(url);
                }
            }
        },
        unload: function() {
            this.remove();
        }
    });
});

define("domain-registration-google-apps-selection", [ "DomainRegistrationGoogleAppsSelectionView" ], function(DomainRegistrationGoogleAppsSelectionView) {
    return {
        init: function(options) {
            if (!this.domainRegistrationGoogleAppsSelectionView) {
                this.domainRegistrationGoogleAppsSelectionView = new DomainRegistrationGoogleAppsSelectionView(options);
            }
        },
        unload: function() {
            if (this.domainRegistrationGoogleAppsSelectionView) {
                this.domainRegistrationGoogleAppsSelectionView.unload();
                this.domainRegistrationGoogleAppsSelectionView = null;
            }
        }
    };
});

define("DomainMappability", [ "ProxyPlugin" ], function(ProxyPlugin) {
    return Backbone.Model.extend({
        load: function(query) {
            var deferred = Backbone.$.Deferred();
            if (!_.isUndefined(query)) {
                if (_.isString(query)) {
                    query = query.trim().toLowerCase();
                    var options = {
                        url: "/domains/" + query + "/is-mappable",
                        query: query,
                        proxy: true
                    };
                    return this.fetch(options);
                } else {
                    deferred.reject("Unable to retrieve domain name mappability because of invalid query parameter");
                }
            } else {
                deferred.reject("Unable to retrieve domain name mappability because of missing query parameter");
            }
            return deferred;
        },
        parse: function(response, options) {
            var model = {
                domainName: options.query
            };
            model.isMappable = response.is_mappable;
            if (model.isMappable) {
                model.cost = response.cost;
            }
            return model;
        }
    });
});

define("DomainMappingView", [ "DomainBaseView", "DomainMappability", "templateFactory" ], function(DomainBaseView, DomainMappability, templateFactory) {
    return DomainBaseView.extend({
        el: "#domain-mapping",
        template: templateFactory.fetch("domain-mapping-searching"),
        initialize: function() {
            DomainBaseView.prototype.initialize.apply(this, arguments);
            this.model = new DomainMappability();
            this.listenTo(this.model, "sync", this.renderResults);
            this.listenTo(this.model, "error", this.renderError);
            this.initialized();
        },
        renderError: function(model, response, options) {
            var templateName;
            if (response.error) {
                var formattedErrorCode = response.error.replace("_", "-");
                templateName = "domain-mapping-result-error-" + formattedErrorCode;
            } else {
                templateName = "domain-mapping-result-error-invalid-domain";
            }
            this.$results.html(templateFactory.fetch(templateName, {
                domainName: options.query
            }));
            this.loaded();
        },
        renderResults: function() {
            var isMappable = this.model.get("isMappable");
            var templateName;
            if (isMappable) {
                templateName = "domain-mapping-result-mappable";
                this.playDownSearch();
            } else {
                templateName = "domain-mapping-result-unmappable";
                this.highlightSearch();
            }
            this.$results.html(templateFactory.fetch(templateName, this.model.toJSON()));
            this.loaded();
        },
        selectDomain: function(event) {
            event.preventDefault();
            this.goTo("map", this.model.get("domainName"));
        },
        unload: function() {
            this.remove();
        }
    });
});

define("domain-mapping", [ "DomainMappingView" ], function(DomainMappingView) {
    return {
        init: function() {
            if (!this.domainMappingView) {
                this.domainMappingView = new DomainMappingView();
            }
        },
        unload: function() {
            if (this.domainMappingView) {
                this.domainMappingView.unload();
                this.domainMappingView = null;
            }
        }
    };
});

define("DomainMappingBlogSelectionView", [ "DomainBlogSelectionBaseView", "templateFactory" ], function(DomainBlogSelectionBaseView, templateFactory) {
    return DomainBlogSelectionBaseView.extend({
        template: templateFactory.fetch("domain-mapping-blog-selection")
    });
});

define("domain-mapping-blog-selection", [ "DomainMappingBlogSelectionView" ], function(DomainMappingBlogSelectionView) {
    return {
        init: function(options) {
            if (!this.domainMappingBlogSelectionView) {
                this.domainMappingBlogSelectionView = new DomainMappingBlogSelectionView(options);
            }
        },
        unload: function() {
            if (this.domainMappingBlogSelectionView) {
                this.domainMappingBlogSelectionView.unload();
                this.domainMappingBlogSelectionView = null;
            }
        }
    };
});
//# sourceMappingURL=all.js.map;
jQuery( function ( $ ) {
	/**
	 * Handle the execution of Web intents.
	 *
	 * WordPress.com is registered for several intents via the Chrome
	 * Web app. All intents currently point to URLs of the form
	 * http://wordpress.com/#!/intent/[type]/  It is important to only
	 * handle intents on these URLs because the intent data is persistent
	 * until intent.postResult() is called, but we don't always want
	 * to call postResult(), because it will close our window and return
	 * the user to the site that triggered the intent (which is still open
	 * in another tab).
	 *
	 * @see http://webintents.org/
	 */

	var wpcom_intents = {
		intent : null,

		init : function () {
			if ( ! document.location.hash.match( /^#!\/intent\// ) )
				return;

			this.intent = window.intent || window.webkitIntent;

			if ( ! this.intent ) {
				document.location.href = '/';
				return;
			}

			if ( this.intent.action in this.handlers ) {
				new Image().src = document.location.protocol + '//pixel.wp.com/g.gif?v=wpcom-no-pv&x_web-intents=' + encodeURIComponent( this.intent.action ) + '&baba='+Math.random();

				if ( ! this.handlers[this.intent.action]( this.intent ) ) {
					document.location.href = '/';
					return;
				};
			}
		},

		handlers : {
			'http://webintents.org/view' : function ( intent ) {
				// 'view' is supposed to be for things like viewing non-Webby
				// files via a Web service, but Chrome decided to use 'view'
				// as the intent that gets called when a user visits an RSS
				// feed in the browser. We treat it like 'subscribe'.
				return this['http://webintents.org/subscribe']( intent );
			},
			'http://webintents.org/subscribe' : function ( intent ) {
				var url = intent.getExtra( 'url' );

				if ( ! url )
					url = intent.data;

				if ( ! url )
					return false;

				var follow_nonce = $( 'input#subs' ).val();

				$.get( '/wp-admin/admin-ajax.php?action=subscribe_to_blog&blog_url=' + encodeURIComponent( url ) + '&_wpnonce=' + encodeURIComponent( follow_nonce ), function ( data ) {
					if ( data.indexOf( '-1' ) == 0 ) {
						// Error.
						alert( data.substr( 2 ) );
					}

					document.location.href = '/following/edit/';
				} );

				return true;
			},
			'http://webintents.org/share' : function ( intent ) {
				new Image().src = document.location.protocol + '//pixel.wp.com/g.gif?v=wpcom-no-pv&x_web-intent-share-types=' + encodeURIComponent( intent.type ) + '&baba='+Math.random();

				wpcom.addAction( 'ipt_published_post_rendered.intents', function () {
					// We should return the URL of the published post.
					// Note that this call will close our window.
					intent.postResult( true );
				} );

				wpcom.addAction( 'aside_box_loaded.intents', function () {
					if ( 'text/uri-list' == intent.type ) {
						// Post a Link
						$( '#ipt-link-url input' ).val( intent.data );
						instapost.post_format_select( $( '#ipt-form-format-link' ) );
					}
					else if ( intent.type.match( /^image\// ) ) {
						// Post a Photo
						$( '#ipt-image-url' ).val( intent.data );
						instapost.post_format_select( $( '#ipt-form-format-image' ) );
						instapost.switch_upload_type( $( '#ipt-upload-image-via-file .ipt-switch-upload-zone' ) );
					}
					else if ( intent.type.match( /^video\// ) ) {
						// Post a Video
						$( '#ipt-video-url' ).val( intent.data );
						instapost.post_format_select( $( '#ipt-form-format-video' ) );
					}
					else if ( intent.type.match( /^text\// ) ) {
						// Write a Post
						tinymce.get( 'ipteditor' ).execCommand( 'mceInsertContent', false, intent.data );
					}
				} );

				document.location.href = '/post/';

				return true;
			}
		}
	};

	wpcom_intents.init();
} );
;
(function($) {

	function slugifyTag ( tag ) {
		return $.trim( tag.toLowerCase() );
	}

	function clearFilters() {
		$('.blogs.filters-active').removeClass('filters-active').children().removeClass('filter-show');
		$('.blog-user-tags-index').removeClass('filters-active').find('a.filter-active').removeClass('filter-active');
	}

	function addFilter( slug ) {
		$('.tag-filters a[data-slug="' + slug + '"]').addClass('filter-active');
		applyFilters();
	}

	function removeFilter( slug ) {
		$('.tag-filters a[data-slug="' + slug + '"]').removeClass('filter-active');
		applyFilters();
	}

	function applyFilters() {
		var filters = [];
		$('.tag-filters a.filter-active').each(function(){
			filters.push( $(this).attr('data-slug') );
		});

		if( filters.length ) {
			$('.blogs').addClass('filters-active');
			$('.blog-user-tags-index').addClass('filters-active');
			$('.blogs li[data-id]').each(function(){
				var show = true,
				    el = $(this);
				$.each(filters, function( index, slug ) {
					if( ! el.find('a[data-slug="' + slug + '"]').length ) {
						show = false;
					}
				});
				if( show ) {
					el.addClass('filter-show');
				} else {
					el.removeClass('filter-show');
				}
			});
		} else {
			clearFilters();
		}
	}

	function addUserTagForSite ( siteId, tag ) {
		var slug = slugifyTag( tag );

		$.getJSON( ajaxurl, {
			action: 'add_user_tag_for_site',
			blog_id: siteId,
			tag: tag
		}, function ( data ) {
			// @todo: Use the returned data topopulate the new items
		} );
		$('ul.blogs > li[data-id="' + siteId + '"]').find('.blog-usertags ul')
			.append('<li><a href="#" data-slug="' + slug + '">' + tag + '</a> <a href="#" class="del noticon noticon-close"><span class="screen-reader-text">' + My_Blogs_Options.labels.lbl_delete + '</span></a></li>');
		$('.new-usertag').focus();

		if( ! $('#all-user-blog-tags option[value="' + tag + '"]').size() ) {
			$('#all-user-blog-tags').append('<option value="' + tag + '">');
			allUserBlogTags[ slug ] = tag;
			$('.blog-user-tags-index .tag-filters').append( '<li><a href="#" data-slug="' + slug + '">' + tag + '</a></li>' );
			// @todo: Sort the elements after the new one is inserted to keep them in alphabetical order.
			$('.blog-user-tags-index.empty').removeClass('empty');
		}

		$('ul.blogs > li[data-id="' + siteId + '"]').trigger( 'blogUserTags.modify' );
	}

	function deleteUserTagForSite ( siteId, slug ) {
		// Remember, this is the normalized slug, not the tag!
		// The tag itself could be modified client-side by things like Google Translate.
		$.getJSON( ajaxurl, {
			action: 'delete_user_tag_for_site',
			blog_id: siteId,
			tag: slug
		}, function ( data ) {
			// @todo: Use the returned data to populate the items.
		} );
		$('ul.blogs > li[data-id="' + siteId + '"] a[data-slug="' + slug + '"]').closest('li').remove();

		if( ! $('.blogs a[data-slug="' + slug + '"]').size() ) {
			$('.blog-user-tags-index .tag-filters a[data-slug="' + slug + '"]').closest('li').remove();
			// We're not removing them from the JS array or the datalist, in case the user wants to add them back.
		}
		applyFilters();

		$('ul.blogs > li[data-id="' + siteId + '"]').trigger( 'blogUserTags.modify' );
	}

	$('#tab-content').on('submit', 'form.add-tag-form', function (e) {
		e.preventDefault();
		var newUserTagInput = $(this).children('.new-usertag'),
			siteElement = $(this).closest('li[data-id]');

		newUserTagInput.removeClass('duplicate');
		// If it's either empty or duplicate, reject it.
		if ( ! newUserTagInput.val().length || siteElement.find('li a[data-slug="' + slugifyTag( newUserTagInput.val() ) + '"]').size() ) {
			newUserTagInput.addClass('duplicate')[0].setSelectionRange( 0, newUserTagInput.val().length );
			return;
		}
		// Otherwise, add it!
		// addUserTagForSite will both add the element and call the AJAX.
		addUserTagForSite( siteElement.attr('data-id'), newUserTagInput.val() );
		// Thank you sir, may I have another!
		newUserTagInput.val('').focus();
	});

	$('#tab-content').on('click', '.blog-usertags ul .del', function (e) {
		e.preventDefault();
		var siteId = $(this).closest('li[data-id]').attr('data-id'),
			slug = $(this).siblings('a[data-slug]').attr('data-slug');
		// deleteUserTagForSite will both remove the element and call the AJAX.
		deleteUserTagForSite( siteId, slug );
	});

	$('#tab-content').on('click', '.add-tag-link', function (e) {
		e.preventDefault();
		$(this).closest('li[data-id]').addClass('show-form');
		$(this).siblings('.add-tag-form').children('.new-usertag').focus();
	});

	$('#tab-content').on('click', '.tag-filters a[data-slug], .blog-usertags a[data-slug]', function(e) {
		e.preventDefault();
		var slug = $(this).attr('data-slug');
		if( $('.tag-filters a[data-slug="' + slug + '"]').hasClass('filter-active') ) {
			removeFilter( slug );
		} else {
			addFilter( slug );
		}
	});

	$('#tab-content').on('click', '.blog-user-tags-index .clear-all-filters', function(e) {
		e.preventDefault();
		clearFilters();
		applyFilters();
	});

})(jQuery);
;
// WARNING: This file is distributed verbatim in Jetpack. @hide-in-jetpack
/*!
 * jQuery Cycle Plugin (with Transition Definitions)
 * Examples and documentation at: http://jquery.malsup.com/cycle/
 * Copyright (c) 2007-2010 M. Alsup
 * Version: 2.9999.8 (26-OCT-2012)
 * Dual licensed under the MIT and GPL licenses.
 * http://jquery.malsup.com/license.html
 * Requires: jQuery v1.3.2 or later
 */
;(function($, undefined) {
"use strict";

var ver = '2.9999.8';

// if $.support is not defined (pre jQuery 1.3) add what I need
if ($.support === undefined) {
	$.support = {
		opacity: !($.browser.msie)
	};
}

function debug(s) {
	if ($.fn.cycle.debug)
		log(s);
}
function log() {
	if (window.console && console.log)
		console.log('[cycle] ' + Array.prototype.join.call(arguments,' '));
}
$.expr[':'].paused = function(el) {
	return el.cyclePause;
};


// the options arg can be...
//   a number  - indicates an immediate transition should occur to the given slide index
//   a string  - 'pause', 'resume', 'toggle', 'next', 'prev', 'stop', 'destroy' or the name of a transition effect (ie, 'fade', 'zoom', etc)
//   an object - properties to control the slideshow
//
// the arg2 arg can be...
//   the name of an fx (only used in conjunction with a numeric value for 'options')
//   the value true (only used in first arg == 'resume') and indicates
//	 that the resume should occur immediately (not wait for next timeout)

$.fn.cycle = function(options, arg2) {
	var o = { s: this.selector, c: this.context };

	// in 1.3+ we can fix mistakes with the ready state
	if (this.length === 0 && options != 'stop') {
		if (!$.isReady && o.s) {
			log('DOM not ready, queuing slideshow');
			$(function() {
				$(o.s,o.c).cycle(options,arg2);
			});
			return this;
		}
		// is your DOM ready?  http://docs.jquery.com/Tutorials:Introducing_$(document).ready()
		log('terminating; zero elements found by selector' + ($.isReady ? '' : ' (DOM not ready)'));
		return this;
	}

	// iterate the matched nodeset
	return this.each(function() {
		var opts = handleArguments(this, options, arg2);
		if (opts === false)
			return;

		opts.updateActivePagerLink = opts.updateActivePagerLink || $.fn.cycle.updateActivePagerLink;

		// stop existing slideshow for this container (if there is one)
		if (this.cycleTimeout)
			clearTimeout(this.cycleTimeout);
		this.cycleTimeout = this.cyclePause = 0;
		this.cycleStop = 0; // issue #108

		var $cont = $(this);
		var $slides = opts.slideExpr ? $(opts.slideExpr, this) : $cont.children();
		var els = $slides.get();

		if (els.length < 2) {
			log('terminating; too few slides: ' + els.length);
			return;
		}

		var opts2 = buildOptions($cont, $slides, els, opts, o);
		if (opts2 === false)
			return;

		var startTime = opts2.continuous ? 10 : getTimeout(els[opts2.currSlide], els[opts2.nextSlide], opts2, !opts2.backwards);

		// if it's an auto slideshow, kick it off
		if (startTime) {
			startTime += (opts2.delay || 0);
			if (startTime < 10)
				startTime = 10;
			debug('first timeout: ' + startTime);
			this.cycleTimeout = setTimeout(function(){go(els,opts2,0,!opts.backwards);}, startTime);
		}
	});
};

function triggerPause(cont, byHover, onPager) {
	var opts = $(cont).data('cycle.opts');
	if (!opts)
		return;
	var paused = !!cont.cyclePause;
	if (paused && opts.paused)
		opts.paused(cont, opts, byHover, onPager);
	else if (!paused && opts.resumed)
		opts.resumed(cont, opts, byHover, onPager);
}

// process the args that were passed to the plugin fn
function handleArguments(cont, options, arg2) {
	if (cont.cycleStop === undefined)
		cont.cycleStop = 0;
	if (options === undefined || options === null)
		options = {};
	if (options.constructor == String) {
		switch(options) {
		case 'destroy':
		case 'stop':
			var opts = $(cont).data('cycle.opts');
			if (!opts)
				return false;
			cont.cycleStop++; // callbacks look for change
			if (cont.cycleTimeout)
				clearTimeout(cont.cycleTimeout);
			cont.cycleTimeout = 0;
			if (opts.elements)
				$(opts.elements).stop();
			$(cont).removeData('cycle.opts');
			if (options == 'destroy')
				destroy(cont, opts);
			return false;
		case 'toggle':
			cont.cyclePause = (cont.cyclePause === 1) ? 0 : 1;
			checkInstantResume(cont.cyclePause, arg2, cont);
			triggerPause(cont);
			return false;
		case 'pause':
			cont.cyclePause = 1;
			triggerPause(cont);
			return false;
		case 'resume':
			cont.cyclePause = 0;
			checkInstantResume(false, arg2, cont);
			triggerPause(cont);
			return false;
		case 'prev':
		case 'next':
			opts = $(cont).data('cycle.opts');
			if (!opts) {
				log('options not found, "prev/next" ignored');
				return false;
			}
			$.fn.cycle[options](opts);
			return false;
		default:
			options = { fx: options };
		}
		return options;
	}
	else if (options.constructor == Number) {
		// go to the requested slide
		var num = options;
		options = $(cont).data('cycle.opts');
		if (!options) {
			log('options not found, can not advance slide');
			return false;
		}
		if (num < 0 || num >= options.elements.length) {
			log('invalid slide index: ' + num);
			return false;
		}
		options.nextSlide = num;
		if (cont.cycleTimeout) {
			clearTimeout(cont.cycleTimeout);
			cont.cycleTimeout = 0;
		}
		if (typeof arg2 == 'string')
			options.oneTimeFx = arg2;
		go(options.elements, options, 1, num >= options.currSlide);
		return false;
	}
	return options;

	function checkInstantResume(isPaused, arg2, cont) {
		if (!isPaused && arg2 === true) { // resume now!
			var options = $(cont).data('cycle.opts');
			if (!options) {
				log('options not found, can not resume');
				return false;
			}
			if (cont.cycleTimeout) {
				clearTimeout(cont.cycleTimeout);
				cont.cycleTimeout = 0;
			}
			go(options.elements, options, 1, !options.backwards);
		}
	}
}

function removeFilter(el, opts) {
	if (!$.support.opacity && opts.cleartype && el.style.filter) {
		try { el.style.removeAttribute('filter'); }
		catch(smother) {} // handle old opera versions
	}
}

// unbind event handlers
function destroy(cont, opts) {
	if (opts.next)
		$(opts.next).unbind(opts.prevNextEvent);
	if (opts.prev)
		$(opts.prev).unbind(opts.prevNextEvent);

	if (opts.pager || opts.pagerAnchorBuilder)
		$.each(opts.pagerAnchors || [], function() {
			this.unbind().remove();
		});
	opts.pagerAnchors = null;
	$(cont).unbind('mouseenter.cycle mouseleave.cycle');
	if (opts.destroy) // callback
		opts.destroy(opts);
}

// one-time initialization
function buildOptions($cont, $slides, els, options, o) {
	var startingSlideSpecified;
	// support metadata plugin (v1.0 and v2.0)
	var opts = $.extend({}, $.fn.cycle.defaults, options || {}, $.metadata ? $cont.metadata() : $.meta ? $cont.data() : {});
	var meta = $.isFunction($cont.data) ? $cont.data(opts.metaAttr) : null;
	if (meta)
		opts = $.extend(opts, meta);
	if (opts.autostop)
		opts.countdown = opts.autostopCount || els.length;

	var cont = $cont[0];
	$cont.data('cycle.opts', opts);
	opts.$cont = $cont;
	opts.stopCount = cont.cycleStop;
	opts.elements = els;
	opts.before = opts.before ? [opts.before] : [];
	opts.after = opts.after ? [opts.after] : [];

	// push some after callbacks
	if (!$.support.opacity && opts.cleartype)
		opts.after.push(function() { removeFilter(this, opts); });
	if (opts.continuous)
		opts.after.push(function() { go(els,opts,0,!opts.backwards); });

	saveOriginalOpts(opts);

	// clearType corrections
	if (!$.support.opacity && opts.cleartype && !opts.cleartypeNoBg)
		clearTypeFix($slides);

	// container requires non-static position so that slides can be position within
	if ($cont.css('position') == 'static')
		$cont.css('position', 'relative');
	if (opts.width)
		$cont.width(opts.width);
	if (opts.height && opts.height != 'auto')
		$cont.height(opts.height);

	if (opts.startingSlide !== undefined) {
		opts.startingSlide = parseInt(opts.startingSlide,10);
		if (opts.startingSlide >= els.length || opts.startSlide < 0)
			opts.startingSlide = 0; // catch bogus input
		else
			startingSlideSpecified = true;
	}
	else if (opts.backwards)
		opts.startingSlide = els.length - 1;
	else
		opts.startingSlide = 0;

	// if random, mix up the slide array
	if (opts.random) {
		opts.randomMap = [];
		for (var i = 0; i < els.length; i++)
			opts.randomMap.push(i);
		opts.randomMap.sort(function(a,b) {return Math.random() - 0.5;});
		if (startingSlideSpecified) {
			// try to find the specified starting slide and if found set start slide index in the map accordingly
			for ( var cnt = 0; cnt < els.length; cnt++ ) {
				if ( opts.startingSlide == opts.randomMap[cnt] ) {
					opts.randomIndex = cnt;
				}
			}
		}
		else {
			opts.randomIndex = 1;
			opts.startingSlide = opts.randomMap[1];
		}
	}
	else if (opts.startingSlide >= els.length)
		opts.startingSlide = 0; // catch bogus input
	opts.currSlide = opts.startingSlide || 0;
	var first = opts.startingSlide;

	// set position and zIndex on all the slides
	$slides.css({position: 'absolute', top:0, left:0}).hide().each(function(i) {
		var z;
		if (opts.backwards)
			z = first ? i <= first ? els.length + (i-first) : first-i : els.length-i;
		else
			z = first ? i >= first ? els.length - (i-first) : first-i : els.length-i;
		$(this).css('z-index', z);
	});

	// make sure first slide is visible
	$(els[first]).css('opacity',1).show(); // opacity bit needed to handle restart use case
	removeFilter(els[first], opts);

	// stretch slides
	if (opts.fit) {
		if (!opts.aspect) {
	        if (opts.width)
	            $slides.width(opts.width);
	        if (opts.height && opts.height != 'auto')
	            $slides.height(opts.height);
		} else {
			$slides.each(function(){
				var $slide = $(this);
				var ratio = (opts.aspect === true) ? $slide.width()/$slide.height() : opts.aspect;
				if( opts.width && $slide.width() != opts.width ) {
					$slide.width( opts.width );
					$slide.height( opts.width / ratio );
				}

				if( opts.height && $slide.height() < opts.height ) {
					$slide.height( opts.height );
					$slide.width( opts.height * ratio );
				}
			});
		}
	}

	if (opts.center && ((!opts.fit) || opts.aspect)) {
		$slides.each(function(){
			var $slide = $(this);
			$slide.css({
				"margin-left": opts.width ?
					((opts.width - $slide.width()) / 2) + "px" :
					0,
				"margin-top": opts.height ?
					((opts.height - $slide.height()) / 2) + "px" :
					0
			});
		});
	}

	if (opts.center && !opts.fit && !opts.slideResize) {
		$slides.each(function(){
			var $slide = $(this);
			$slide.css({
				"margin-left": opts.width ? ((opts.width - $slide.width()) / 2) + "px" : 0,
				"margin-top": opts.height ? ((opts.height - $slide.height()) / 2) + "px" : 0
			});
		});
	}

	// stretch container
	var reshape = (opts.containerResize || opts.containerResizeHeight) && !$cont.innerHeight();
	if (reshape) { // do this only if container has no size http://tinyurl.com/da2oa9
		var maxw = 0, maxh = 0;
		for(var j=0; j < els.length; j++) {
			var $e = $(els[j]), e = $e[0], w = $e.outerWidth(), h = $e.outerHeight();
			if (!w) w = e.offsetWidth || e.width || $e.attr('width');
			if (!h) h = e.offsetHeight || e.height || $e.attr('height');
			maxw = w > maxw ? w : maxw;
			maxh = h > maxh ? h : maxh;
		}
		if (opts.containerResize && maxw > 0 && maxh > 0)
			$cont.css({width:maxw+'px',height:maxh+'px'});
		if (opts.containerResizeHeight && maxh > 0)
			$cont.css({height:maxh+'px'});
	}

	var pauseFlag = false;  // https://github.com/malsup/cycle/issues/44
	if (opts.pause)
		$cont.bind('mouseenter.cycle', function(){
			pauseFlag = true;
			this.cyclePause++;
			triggerPause(cont, true);
		}).bind('mouseleave.cycle', function(){
				if (pauseFlag)
					this.cyclePause--;
				triggerPause(cont, true);
		});

	if (supportMultiTransitions(opts) === false)
		return false;

	// apparently a lot of people use image slideshows without height/width attributes on the images.
	// Cycle 2.50+ requires the sizing info for every slide; this block tries to deal with that.
	var requeue = false;
	options.requeueAttempts = options.requeueAttempts || 0;
	$slides.each(function() {
		// try to get height/width of each slide
		var $el = $(this);
		this.cycleH = (opts.fit && opts.height) ? opts.height : ($el.height() || this.offsetHeight || this.height || $el.attr('height') || 0);
		this.cycleW = (opts.fit && opts.width) ? opts.width : ($el.width() || this.offsetWidth || this.width || $el.attr('width') || 0);

		if ( $el.is('img') ) {
			// sigh..  sniffing, hacking, shrugging...  this crappy hack tries to account for what browsers do when
			// an image is being downloaded and the markup did not include sizing info (height/width attributes);
			// there seems to be some "default" sizes used in this situation
			var loadingIE	= ($.browser.msie  && this.cycleW == 28 && this.cycleH == 30 && !this.complete);
			var loadingFF	= ($.browser.mozilla && this.cycleW == 34 && this.cycleH == 19 && !this.complete);
			var loadingOp	= ($.browser.opera && ((this.cycleW == 42 && this.cycleH == 19) || (this.cycleW == 37 && this.cycleH == 17)) && !this.complete);
			var loadingOther = (this.cycleH === 0 && this.cycleW === 0 && !this.complete);
			// don't requeue for images that are still loading but have a valid size
			if (loadingIE || loadingFF || loadingOp || loadingOther) {
				if (o.s && opts.requeueOnImageNotLoaded && ++options.requeueAttempts < 100) { // track retry count so we don't loop forever
					log(options.requeueAttempts,' - img slide not loaded, requeuing slideshow: ', this.src, this.cycleW, this.cycleH);
					setTimeout(function() {$(o.s,o.c).cycle(options);}, opts.requeueTimeout);
					requeue = true;
					return false; // break each loop
				}
				else {
					log('could not determine size of image: '+this.src, this.cycleW, this.cycleH);
				}
			}
		}
		return true;
	});

	if (requeue)
		return false;

	opts.cssBefore = opts.cssBefore || {};
	opts.cssAfter = opts.cssAfter || {};
	opts.cssFirst = opts.cssFirst || {};
	opts.animIn = opts.animIn || {};
	opts.animOut = opts.animOut || {};

	$slides.not(':eq('+first+')').css(opts.cssBefore);
	$($slides[first]).css(opts.cssFirst);

	if (opts.timeout) {
		opts.timeout = parseInt(opts.timeout,10);
		// ensure that timeout and speed settings are sane
		if (opts.speed.constructor == String)
			opts.speed = $.fx.speeds[opts.speed] || parseInt(opts.speed,10);
		if (!opts.sync)
			opts.speed = opts.speed / 2;

		var buffer = opts.fx == 'none' ? 0 : opts.fx == 'shuffle' ? 500 : 250;
		while((opts.timeout - opts.speed) < buffer) // sanitize timeout
			opts.timeout += opts.speed;
	}
	if (opts.easing)
		opts.easeIn = opts.easeOut = opts.easing;
	if (!opts.speedIn)
		opts.speedIn = opts.speed;
	if (!opts.speedOut)
		opts.speedOut = opts.speed;

	opts.slideCount = els.length;
	opts.currSlide = opts.lastSlide = first;
	if (opts.random) {
		if (++opts.randomIndex == els.length)
			opts.randomIndex = 0;
		opts.nextSlide = opts.randomMap[opts.randomIndex];
	}
	else if (opts.backwards)
		opts.nextSlide = opts.startingSlide === 0 ? (els.length-1) : opts.startingSlide-1;
	else
		opts.nextSlide = opts.startingSlide >= (els.length-1) ? 0 : opts.startingSlide+1;

	// run transition init fn
	if (!opts.multiFx) {
		var init = $.fn.cycle.transitions[opts.fx];
		if ($.isFunction(init))
			init($cont, $slides, opts);
		else if (opts.fx != 'custom' && !opts.multiFx) {
			log('unknown transition: ' + opts.fx,'; slideshow terminating');
			return false;
		}
	}

	// fire artificial events
	var e0 = $slides[first];
	if (!opts.skipInitializationCallbacks) {
		if (opts.before.length)
			opts.before[0].apply(e0, [e0, e0, opts, true]);
		if (opts.after.length)
			opts.after[0].apply(e0, [e0, e0, opts, true]);
	}
	if (opts.next)
		$(opts.next).bind(opts.prevNextEvent,function(){return advance(opts,1);});
	if (opts.prev)
		$(opts.prev).bind(opts.prevNextEvent,function(){return advance(opts,0);});
	if (opts.pager || opts.pagerAnchorBuilder)
		buildPager(els,opts);

	exposeAddSlide(opts, els);

	return opts;
}

// save off original opts so we can restore after clearing state
function saveOriginalOpts(opts) {
	opts.original = { before: [], after: [] };
	opts.original.cssBefore = $.extend({}, opts.cssBefore);
	opts.original.cssAfter  = $.extend({}, opts.cssAfter);
	opts.original.animIn	= $.extend({}, opts.animIn);
	opts.original.animOut   = $.extend({}, opts.animOut);
	$.each(opts.before, function() { opts.original.before.push(this); });
	$.each(opts.after,  function() { opts.original.after.push(this); });
}

function supportMultiTransitions(opts) {
	var i, tx, txs = $.fn.cycle.transitions;
	// look for multiple effects
	if (opts.fx.indexOf(',') > 0) {
		opts.multiFx = true;
		opts.fxs = opts.fx.replace(/\s*/g,'').split(',');
		// discard any bogus effect names
		for (i=0; i < opts.fxs.length; i++) {
			var fx = opts.fxs[i];
			tx = txs[fx];
			if (!tx || !txs.hasOwnProperty(fx) || !$.isFunction(tx)) {
				log('discarding unknown transition: ',fx);
				opts.fxs.splice(i,1);
				i--;
			}
		}
		// if we have an empty list then we threw everything away!
		if (!opts.fxs.length) {
			log('No valid transitions named; slideshow terminating.');
			return false;
		}
	}
	else if (opts.fx == 'all') {  // auto-gen the list of transitions
		opts.multiFx = true;
		opts.fxs = [];
		for (var p in txs) {
			if (txs.hasOwnProperty(p)) {
				tx = txs[p];
				if (txs.hasOwnProperty(p) && $.isFunction(tx))
					opts.fxs.push(p);
			}
		}
	}
	if (opts.multiFx && opts.randomizeEffects) {
		// munge the fxs array to make effect selection random
		var r1 = Math.floor(Math.random() * 20) + 30;
		for (i = 0; i < r1; i++) {
			var r2 = Math.floor(Math.random() * opts.fxs.length);
			opts.fxs.push(opts.fxs.splice(r2,1)[0]);
		}
		debug('randomized fx sequence: ',opts.fxs);
	}
	return true;
}

// provide a mechanism for adding slides after the slideshow has started
function exposeAddSlide(opts, els) {
	opts.addSlide = function(newSlide, prepend) {
		var $s = $(newSlide), s = $s[0];
		if (!opts.autostopCount)
			opts.countdown++;
		els[prepend?'unshift':'push'](s);
		if (opts.els)
			opts.els[prepend?'unshift':'push'](s); // shuffle needs this
		opts.slideCount = els.length;

		// add the slide to the random map and resort
		if (opts.random) {
			opts.randomMap.push(opts.slideCount-1);
			opts.randomMap.sort(function(a,b) {return Math.random() - 0.5;});
		}

		$s.css('position','absolute');
		$s[prepend?'prependTo':'appendTo'](opts.$cont);

		if (prepend) {
			opts.currSlide++;
			opts.nextSlide++;
		}

		if (!$.support.opacity && opts.cleartype && !opts.cleartypeNoBg)
			clearTypeFix($s);

		if (opts.fit && opts.width)
			$s.width(opts.width);
		if (opts.fit && opts.height && opts.height != 'auto')
			$s.height(opts.height);
		s.cycleH = (opts.fit && opts.height) ? opts.height : $s.height();
		s.cycleW = (opts.fit && opts.width) ? opts.width : $s.width();

		$s.css(opts.cssBefore);

		if (opts.pager || opts.pagerAnchorBuilder)
			$.fn.cycle.createPagerAnchor(els.length-1, s, $(opts.pager), els, opts);

		if ($.isFunction(opts.onAddSlide))
			opts.onAddSlide($s);
		else
			$s.hide(); // default behavior
	};
}

// reset internal state; we do this on every pass in order to support multiple effects
$.fn.cycle.resetState = function(opts, fx) {
	fx = fx || opts.fx;
	opts.before = []; opts.after = [];
	opts.cssBefore = $.extend({}, opts.original.cssBefore);
	opts.cssAfter  = $.extend({}, opts.original.cssAfter);
	opts.animIn	= $.extend({}, opts.original.animIn);
	opts.animOut   = $.extend({}, opts.original.animOut);
	opts.fxFn = null;
	$.each(opts.original.before, function() { opts.before.push(this); });
	$.each(opts.original.after,  function() { opts.after.push(this); });

	// re-init
	var init = $.fn.cycle.transitions[fx];
	if ($.isFunction(init))
		init(opts.$cont, $(opts.elements), opts);
};

// this is the main engine fn, it handles the timeouts, callbacks and slide index mgmt
function go(els, opts, manual, fwd) {
	var p = opts.$cont[0], curr = els[opts.currSlide], next = els[opts.nextSlide];

	// opts.busy is true if we're in the middle of an animation
	if (manual && opts.busy && opts.manualTrump) {
		// let manual transitions requests trump active ones
		debug('manualTrump in go(), stopping active transition');
		$(els).stop(true,true);
		opts.busy = 0;
		clearTimeout(p.cycleTimeout);
	}

	// don't begin another timeout-based transition if there is one active
	if (opts.busy) {
		debug('transition active, ignoring new tx request');
		return;
	}


	// stop cycling if we have an outstanding stop request
	if (p.cycleStop != opts.stopCount || p.cycleTimeout === 0 && !manual)
		return;

	// check to see if we should stop cycling based on autostop options
	if (!manual && !p.cyclePause && !opts.bounce &&
		((opts.autostop && (--opts.countdown <= 0)) ||
		(opts.nowrap && !opts.random && opts.nextSlide < opts.currSlide))) {
		if (opts.end)
			opts.end(opts);
		return;
	}

	// if slideshow is paused, only transition on a manual trigger
	var changed = false;
	if ((manual || !p.cyclePause) && (opts.nextSlide != opts.currSlide)) {
		changed = true;
		var fx = opts.fx;
		// keep trying to get the slide size if we don't have it yet
		curr.cycleH = curr.cycleH || $(curr).height();
		curr.cycleW = curr.cycleW || $(curr).width();
		next.cycleH = next.cycleH || $(next).height();
		next.cycleW = next.cycleW || $(next).width();

		// support multiple transition types
		if (opts.multiFx) {
			if (fwd && (opts.lastFx === undefined || ++opts.lastFx >= opts.fxs.length))
				opts.lastFx = 0;
			else if (!fwd && (opts.lastFx === undefined || --opts.lastFx < 0))
				opts.lastFx = opts.fxs.length - 1;
			fx = opts.fxs[opts.lastFx];
		}

		// one-time fx overrides apply to:  $('div').cycle(3,'zoom');
		if (opts.oneTimeFx) {
			fx = opts.oneTimeFx;
			opts.oneTimeFx = null;
		}

		$.fn.cycle.resetState(opts, fx);

		// run the before callbacks
		if (opts.before.length)
			$.each(opts.before, function(i,o) {
				if (p.cycleStop != opts.stopCount) return;
				o.apply(next, [curr, next, opts, fwd]);
			});

		// stage the after callacks
		var after = function() {
			opts.busy = 0;
			$.each(opts.after, function(i,o) {
				if (p.cycleStop != opts.stopCount) return;
				o.apply(next, [curr, next, opts, fwd]);
			});
			if (!p.cycleStop) {
				// queue next transition
				queueNext();
			}
		};

		debug('tx firing('+fx+'); currSlide: ' + opts.currSlide + '; nextSlide: ' + opts.nextSlide);

		// get ready to perform the transition
		opts.busy = 1;
		if (opts.fxFn) // fx function provided?
			opts.fxFn(curr, next, opts, after, fwd, manual && opts.fastOnEvent);
		else if ($.isFunction($.fn.cycle[opts.fx])) // fx plugin ?
			$.fn.cycle[opts.fx](curr, next, opts, after, fwd, manual && opts.fastOnEvent);
		else
			$.fn.cycle.custom(curr, next, opts, after, fwd, manual && opts.fastOnEvent);
	}
	else {
		queueNext();
	}

	if (changed || opts.nextSlide == opts.currSlide) {
		// calculate the next slide
		var roll;
		opts.lastSlide = opts.currSlide;
		if (opts.random) {
			opts.currSlide = opts.nextSlide;
			if (++opts.randomIndex == els.length) {
				opts.randomIndex = 0;
				opts.randomMap.sort(function(a,b) {return Math.random() - 0.5;});
			}
			opts.nextSlide = opts.randomMap[opts.randomIndex];
			if (opts.nextSlide == opts.currSlide)
				opts.nextSlide = (opts.currSlide == opts.slideCount - 1) ? 0 : opts.currSlide + 1;
		}
		else if (opts.backwards) {
			roll = (opts.nextSlide - 1) < 0;
			if (roll && opts.bounce) {
				opts.backwards = !opts.backwards;
				opts.nextSlide = 1;
				opts.currSlide = 0;
			}
			else {
				opts.nextSlide = roll ? (els.length-1) : opts.nextSlide-1;
				opts.currSlide = roll ? 0 : opts.nextSlide+1;
			}
		}
		else { // sequence
			roll = (opts.nextSlide + 1) == els.length;
			if (roll && opts.bounce) {
				opts.backwards = !opts.backwards;
				opts.nextSlide = els.length-2;
				opts.currSlide = els.length-1;
			}
			else {
				opts.nextSlide = roll ? 0 : opts.nextSlide+1;
				opts.currSlide = roll ? els.length-1 : opts.nextSlide-1;
			}
		}
	}
	if (changed && opts.pager)
		opts.updateActivePagerLink(opts.pager, opts.currSlide, opts.activePagerClass);

	function queueNext() {
		// stage the next transition
		var ms = 0, timeout = opts.timeout;
		if (opts.timeout && !opts.continuous) {
			ms = getTimeout(els[opts.currSlide], els[opts.nextSlide], opts, fwd);
         if (opts.fx == 'shuffle')
            ms -= opts.speedOut;
      }
		else if (opts.continuous && p.cyclePause) // continuous shows work off an after callback, not this timer logic
			ms = 10;
		if (ms > 0)
			p.cycleTimeout = setTimeout(function(){ go(els, opts, 0, !opts.backwards); }, ms);
	}
}

// invoked after transition
$.fn.cycle.updateActivePagerLink = function(pager, currSlide, clsName) {
   $(pager).each(function() {
       $(this).children().removeClass(clsName).eq(currSlide).addClass(clsName);
   });
};

// calculate timeout value for current transition
function getTimeout(curr, next, opts, fwd) {
	if (opts.timeoutFn) {
		// call user provided calc fn
		var t = opts.timeoutFn.call(curr,curr,next,opts,fwd);
		while (opts.fx != 'none' && (t - opts.speed) < 250) // sanitize timeout
			t += opts.speed;
		debug('calculated timeout: ' + t + '; speed: ' + opts.speed);
		if (t !== false)
			return t;
	}
	return opts.timeout;
}

// expose next/prev function, caller must pass in state
$.fn.cycle.next = function(opts) { advance(opts,1); };
$.fn.cycle.prev = function(opts) { advance(opts,0);};

// advance slide forward or back
function advance(opts, moveForward) {
	var val = moveForward ? 1 : -1;
	var els = opts.elements;
	var p = opts.$cont[0], timeout = p.cycleTimeout;
	if (timeout) {
		clearTimeout(timeout);
		p.cycleTimeout = 0;
	}
	if (opts.random && val < 0) {
		// move back to the previously display slide
		opts.randomIndex--;
		if (--opts.randomIndex == -2)
			opts.randomIndex = els.length-2;
		else if (opts.randomIndex == -1)
			opts.randomIndex = els.length-1;
		opts.nextSlide = opts.randomMap[opts.randomIndex];
	}
	else if (opts.random) {
		opts.nextSlide = opts.randomMap[opts.randomIndex];
	}
	else {
		opts.nextSlide = opts.currSlide + val;
		if (opts.nextSlide < 0) {
			if (opts.nowrap) return false;
			opts.nextSlide = els.length - 1;
		}
		else if (opts.nextSlide >= els.length) {
			if (opts.nowrap) return false;
			opts.nextSlide = 0;
		}
	}

	var cb = opts.onPrevNextEvent || opts.prevNextClick; // prevNextClick is deprecated
	if ($.isFunction(cb))
		cb(val > 0, opts.nextSlide, els[opts.nextSlide]);
	go(els, opts, 1, moveForward);
	return false;
}

function buildPager(els, opts) {
	var $p = $(opts.pager);
	$.each(els, function(i,o) {
		$.fn.cycle.createPagerAnchor(i,o,$p,els,opts);
	});
	opts.updateActivePagerLink(opts.pager, opts.startingSlide, opts.activePagerClass);
}

$.fn.cycle.createPagerAnchor = function(i, el, $p, els, opts) {
	var a;
	if ($.isFunction(opts.pagerAnchorBuilder)) {
		a = opts.pagerAnchorBuilder(i,el);
		debug('pagerAnchorBuilder('+i+', el) returned: ' + a);
	}
	else
		a = '<a href="#">'+(i+1)+'</a>';

	if (!a)
		return;
	var $a = $(a);
	// don't reparent if anchor is in the dom
	if ($a.parents('body').length === 0) {
		var arr = [];
		if ($p.length > 1) {
			$p.each(function() {
				var $clone = $a.clone(true);
				$(this).append($clone);
				arr.push($clone[0]);
			});
			$a = $(arr);
		}
		else {
			$a.appendTo($p);
		}
	}

	opts.pagerAnchors =  opts.pagerAnchors || [];
	opts.pagerAnchors.push($a);

	var pagerFn = function(e) {
		e.preventDefault();
		opts.nextSlide = i;
		var p = opts.$cont[0], timeout = p.cycleTimeout;
		if (timeout) {
			clearTimeout(timeout);
			p.cycleTimeout = 0;
		}
		var cb = opts.onPagerEvent || opts.pagerClick; // pagerClick is deprecated
		if ($.isFunction(cb))
			cb(opts.nextSlide, els[opts.nextSlide]);
		go(els,opts,1,opts.currSlide < i); // trigger the trans
//		return false; // <== allow bubble
	};

	if ( /mouseenter|mouseover/i.test(opts.pagerEvent) ) {
		$a.hover(pagerFn, function(){/* no-op */} );
	}
	else {
		$a.bind(opts.pagerEvent, pagerFn);
	}

	if ( ! /^click/.test(opts.pagerEvent) && !opts.allowPagerClickBubble)
		$a.bind('click.cycle', function(){return false;}); // suppress click

	var cont = opts.$cont[0];
	var pauseFlag = false; // https://github.com/malsup/cycle/issues/44
	if (opts.pauseOnPagerHover) {
		$a.hover(
			function() {
				pauseFlag = true;
				cont.cyclePause++;
				triggerPause(cont,true,true);
			}, function() {
				if (pauseFlag)
					cont.cyclePause--;
				triggerPause(cont,true,true);
			}
		);
	}
};

// helper fn to calculate the number of slides between the current and the next
$.fn.cycle.hopsFromLast = function(opts, fwd) {
	var hops, l = opts.lastSlide, c = opts.currSlide;
	if (fwd)
		hops = c > l ? c - l : opts.slideCount - l;
	else
		hops = c < l ? l - c : l + opts.slideCount - c;
	return hops;
};

// fix clearType problems in ie6 by setting an explicit bg color
// (otherwise text slides look horrible during a fade transition)
function clearTypeFix($slides) {
	debug('applying clearType background-color hack');
	function hex(s) {
		s = parseInt(s,10).toString(16);
		return s.length < 2 ? '0'+s : s;
	}
	function getBg(e) {
		for ( ; e && e.nodeName.toLowerCase() != 'html'; e = e.parentNode) {
			var v = $.css(e,'background-color');
			if (v && v.indexOf('rgb') >= 0 ) {
				var rgb = v.match(/\d+/g);
				return '#'+ hex(rgb[0]) + hex(rgb[1]) + hex(rgb[2]);
			}
			if (v && v != 'transparent')
				return v;
		}
		return '#ffffff';
	}
	$slides.each(function() { $(this).css('background-color', getBg(this)); });
}

// reset common props before the next transition
$.fn.cycle.commonReset = function(curr,next,opts,w,h,rev) {
	$(opts.elements).not(curr).hide();
	if (typeof opts.cssBefore.opacity == 'undefined')
		opts.cssBefore.opacity = 1;
	opts.cssBefore.display = 'block';
	if (opts.slideResize && w !== false && next.cycleW > 0)
		opts.cssBefore.width = next.cycleW;
	if (opts.slideResize && h !== false && next.cycleH > 0)
		opts.cssBefore.height = next.cycleH;
	opts.cssAfter = opts.cssAfter || {};
	opts.cssAfter.display = 'none';
	$(curr).css('zIndex',opts.slideCount + (rev === true ? 1 : 0));
	$(next).css('zIndex',opts.slideCount + (rev === true ? 0 : 1));
};

// the actual fn for effecting a transition
$.fn.cycle.custom = function(curr, next, opts, cb, fwd, speedOverride) {
	var $l = $(curr), $n = $(next);
	var speedIn = opts.speedIn, speedOut = opts.speedOut, easeIn = opts.easeIn, easeOut = opts.easeOut;
	$n.css(opts.cssBefore);
	if (speedOverride) {
		if (typeof speedOverride == 'number')
			speedIn = speedOut = speedOverride;
		else
			speedIn = speedOut = 1;
		easeIn = easeOut = null;
	}
	var fn = function() {
		$n.animate(opts.animIn, speedIn, easeIn, function() {
			cb();
		});
	};
	$l.animate(opts.animOut, speedOut, easeOut, function() {
		$l.css(opts.cssAfter);
		if (!opts.sync)
			fn();
	});
	if (opts.sync) fn();
};

// transition definitions - only fade is defined here, transition pack defines the rest
$.fn.cycle.transitions = {
	fade: function($cont, $slides, opts) {
		$slides.not(':eq('+opts.currSlide+')').css('opacity',0);
		opts.before.push(function(curr,next,opts) {
			$.fn.cycle.commonReset(curr,next,opts);
			opts.cssBefore.opacity = 0;
		});
		opts.animIn	   = { opacity: 1 };
		opts.animOut   = { opacity: 0 };
		opts.cssBefore = { top: 0, left: 0 };
	}
};

$.fn.cycle.ver = function() { return ver; };

// override these globally if you like (they are all optional)
$.fn.cycle.defaults = {
    activePagerClass: 'activeSlide', // class name used for the active pager link
    after:            null,     // transition callback (scope set to element that was shown):  function(currSlideElement, nextSlideElement, options, forwardFlag)
    allowPagerClickBubble: false, // allows or prevents click event on pager anchors from bubbling
    animIn:           null,     // properties that define how the slide animates in
    animOut:          null,     // properties that define how the slide animates out
    aspect:           false,    // preserve aspect ratio during fit resizing, cropping if necessary (must be used with fit option)
    autostop:         0,        // true to end slideshow after X transitions (where X == slide count)
    autostopCount:    0,        // number of transitions (optionally used with autostop to define X)
    backwards:        false,    // true to start slideshow at last slide and move backwards through the stack
    before:           null,     // transition callback (scope set to element to be shown):     function(currSlideElement, nextSlideElement, options, forwardFlag)
    center:           null,     // set to true to have cycle add top/left margin to each slide (use with width and height options)
    cleartype:        !$.support.opacity,  // true if clearType corrections should be applied (for IE)
    cleartypeNoBg:    false,    // set to true to disable extra cleartype fixing (leave false to force background color setting on slides)
    containerResize:  1,        // resize container to fit largest slide
    containerResizeHeight:  0,  // resize containers height to fit the largest slide but leave the width dynamic
    continuous:       0,        // true to start next transition immediately after current one completes
    cssAfter:         null,     // properties that defined the state of the slide after transitioning out
    cssBefore:        null,     // properties that define the initial state of the slide before transitioning in
    delay:            0,        // additional delay (in ms) for first transition (hint: can be negative)
    easeIn:           null,     // easing for "in" transition
    easeOut:          null,     // easing for "out" transition
    easing:           null,     // easing method for both in and out transitions
    end:              null,     // callback invoked when the slideshow terminates (use with autostop or nowrap options): function(options)
    fastOnEvent:      0,        // force fast transitions when triggered manually (via pager or prev/next); value == time in ms
    fit:              0,        // force slides to fit container
    fx:               'fade',   // name of transition effect (or comma separated names, ex: 'fade,scrollUp,shuffle')
    fxFn:             null,     // function used to control the transition: function(currSlideElement, nextSlideElement, options, afterCalback, forwardFlag)
    height:           'auto',   // container height (if the 'fit' option is true, the slides will be set to this height as well)
    manualTrump:      true,     // causes manual transition to stop an active transition instead of being ignored
    metaAttr:         'cycle',  // data- attribute that holds the option data for the slideshow
    next:             null,     // element, jQuery object, or jQuery selector string for the element to use as event trigger for next slide
    nowrap:           0,        // true to prevent slideshow from wrapping
    onPagerEvent:     null,     // callback fn for pager events: function(zeroBasedSlideIndex, slideElement)
    onPrevNextEvent:  null,     // callback fn for prev/next events: function(isNext, zeroBasedSlideIndex, slideElement)
    pager:            null,     // element, jQuery object, or jQuery selector string for the element to use as pager container
    pagerAnchorBuilder: null,   // callback fn for building anchor links:  function(index, DOMelement)
    pagerEvent:       'click.cycle', // name of event which drives the pager navigation
    pause:            0,        // true to enable "pause on hover"
    pauseOnPagerHover: 0,       // true to pause when hovering over pager link
    prev:             null,     // element, jQuery object, or jQuery selector string for the element to use as event trigger for previous slide
    prevNextEvent:    'click.cycle',// event which drives the manual transition to the previous or next slide
    random:           0,        // true for random, false for sequence (not applicable to shuffle fx)
    randomizeEffects: 1,        // valid when multiple effects are used; true to make the effect sequence random
    requeueOnImageNotLoaded: true, // requeue the slideshow if any image slides are not yet loaded
    requeueTimeout:   250,      // ms delay for requeue
    rev:              0,        // causes animations to transition in reverse (for effects that support it such as scrollHorz/scrollVert/shuffle)
    shuffle:          null,     // coords for shuffle animation, ex: { top:15, left: 200 }
    skipInitializationCallbacks: false, // set to true to disable the first before/after callback that occurs prior to any transition
    slideExpr:        null,     // expression for selecting slides (if something other than all children is required)
    slideResize:      1,        // force slide width/height to fixed size before every transition
    speed:            1000,     // speed of the transition (any valid fx speed value)
    speedIn:          null,     // speed of the 'in' transition
    speedOut:         null,     // speed of the 'out' transition
    startingSlide:    undefined,// zero-based index of the first slide to be displayed
    sync:             1,        // true if in/out transitions should occur simultaneously
    timeout:          4000,     // milliseconds between slide transitions (0 to disable auto advance)
    timeoutFn:        null,     // callback for determining per-slide timeout value:  function(currSlideElement, nextSlideElement, options, forwardFlag)
    updateActivePagerLink: null,// callback fn invoked to update the active pager link (adds/removes activePagerClass style)
    width:            null      // container width (if the 'fit' option is true, the slides will be set to this width as well)
};

})(jQuery);


/*!
 * jQuery Cycle Plugin Transition Definitions
 * This script is a plugin for the jQuery Cycle Plugin
 * Examples and documentation at: http://malsup.com/jquery/cycle/
 * Copyright (c) 2007-2010 M. Alsup
 * Version:	 2.73
 * Dual licensed under the MIT and GPL licenses:
 * http://www.opensource.org/licenses/mit-license.php
 * http://www.gnu.org/licenses/gpl.html
 */
(function($) {
"use strict";

//
// These functions define slide initialization and properties for the named
// transitions. To save file size feel free to remove any of these that you
// don't need.
//
$.fn.cycle.transitions.none = function($cont, $slides, opts) {
	opts.fxFn = function(curr,next,opts,after){
		$(next).show();
		$(curr).hide();
		after();
	};
};

// not a cross-fade, fadeout only fades out the top slide
$.fn.cycle.transitions.fadeout = function($cont, $slides, opts) {
	$slides.not(':eq('+opts.currSlide+')').css({ display: 'block', 'opacity': 1 });
	opts.before.push(function(curr,next,opts,w,h,rev) {
		$(curr).css('zIndex',opts.slideCount + (rev !== true ? 1 : 0));
		$(next).css('zIndex',opts.slideCount + (rev !== true ? 0 : 1));
	});
	opts.animIn.opacity = 1;
	opts.animOut.opacity = 0;
	opts.cssBefore.opacity = 1;
	opts.cssBefore.display = 'block';
	opts.cssAfter.zIndex = 0;
};

// scrollUp/Down/Left/Right
$.fn.cycle.transitions.scrollUp = function($cont, $slides, opts) {
	$cont.css('overflow','hidden');
	opts.before.push($.fn.cycle.commonReset);
	var h = $cont.height();
	opts.cssBefore.top = h;
	opts.cssBefore.left = 0;
	opts.cssFirst.top = 0;
	opts.animIn.top = 0;
	opts.animOut.top = -h;
};
$.fn.cycle.transitions.scrollDown = function($cont, $slides, opts) {
	$cont.css('overflow','hidden');
	opts.before.push($.fn.cycle.commonReset);
	var h = $cont.height();
	opts.cssFirst.top = 0;
	opts.cssBefore.top = -h;
	opts.cssBefore.left = 0;
	opts.animIn.top = 0;
	opts.animOut.top = h;
};
$.fn.cycle.transitions.scrollLeft = function($cont, $slides, opts) {
	$cont.css('overflow','hidden');
	opts.before.push($.fn.cycle.commonReset);
	var w = $cont.width();
	opts.cssFirst.left = 0;
	opts.cssBefore.left = w;
	opts.cssBefore.top = 0;
	opts.animIn.left = 0;
	opts.animOut.left = 0-w;
};
$.fn.cycle.transitions.scrollRight = function($cont, $slides, opts) {
	$cont.css('overflow','hidden');
	opts.before.push($.fn.cycle.commonReset);
	var w = $cont.width();
	opts.cssFirst.left = 0;
	opts.cssBefore.left = -w;
	opts.cssBefore.top = 0;
	opts.animIn.left = 0;
	opts.animOut.left = w;
};
$.fn.cycle.transitions.scrollHorz = function($cont, $slides, opts) {
	$cont.css('overflow','hidden').width();
	opts.before.push(function(curr, next, opts, fwd) {
		if (opts.rev)
			fwd = !fwd;
		$.fn.cycle.commonReset(curr,next,opts);
		opts.cssBefore.left = fwd ? (next.cycleW-1) : (1-next.cycleW);
		opts.animOut.left = fwd ? -curr.cycleW : curr.cycleW;
	});
	opts.cssFirst.left = 0;
	opts.cssBefore.top = 0;
	opts.animIn.left = 0;
	opts.animOut.top = 0;
};
$.fn.cycle.transitions.scrollVert = function($cont, $slides, opts) {
	$cont.css('overflow','hidden');
	opts.before.push(function(curr, next, opts, fwd) {
		if (opts.rev)
			fwd = !fwd;
		$.fn.cycle.commonReset(curr,next,opts);
		opts.cssBefore.top = fwd ? (1-next.cycleH) : (next.cycleH-1);
		opts.animOut.top = fwd ? curr.cycleH : -curr.cycleH;
	});
	opts.cssFirst.top = 0;
	opts.cssBefore.left = 0;
	opts.animIn.top = 0;
	opts.animOut.left = 0;
};

// slideX/slideY
$.fn.cycle.transitions.slideX = function($cont, $slides, opts) {
	opts.before.push(function(curr, next, opts) {
		$(opts.elements).not(curr).hide();
		$.fn.cycle.commonReset(curr,next,opts,false,true);
		opts.animIn.width = next.cycleW;
	});
	opts.cssBefore.left = 0;
	opts.cssBefore.top = 0;
	opts.cssBefore.width = 0;
	opts.animIn.width = 'show';
	opts.animOut.width = 0;
};
$.fn.cycle.transitions.slideY = function($cont, $slides, opts) {
	opts.before.push(function(curr, next, opts) {
		$(opts.elements).not(curr).hide();
		$.fn.cycle.commonReset(curr,next,opts,true,false);
		opts.animIn.height = next.cycleH;
	});
	opts.cssBefore.left = 0;
	opts.cssBefore.top = 0;
	opts.cssBefore.height = 0;
	opts.animIn.height = 'show';
	opts.animOut.height = 0;
};

// shuffle
$.fn.cycle.transitions.shuffle = function($cont, $slides, opts) {
	var i, w = $cont.css('overflow', 'visible').width();
	$slides.css({left: 0, top: 0});
	opts.before.push(function(curr,next,opts) {
		$.fn.cycle.commonReset(curr,next,opts,true,true,true);
	});
	// only adjust speed once!
	if (!opts.speedAdjusted) {
		opts.speed = opts.speed / 2; // shuffle has 2 transitions
		opts.speedAdjusted = true;
	}
	opts.random = 0;
	opts.shuffle = opts.shuffle || {left:-w, top:15};
	opts.els = [];
	for (i=0; i < $slides.length; i++)
		opts.els.push($slides[i]);

	for (i=0; i < opts.currSlide; i++)
		opts.els.push(opts.els.shift());

	// custom transition fn (hat tip to Benjamin Sterling for this bit of sweetness!)
	opts.fxFn = function(curr, next, opts, cb, fwd) {
		if (opts.rev)
			fwd = !fwd;
		var $el = fwd ? $(curr) : $(next);
		$(next).css(opts.cssBefore);
		var count = opts.slideCount;
		$el.animate(opts.shuffle, opts.speedIn, opts.easeIn, function() {
			var hops = $.fn.cycle.hopsFromLast(opts, fwd);
			for (var k=0; k < hops; k++) {
				if (fwd)
					opts.els.push(opts.els.shift());
				else
					opts.els.unshift(opts.els.pop());
			}
			if (fwd) {
				for (var i=0, len=opts.els.length; i < len; i++)
					$(opts.els[i]).css('z-index', len-i+count);
			}
			else {
				var z = $(curr).css('z-index');
				$el.css('z-index', parseInt(z,10)+1+count);
			}
			$el.animate({left:0, top:0}, opts.speedOut, opts.easeOut, function() {
				$(fwd ? this : curr).hide();
				if (cb) cb();
			});
		});
	};
	$.extend(opts.cssBefore, { display: 'block', opacity: 1, top: 0, left: 0 });
};

// turnUp/Down/Left/Right
$.fn.cycle.transitions.turnUp = function($cont, $slides, opts) {
	opts.before.push(function(curr, next, opts) {
		$.fn.cycle.commonReset(curr,next,opts,true,false);
		opts.cssBefore.top = next.cycleH;
		opts.animIn.height = next.cycleH;
		opts.animOut.width = next.cycleW;
	});
	opts.cssFirst.top = 0;
	opts.cssBefore.left = 0;
	opts.cssBefore.height = 0;
	opts.animIn.top = 0;
	opts.animOut.height = 0;
};
$.fn.cycle.transitions.turnDown = function($cont, $slides, opts) {
	opts.before.push(function(curr, next, opts) {
		$.fn.cycle.commonReset(curr,next,opts,true,false);
		opts.animIn.height = next.cycleH;
		opts.animOut.top   = curr.cycleH;
	});
	opts.cssFirst.top = 0;
	opts.cssBefore.left = 0;
	opts.cssBefore.top = 0;
	opts.cssBefore.height = 0;
	opts.animOut.height = 0;
};
$.fn.cycle.transitions.turnLeft = function($cont, $slides, opts) {
	opts.before.push(function(curr, next, opts) {
		$.fn.cycle.commonReset(curr,next,opts,false,true);
		opts.cssBefore.left = next.cycleW;
		opts.animIn.width = next.cycleW;
	});
	opts.cssBefore.top = 0;
	opts.cssBefore.width = 0;
	opts.animIn.left = 0;
	opts.animOut.width = 0;
};
$.fn.cycle.transitions.turnRight = function($cont, $slides, opts) {
	opts.before.push(function(curr, next, opts) {
		$.fn.cycle.commonReset(curr,next,opts,false,true);
		opts.animIn.width = next.cycleW;
		opts.animOut.left = curr.cycleW;
	});
	$.extend(opts.cssBefore, { top: 0, left: 0, width: 0 });
	opts.animIn.left = 0;
	opts.animOut.width = 0;
};

// zoom
$.fn.cycle.transitions.zoom = function($cont, $slides, opts) {
	opts.before.push(function(curr, next, opts) {
		$.fn.cycle.commonReset(curr,next,opts,false,false,true);
		opts.cssBefore.top = next.cycleH/2;
		opts.cssBefore.left = next.cycleW/2;
		$.extend(opts.animIn, { top: 0, left: 0, width: next.cycleW, height: next.cycleH });
		$.extend(opts.animOut, { width: 0, height: 0, top: curr.cycleH/2, left: curr.cycleW/2 });
	});
	opts.cssFirst.top = 0;
	opts.cssFirst.left = 0;
	opts.cssBefore.width = 0;
	opts.cssBefore.height = 0;
};

// fadeZoom
$.fn.cycle.transitions.fadeZoom = function($cont, $slides, opts) {
	opts.before.push(function(curr, next, opts) {
		$.fn.cycle.commonReset(curr,next,opts,false,false);
		opts.cssBefore.left = next.cycleW/2;
		opts.cssBefore.top = next.cycleH/2;
		$.extend(opts.animIn, { top: 0, left: 0, width: next.cycleW, height: next.cycleH });
	});
	opts.cssBefore.width = 0;
	opts.cssBefore.height = 0;
	opts.animOut.opacity = 0;
};

// blindX
$.fn.cycle.transitions.blindX = function($cont, $slides, opts) {
	var w = $cont.css('overflow','hidden').width();
	opts.before.push(function(curr, next, opts) {
		$.fn.cycle.commonReset(curr,next,opts);
		opts.animIn.width = next.cycleW;
		opts.animOut.left   = curr.cycleW;
	});
	opts.cssBefore.left = w;
	opts.cssBefore.top = 0;
	opts.animIn.left = 0;
	opts.animOut.left = w;
};
// blindY
$.fn.cycle.transitions.blindY = function($cont, $slides, opts) {
	var h = $cont.css('overflow','hidden').height();
	opts.before.push(function(curr, next, opts) {
		$.fn.cycle.commonReset(curr,next,opts);
		opts.animIn.height = next.cycleH;
		opts.animOut.top   = curr.cycleH;
	});
	opts.cssBefore.top = h;
	opts.cssBefore.left = 0;
	opts.animIn.top = 0;
	opts.animOut.top = h;
};
// blindZ
$.fn.cycle.transitions.blindZ = function($cont, $slides, opts) {
	var h = $cont.css('overflow','hidden').height();
	var w = $cont.width();
	opts.before.push(function(curr, next, opts) {
		$.fn.cycle.commonReset(curr,next,opts);
		opts.animIn.height = next.cycleH;
		opts.animOut.top   = curr.cycleH;
	});
	opts.cssBefore.top = h;
	opts.cssBefore.left = w;
	opts.animIn.top = 0;
	opts.animIn.left = 0;
	opts.animOut.top = h;
	opts.animOut.left = w;
};

// growX - grow horizontally from centered 0 width
$.fn.cycle.transitions.growX = function($cont, $slides, opts) {
	opts.before.push(function(curr, next, opts) {
		$.fn.cycle.commonReset(curr,next,opts,false,true);
		opts.cssBefore.left = this.cycleW/2;
		opts.animIn.left = 0;
		opts.animIn.width = this.cycleW;
		opts.animOut.left = 0;
	});
	opts.cssBefore.top = 0;
	opts.cssBefore.width = 0;
};
// growY - grow vertically from centered 0 height
$.fn.cycle.transitions.growY = function($cont, $slides, opts) {
	opts.before.push(function(curr, next, opts) {
		$.fn.cycle.commonReset(curr,next,opts,true,false);
		opts.cssBefore.top = this.cycleH/2;
		opts.animIn.top = 0;
		opts.animIn.height = this.cycleH;
		opts.animOut.top = 0;
	});
	opts.cssBefore.height = 0;
	opts.cssBefore.left = 0;
};

// curtainX - squeeze in both edges horizontally
$.fn.cycle.transitions.curtainX = function($cont, $slides, opts) {
	opts.before.push(function(curr, next, opts) {
		$.fn.cycle.commonReset(curr,next,opts,false,true,true);
		opts.cssBefore.left = next.cycleW/2;
		opts.animIn.left = 0;
		opts.animIn.width = this.cycleW;
		opts.animOut.left = curr.cycleW/2;
		opts.animOut.width = 0;
	});
	opts.cssBefore.top = 0;
	opts.cssBefore.width = 0;
};
// curtainY - squeeze in both edges vertically
$.fn.cycle.transitions.curtainY = function($cont, $slides, opts) {
	opts.before.push(function(curr, next, opts) {
		$.fn.cycle.commonReset(curr,next,opts,true,false,true);
		opts.cssBefore.top = next.cycleH/2;
		opts.animIn.top = 0;
		opts.animIn.height = next.cycleH;
		opts.animOut.top = curr.cycleH/2;
		opts.animOut.height = 0;
	});
	opts.cssBefore.height = 0;
	opts.cssBefore.left = 0;
};

// cover - curr slide covered by next slide
$.fn.cycle.transitions.cover = function($cont, $slides, opts) {
	var d = opts.direction || 'left';
	var w = $cont.css('overflow','hidden').width();
	var h = $cont.height();
	opts.before.push(function(curr, next, opts) {
		$.fn.cycle.commonReset(curr,next,opts);
		opts.cssAfter.display = '';
		if (d == 'right')
			opts.cssBefore.left = -w;
		else if (d == 'up')
			opts.cssBefore.top = h;
		else if (d == 'down')
			opts.cssBefore.top = -h;
		else
			opts.cssBefore.left = w;
	});
	opts.animIn.left = 0;
	opts.animIn.top = 0;
	opts.cssBefore.top = 0;
	opts.cssBefore.left = 0;
};

// uncover - curr slide moves off next slide
$.fn.cycle.transitions.uncover = function($cont, $slides, opts) {
	var d = opts.direction || 'left';
	var w = $cont.css('overflow','hidden').width();
	var h = $cont.height();
	opts.before.push(function(curr, next, opts) {
		$.fn.cycle.commonReset(curr,next,opts,true,true,true);
		if (d == 'right')
			opts.animOut.left = w;
		else if (d == 'up')
			opts.animOut.top = -h;
		else if (d == 'down')
			opts.animOut.top = h;
		else
			opts.animOut.left = -w;
	});
	opts.animIn.left = 0;
	opts.animIn.top = 0;
	opts.cssBefore.top = 0;
	opts.cssBefore.left = 0;
};

// toss - move top slide and fade away
$.fn.cycle.transitions.toss = function($cont, $slides, opts) {
	var w = $cont.css('overflow','visible').width();
	var h = $cont.height();
	opts.before.push(function(curr, next, opts) {
		$.fn.cycle.commonReset(curr,next,opts,true,true,true);
		// provide default toss settings if animOut not provided
		if (!opts.animOut.left && !opts.animOut.top)
			$.extend(opts.animOut, { left: w*2, top: -h/2, opacity: 0 });
		else
			opts.animOut.opacity = 0;
	});
	opts.cssBefore.left = 0;
	opts.cssBefore.top = 0;
	opts.animIn.left = 0;
};

// wipe - clip animation
$.fn.cycle.transitions.wipe = function($cont, $slides, opts) {
	var w = $cont.css('overflow','hidden').width();
	var h = $cont.height();
	opts.cssBefore = opts.cssBefore || {};
	var clip;
	if (opts.clip) {
		if (/l2r/.test(opts.clip))
			clip = 'rect(0px 0px '+h+'px 0px)';
		else if (/r2l/.test(opts.clip))
			clip = 'rect(0px '+w+'px '+h+'px '+w+'px)';
		else if (/t2b/.test(opts.clip))
			clip = 'rect(0px '+w+'px 0px 0px)';
		else if (/b2t/.test(opts.clip))
			clip = 'rect('+h+'px '+w+'px '+h+'px 0px)';
		else if (/zoom/.test(opts.clip)) {
			var top = parseInt(h/2,10);
			var left = parseInt(w/2,10);
			clip = 'rect('+top+'px '+left+'px '+top+'px '+left+'px)';
		}
	}

	opts.cssBefore.clip = opts.cssBefore.clip || clip || 'rect(0px 0px 0px 0px)';

	var d = opts.cssBefore.clip.match(/(\d+)/g);
	var t = parseInt(d[0],10), r = parseInt(d[1],10), b = parseInt(d[2],10), l = parseInt(d[3],10);

	opts.before.push(function(curr, next, opts) {
		if (curr == next) return;
		var $curr = $(curr), $next = $(next);
		$.fn.cycle.commonReset(curr,next,opts,true,true,false);
		opts.cssAfter.display = 'block';

		var step = 1, count = parseInt((opts.speedIn / 13),10) - 1;
		(function f() {
			var tt = t ? t - parseInt(step * (t/count),10) : 0;
			var ll = l ? l - parseInt(step * (l/count),10) : 0;
			var bb = b < h ? b + parseInt(step * ((h-b)/count || 1),10) : h;
			var rr = r < w ? r + parseInt(step * ((w-r)/count || 1),10) : w;
			$next.css({ clip: 'rect('+tt+'px '+rr+'px '+bb+'px '+ll+'px)' });
			(step++ <= count) ? setTimeout(f, 13) : $curr.css('display', 'none');
		})();
	});
	$.extend(opts.cssBefore, { display: 'block', opacity: 1, top: 0, left: 0 });
	opts.animIn	   = { left: 0 };
	opts.animOut   = { left: 0 };
};

})(jQuery);
;
/* jshint onevar:false, loopfunc:true */
/* global jetpackSlideshowSettings, escape */

// WARNING: This file is distributed verbatim in Jetpack. @hide-in-jetpack
function JetpackSlideshow( element, width, height, transition ) {
	this.element = element;
	this.images = [];
	this.controls = {};
	this.transition = transition || 'fade';

	var currentWidth = this.element.width();
	if ( !width || width > currentWidth ) {
		width = currentWidth;
	}

	this.width = width;
	this.height = height;
	this.element.css( {
		'height': this.height + 'px'
		} );
}

JetpackSlideshow.prototype.showLoadingImage = function( toggle ) {
	if ( toggle ) {
		this.loadingImage_ = document.createElement( 'div' );
		this.loadingImage_.className = 'slideshow-loading';
		var img = document.createElement( 'img' );
		img.src = jetpackSlideshowSettings.spinner;
		this.loadingImage_.appendChild( img );
		this.loadingImage_.appendChild( this.makeZeroWidthSpan() );
		this.loadingImage_.style.lineHeight = this.height + 'px';
		this.element.append( this.loadingImage_ );
	} else if ( this.loadingImage_ ) {
		this.loadingImage_.parentNode.removeChild( this.loadingImage_ );
		this.loadingImage_ = null;
	}
};

JetpackSlideshow.prototype.init = function() {
	this.showLoadingImage(true);

	var self = this;
	// Set up DOM.
	for ( var i = 0; i < this.images.length; i++ ) {
		var imageInfo = this.images[i];
		var img = document.createElement( 'img' );
		img.src = imageInfo.src + '?w=' + this.width;
		img.title = imageInfo.title;
		img.alt = imageInfo.alt;
		img.align = 'middle';
		var caption = document.createElement( 'div' );
		caption.className = 'slideshow-slide-caption';
		caption.innerHTML = imageInfo.caption;
		var container = document.createElement('div');
		container.className = 'slideshow-slide';
		container.style.lineHeight = this.height + 'px';

		// Hide loading image once first image has loaded.
		if ( i === 0 ) {
			if ( img.complete ) {
				// IE, image in cache
				setTimeout( function() {
					self.finishInit_();
				}, 1);
			} else {
				jQuery( img ).load(function() {
					self.finishInit_();
				});
			}
		}
		container.appendChild( img );
		// I'm not sure where these were coming from, but IE adds
		// bad values for width/height for portrait-mode images
		img.removeAttribute('width');
		img.removeAttribute('height');
		container.appendChild( this.makeZeroWidthSpan() );
		container.appendChild( caption );
		this.element.append( container );
	}
};

JetpackSlideshow.prototype.makeZeroWidthSpan = function() {
	var emptySpan = document.createElement( 'span' );
	emptySpan.className = 'slideshow-line-height-hack';
	// Having a NBSP makes IE act weird during transitions, but other
	// browsers ignore a text node with a space in it as whitespace.
	if (jQuery.browser.msie) {
		emptySpan.appendChild( document.createTextNode(' ') );
	} else {
		emptySpan.innerHTML = '&nbsp;';
	}
	return emptySpan;
};

JetpackSlideshow.prototype.finishInit_ = function() {
	this.showLoadingImage( false );
	this.renderControls_();

	var self = this;
	if ( this.images.length > 1 ) {
		// Initialize Cycle instance.
		this.element.cycle( {
			fx: this.transition,
			prev: this.controls.prev,
			next: this.controls.next,
			slideExpr: '.slideshow-slide',
			onPrevNextEvent: function() {
				return self.onCyclePrevNextClick_.apply( self, arguments );
			}
		} );

		var slideshow = this.element;
		jQuery( this.controls.stop ).click( function() {
			var button = jQuery(this);
			if ( ! button.hasClass( 'paused' ) ) {
				slideshow.cycle( 'pause' );
				button.removeClass( 'running' );
				button.addClass( 'paused' );
			} else {
				button.addClass( 'running' );
				button.removeClass( 'paused' );
				slideshow.cycle( 'resume', true );
			}
			return false;
		} );

		var controls = jQuery( this.controlsDiv_ );
		slideshow.on( 'mouseenter focusin', function() {
			controls.stop( true, false ).fadeTo( 200, 1 );
		} );
		slideshow.on( 'mouseleave', function() {
			if ( ! jQuery( document.activeElement.parentNode ).hasClass( 'slideshow-controls' ) ) {
				controls.fadeTo( 200, 0.5 );
			}
		} );
		slideshow.on( 'focusout', function() {
			if ( ! slideshow.is( ':hover' ) ) {
				controls.fadeTo( 200, 0.5 );
			}
		} );
	} else {
		this.element.children( ':first' ).show();
		this.element.css( 'position', 'relative' );
	}
	this.initialized_ = true;
};

JetpackSlideshow.prototype.renderControls_ = function() {
	if ( this.controlsDiv_ ) {
		return;
	}

	var controlsDiv = document.createElement( 'div' );
	controlsDiv.className = 'slideshow-controls';

	var controls = [ 'prev', 'stop', 'next' ];
	for ( var i = 0; i < controls.length; i++ ) {
		var controlName = controls[i];
		var a = document.createElement( 'a' );
		a.href = '#';
		controlsDiv.appendChild( a );
		this.controls[controlName] = a;
	}
	this.element.append( controlsDiv );
	this.controlsDiv_ = controlsDiv;
};

JetpackSlideshow.prototype.onCyclePrevNextClick_ = function( isNext, i/*, slideElement*/ ) {
	// If blog_id not present don't track page views
	if ( ! jetpackSlideshowSettings.blog_id ) {
		return;
	}

	var postid = this.images[i].id;
	var stats = new Image();
	stats.src = document.location.protocol +
		'//pixel.wp.com/g.gif?host=' +
		escape( document.location.host ) +
		'&rand=' + Math.random() +
		'&blog=' + jetpackSlideshowSettings.blog_id +
		'&subd=' + jetpackSlideshowSettings.blog_subdomain +
		'&user_id=' + jetpackSlideshowSettings.user_id +
		'&post=' + postid +
		'&ref=' + escape( document.location );
};

( function ( $ ) {
	function jetpack_slideshow_init() {
		$( '.jetpack-slideshow-noscript' ).remove();

		$( '.jetpack-slideshow' ).each( function () {
			var container = $( this );

			if ( container.data( 'processed' ) ) {
				return;
			}

			var slideshow = new JetpackSlideshow( container, container.data( 'width' ), container.data( 'height' ), container.data( 'trans' ) );
			slideshow.images = container.data( 'gallery' );
			slideshow.init();

			container.data( 'processed', true );
		} );
	}

	$( document ).ready( jetpack_slideshow_init );
	$( 'body' ).on( 'post-load', jetpack_slideshow_init );
} )( jQuery );
;
window.olark || (function (c) {
    var f = window,
        d = document,
        l = f.location.protocol == "https:" ? "https:" : "http:",
        z = c.name,
        r = "load";
    var nt = function () {
        f[z] = function () {
            (a.s = a.s || []).push(arguments)
        };
        var a = f[z]._ = {}, q = c.methods.length;
        while (q--) {
            (function (n) {
                f[z][n] = function () {
                    f[z]("call", n, arguments)
                }
            })(c.methods[q])
        }
        a.l = c.loader;
        a.i = nt;
        a.p = {
            0: +new Date
        };
        a.P = function (u) {
            a.p[u] = new Date - a.p[0]
        };

        function s() {
            a.P(r);
            f[z](r)
        }
        f.addEventListener ? f.addEventListener(r, s, false) : f.attachEvent("on" + r, s);
        var ld = function () {
            function p(hd) {
                hd = "head";
                return ["<", hd, "></", hd, "><", i, ' onl' + 'oad="var d=', g, ";d.getElementsByTagName('head')[0].", j, "(d.", h, "('script')).", k, "='", l, "//", a.l, "'", '"', "></", i, ">"].join("")
            }
            var i = "body",
                m = d[i];
            if (!m) {
                return setTimeout(ld, 100)
            }
            a.P(1);
            var j = "appendChild",
                h = "createElement",
                k = "src",
                n = d[h]("div"),
                v = n[j](d[h](z)),
                b = d[h]("iframe"),
                g = "document",
                e = "domain",
                o;
            n.style.display = "none";
            m.insertBefore(n, m.firstChild).id = z;
            b.frameBorder = "0";
            b.id = z + "-loader";
            if (/MSIE[ ]+6/.test(navigator.userAgent)) {
                b.src = "javascript:false"
            }
            b.allowTransparency = "true";
            v[j](b);
            try {
                b.contentWindow[g].open()
            } catch (w) {
                c[e] = d[e];
                o = "javascript:var d=" + g + ".open();d.domain='" + d.domain + "';";
                b[k] = o + "void(0);"
            }
            try {
                var t = b.contentWindow[g];
                t.write(p());
                t.close()
            } catch (x) {
                b[k] = o + 'd.write("' + p().replace(/"/g, String.fromCharCode(92) + '"') + '");d.close();'
            }
            a.P(2)
        };
        ld()
    };
    nt()
})({
    loader: "static.olark.com/jsclient/loader0.js",
    name: "olark",
    methods: ["configure", "extend", "declare", "identify"]
});
;
( function( $ ) {
	var wpcom_olark = window.wpcom_olark || {},
		olark = window.olark || {};

	var skip_ajax = wpcom_olark.skip_ajax || false;

	var chat_displayed = false;
	var page_load_time = new Date().getTime();

	var configureSystem = function( system ) {
		if ( system.group && olark.configure ) {
			olark.configure( 'system.group', system.group );
			olark.configure( 'system.chat_does_not_follow_external_links', true );
			olark.configure( 'locale.welcome_message', wpcom_olark.campaignArgs.welcome_message );
		}
	};

	var configureBox = function( box ) {
		if ( box.start_hidden && olark.configure )
			olark.configure( 'box.start_hidden', box.start_hidden );
	};

	var doVisitorCalls = function( data, call ) {
		olark( 'api.visitor.' + call, data );
	};

	var doAjaxCallOnBeginConversation = function() {
		if ( wpcom_olark.skip_ajax || ! wpcom_olark.nonce || ! wpcom_olark.campaignArgs ) {
			return false;
		}
		var wp_nonce = wpcom_olark.nonce,
			wp_campaign = wpcom_olark.campaignArgs;

		if ( ! wp_campaign.campaign || ! wp_campaign.fromPage )
			return false;

		$.post( '/wp-admin/admin-ajax.php', {
			action:    'on_begin_conversation',
			nonce:     wp_nonce,
			campaign:  wp_campaign.campaign,
			from_page: wp_campaign.fromPage,
			group:     wpcom_olark.system.group
		}, function( data ) {
			try {
				var json = $.parseJSON( data );
				if ( json.count > 0 && json.zd_id > 0 ) {
					var plural = ( json.count > 1 ) ? 's' : '';
					olark( 'api.chat.sendNotificationToOperator', { body: 'This VIP user has ' + json.count + ' unresolved Zendesk ticket' + plural + ': https://wordpressvip.zendesk.com/agent/users/' + json.zd_id + '/requested_tickets' } );
				}
			} catch ( e ) {}
		} );
	};

	var updateVisitorNickname = function( api ) {
		if ( ! api.chat || ! api.chat.visitorNickname )
			return false;

		olark( 'api.chat.updateVisitorNickname', api.chat.visitorNickname );
	};

	var updateVisitorStatus = function( api ) {
		if ( ! api.chat || ! api.chat.visitorStatus )
			return false;

		olark( 'api.chat.updateVisitorStatus', api.chat.visitorStatus );
	};

	var updateEmailAddress = function( api ) {
		if ( ! api.visitor || ! api.visitor.EmailAddress )
			return false;

		olark( 'api.visitor.updateEmailAddress', api.visitor.EmailAddress );
	};

	var updateFullName = function( api ) {
		if ( ! api.visitor || ! api.visitor.FullName )
			return false;

		olark( 'api.visitor.updateFullName', api.visitor.FullName );
	};

	var doChatNotifications = function( olarkEvent ) {
		var process = function( receiver, notifications, olarkEvent ) {
			if ( ! notifications[olarkEvent] )
				return false;

			send( receiver, notifications[olarkEvent] );
		};

		var send = function( receiver, messages ) {
			var i,
			capitalizeFirstLetter = function( string ) {
				return string.charAt( 0 ).toUpperCase() + string.slice( 1 );
			};

			for ( i = 0; i < messages.length; i++ ) {
				olark( 'api.chat.sendNotificationTo' + capitalizeFirstLetter( receiver ), { body: messages[i] } );
			}
		};

		if ( ! wpcom_olark.notifications )
			return false;

		var receivers = [ 'operator', 'visitor' ], i;
		for ( i = 0; i < receivers.length; i++ ) {
			if ( ! wpcom_olark.notifications[receivers[i]] )
				continue;
			process( receivers[i], wpcom_olark.notifications[receivers[i]], olarkEvent );
		};
	};

	var updateVisitorCustomFields = function( api ) {
		if ( ! api.visitor || ! api.visitor.customFields )
			return false;
		doVisitorCalls( api.visitor.customFields, 'updateCustomFields' );
	};

	var callback = {
		onBeginConversation : function() {
			pingTracks(
				{
					stat_name: 'wpcom_live_chat_begin',
					oper_group: wpcom_olark.system.group,
					seconds_since_page_load: Math.round( ( new Date().getTime() - page_load_time ) / 1000 ),
				} );
			wpcom_olark.conversationStarted = true;
			doChatNotifications( 'onBeginConversation' );
			doAjaxCallOnBeginConversation();
		},
		onOperatorsAway: function() {
			// TODO: To be enabled later. See https://happinessgardeningp2.wordpress.com/2015/02/02/olark-groups-with-one-account-project/
			// olark( 'api.chat.setOperatorGroup', { group: wpcom_olark.system.fallback_group } );
			// Use weird negative logic here b/c some Olark installs don't have this object.
			if ( 1 !== wpcom_olark.campaignArgs.show_offline ) {
				olark( 'api.box.hide' );
			}
		},
		onOperatorsAvailable: function() {
			// Use weird negative logic here b/c some Olark installs don't have this object.
			if ( 1 !== wpcom_olark.user_hid_chat ) {
				olark( 'api.box.show' );
			}

			if ( false === chat_displayed ) {
				chat_displayed = true;
			}
		},
        onCommandFromOperator: function( event ) {
            if ( event.command.name == 'ticket' ) {
                olark( 'api.visitor.updateCustomFields', { create_support_ticket: true } );
            }
        },
		onMessageToOperator: function() {
			if ( wpcom_olark.skip_ajax ) {
				return;
			}
			var nonce = wpcom_olark.message_nonce;
			$.post( '/wp-admin/admin-ajax.php', {
				action:    'on_message_to_operator',
				group:     wpcom_olark.system.group,
				campaign:  wpcom_olark.campaignArgs.campaign,
				nonce:     nonce
			} );
		}
	};

	var identify = function() {
		// Need site identity in order to do anything here
		if ( ! wpcom_olark.identity || ! olark.identify ) {
			return false;
		}

		olark.identify( wpcom_olark.identity );
		return true;
	};

	var maybePingTracks = function( properties ) {
		if ( true === chat_displayed ) {
			return;
		}
		pingTracks( properties );
	};

	var pingTracks = function( properties ) {
		// TODO: Limit to /wp-admin (we show chat in other contexts sometimes)?

		var _properties = {
			from_page: wpcom_olark.campaignArgs.fromPage,
			user_type: wpcom_olark.campaignArgs.user_type,
			campaign: wpcom_olark.campaignArgs.campaign,
			source: getTracksSource()
		};

		var stat_name = 'undefined_olark_stat';

		if ( 'object' === typeof properties ) {
			for ( var key in properties ) {
				if ( 'stat_name' === key ) {
					stat_name = properties[ key ];
					continue;
				}
				_properties[ key ] = properties[ key ];
			}
		}

		_tkq = window._tkq || [];
		_tkq.push( [ 'recordEvent', stat_name, _properties ] );
	}.bind( wpcom_olark );

	var getTracksSource = function() {
		if ( document.location.pathname.indexOf( '/wp-admin' ) > -1 ) {
			return 'wp-admin';
		}
		if ( document.location.pathname.indexOf( 'support.wordpress.com' ) > -1 ) {
			return 'support';
		}
		if ( document.location.host.indexOf( 'akismet.com' ) > -1 ) {
			return 'akismet';
		}
		if ( document.location.host.indexOf( 'vaultpress.com' ) > -1 ) {
			return 'vaultpress';
		}
		// TODO: What about non-newdash admin?
		if ( document.location.host == 'wordpress.com' ) {
			return 'newdash';
		}
		return 'unknown';
	};

	var init = function() {

		var eligible_for_chat = 'boolean' === typeof wpcom_olark.campaignArgs.eligible && true === wpcom_olark.campaignArgs.eligible;

		setTimeout( maybePingTracks, 15000, { stat_name: 'wpcom_admin_page_view_without_opers_available', seconds: 15, eligible_for_chat: eligible_for_chat } );
		setTimeout( maybePingTracks, 30000, { stat_name: 'wpcom_admin_page_view_without_opers_available', seconds: 30, eligible_for_chat: eligible_for_chat } );
		setTimeout( maybePingTracks, 300000, { stat_name: 'wpcom_admin_page_view_without_opers_available', seconds: 300, eligible_for_chat: eligible_for_chat } );

		if ( ! eligible_for_chat ) {
			return false;
		}

		if ( ! olark || ! identify() ) {
			return false;
		}

		pingTracks( { stat_name: 'wpcom_admin_page_view_eligible_for_chat' } );

		if ( wpcom_olark.system ) {
			configureSystem( wpcom_olark.system );
		}

		if ( wpcom_olark.box ) {
			configureBox( wpcom_olark.box );
		}

		/* Optional Custom Configuration */
		if ( ! wpcom_olark.api ) {
			return false;
		}

		updateVisitorStatus( wpcom_olark.api );
//		updateEmailAddress( wpcom_olark.api );
//		updateFullName( wpcom_olark.api );
		updateVisitorNickname( wpcom_olark.api );
		updateVisitorCustomFields( wpcom_olark.api );

		doChatNotifications( 'beforeBeginConversation' );

		olark( 'api.chat.onBeginConversation', callback.onBeginConversation );
		olark( 'api.chat.onOperatorsAvailable', callback.onOperatorsAvailable );
		olark( 'api.chat.onOperatorsAway', callback.onOperatorsAway );
		olark( 'api.chat.onCommandFromOperator', callback.onCommandFromOperator );
		olark( 'api.chat.onMessageToOperator', callback.onMessageToOperator );

		window.wpcom_olark = wpcom_olark;
		return true;
	};

	init();
} ( jQuery ) );

;
